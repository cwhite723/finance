2024-09-04 06:13:00 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 06:13:00 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 516 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 06:13:00 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 06:13:00 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 06:13:00 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 06:13:00 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 06:13:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:13:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 06:13:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65 ms. Found 3 JPA repository interfaces.
2024-09-04 06:13:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:13:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 06:13:01 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:13:01 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:13:01 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:13:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-04 06:13:01 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 06:13:01 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 06:13:01 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 06:13:01 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 06:13:01 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 06:13:01 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 841 ms
2024-09-04 06:13:01 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 06:13:01 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 06:13:01 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 06:13:01 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 06:13:01 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 06:13:01 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 06:13:01 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 06:13:02 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 06:13:02 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 06:13:02 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:13:02 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 06:13:02 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:13:02 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 06:13:02 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 06:13:02 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 06:13:02 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:13:02 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 06:13:03 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 06:13:03 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 06:13:03 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 06:13:03 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 06:13:03 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 3.066 seconds (process running for 3.382)
2024-09-04 06:13:15 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 06:13:15 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 06:13:15 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-04 06:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with arguments: [coke]
2024-09-04 06:13:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:13:17 ERROR c.hayan.dividend.aop.LoggingAspect - Exception in method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with message: 존재하지 않는 회사입니다.
2024-09-04 06:13:17 WARN  c.h.d.e.GlobalExceptionHandler - CustomException Occurred: 존재하지 않는 회사입니다.
2024-09-04 06:13:17 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [com.hayan.dividend.exception.CustomException: 존재하지 않는 회사입니다.]
2024-09-04 06:13:59 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:13:59 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 06:13:59 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 06:13:59 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 06:14:01 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 06:14:01 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 647 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 06:14:01 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 06:14:01 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 06:14:01 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 06:14:01 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 06:14:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:14:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 06:14:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 77 ms. Found 3 JPA repository interfaces.
2024-09-04 06:14:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:14:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 06:14:01 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:14:01 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:14:01 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:14:01 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-04 06:14:02 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 06:14:02 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 06:14:02 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 06:14:02 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 06:14:02 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 06:14:02 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1057 ms
2024-09-04 06:14:02 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 06:14:02 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 06:14:02 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 06:14:02 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 06:14:02 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 06:14:02 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 06:14:02 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 06:14:02 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 06:14:02 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 06:14:02 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:14:02 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 06:14:02 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:14:02 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 06:14:02 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 06:14:02 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 06:14:02 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:14:03 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 06:14:03 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 06:14:04 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 06:14:04 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 06:14:04 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 06:14:04 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 3.234 seconds (process running for 3.473)
2024-09-04 06:14:08 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 06:14:08 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 06:14:08 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-04 06:14:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with arguments: [coke]
2024-09-04 06:14:08 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:14:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with result: null
2024-09-04 06:14:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) in 3194 ms
2024-09-04 06:16:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CompanyDetailsResponse com.hayan.dividend.service.FinanceServiceImpl.loadCompanyDetails(String) with arguments: [Coca-Cola Consolidated, Inc.]
2024-09-04 06:16:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    where
        c1_0.name=?
2024-09-04 06:16:05 DEBUG org.hibernate.SQL - 
    select
        d1_0.company_id,
        d1_0.id,
        d1_0.date,
        d1_0.dividend 
    from
        dividends d1_0 
    where
        d1_0.company_id=?
2024-09-04 06:16:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CompanyDetailsResponse com.hayan.dividend.service.FinanceServiceImpl.loadCompanyDetails(String) with result: CompanyDetailsResponse[company=CompanyResponse[id=1, ticker=coke, name=Coca-Cola Consolidated, Inc.], dividends=[DividendResponse[date=2024-07-26, dividend=0.50 Dividend], DividendResponse[date=2024-04-25, dividend=0.50 Dividend], DividendResponse[date=2024-01-25, dividend=16.50 Dividend], DividendResponse[date=2023-10-26, dividend=0.50 Dividend], DividendResponse[date=2023-07-27, dividend=0.50 Dividend], DividendResponse[date=2023-04-27, dividend=0.50 Dividend], DividendResponse[date=2023-01-26, dividend=3.50 Dividend], DividendResponse[date=2022-10-26, dividend=0.25 Dividend], DividendResponse[date=2022-07-28, dividend=0.25 Dividend], DividendResponse[date=2022-04-27, dividend=0.25 Dividend], DividendResponse[date=2022-01-27, dividend=0.25 Dividend], DividendResponse[date=2021-10-21, dividend=0.25 Dividend], DividendResponse[date=2021-07-22, dividend=0.25 Dividend], DividendResponse[date=2021-04-22, dividend=0.25 Dividend], DividendResponse[date=2021-01-21, dividend=0.25 Dividend], DividendResponse[date=2020-10-22, dividend=0.25 Dividend], DividendResponse[date=2020-07-23, dividend=0.25 Dividend], DividendResponse[date=2020-04-22, dividend=0.25 Dividend], DividendResponse[date=2020-01-23, dividend=0.25 Dividend], DividendResponse[date=2019-10-24, dividend=0.25 Dividend], DividendResponse[date=2019-07-25, dividend=0.25 Dividend], DividendResponse[date=2019-04-25, dividend=0.25 Dividend], DividendResponse[date=2019-01-24, dividend=0.25 Dividend], DividendResponse[date=2018-10-25, dividend=0.25 Dividend], DividendResponse[date=2018-07-26, dividend=0.25 Dividend], DividendResponse[date=2018-04-26, dividend=0.25 Dividend], DividendResponse[date=2018-01-25, dividend=0.25 Dividend], DividendResponse[date=2017-10-26, dividend=0.25 Dividend], DividendResponse[date=2017-07-26, dividend=0.25 Dividend], DividendResponse[date=2017-04-26, dividend=0.25 Dividend], DividendResponse[date=2017-01-25, dividend=0.25 Dividend], DividendResponse[date=2016-10-26, dividend=0.25 Dividend], DividendResponse[date=2016-07-27, dividend=0.25 Dividend], DividendResponse[date=2016-04-27, dividend=0.25 Dividend], DividendResponse[date=2016-01-27, dividend=0.25 Dividend], DividendResponse[date=2015-10-28, dividend=0.25 Dividend], DividendResponse[date=2015-07-29, dividend=0.25 Dividend], DividendResponse[date=2015-04-29, dividend=0.25 Dividend], DividendResponse[date=2015-01-28, dividend=0.25 Dividend], DividendResponse[date=2014-10-29, dividend=0.25 Dividend], DividendResponse[date=2014-07-30, dividend=0.25 Dividend], DividendResponse[date=2014-04-30, dividend=0.25 Dividend], DividendResponse[date=2014-01-29, dividend=0.25 Dividend], DividendResponse[date=2013-10-30, dividend=0.25 Dividend], DividendResponse[date=2013-07-31, dividend=0.25 Dividend], DividendResponse[date=2013-05-01, dividend=0.25 Dividend], DividendResponse[date=2013-01-30, dividend=0.25 Dividend], DividendResponse[date=2012-10-31, dividend=0.25 Dividend], DividendResponse[date=2012-08-01, dividend=0.25 Dividend], DividendResponse[date=2012-05-02, dividend=0.25 Dividend], DividendResponse[date=2012-02-01, dividend=0.25 Dividend], DividendResponse[date=2011-11-03, dividend=0.25 Dividend], DividendResponse[date=2011-08-03, dividend=0.25 Dividend], DividendResponse[date=2011-05-04, dividend=0.25 Dividend], DividendResponse[date=2011-02-03, dividend=0.25 Dividend], DividendResponse[date=2010-11-04, dividend=0.25 Dividend], DividendResponse[date=2010-08-04, dividend=0.25 Dividend], DividendResponse[date=2010-05-05, dividend=0.25 Dividend], DividendResponse[date=2010-02-04, dividend=0.25 Dividend], DividendResponse[date=2009-11-05, dividend=0.25 Dividend], DividendResponse[date=2009-08-05, dividend=0.25 Dividend], DividendResponse[date=2009-05-06, dividend=0.25 Dividend], DividendResponse[date=2009-02-05, dividend=0.25 Dividend], DividendResponse[date=2008-11-05, dividend=0.25 Dividend], DividendResponse[date=2008-08-06, dividend=0.25 Dividend], DividendResponse[date=2008-05-07, dividend=0.25 Dividend], DividendResponse[date=2008-02-06, dividend=0.25 Dividend], DividendResponse[date=2007-11-07, dividend=0.25 Dividend], DividendResponse[date=2007-08-08, dividend=0.25 Dividend], DividendResponse[date=2007-05-09, dividend=0.25 Dividend], DividendResponse[date=2007-02-07, dividend=0.25 Dividend], DividendResponse[date=2006-11-08, dividend=0.25 Dividend], DividendResponse[date=2006-08-09, dividend=0.25 Dividend], DividendResponse[date=2006-05-10, dividend=0.25 Dividend], DividendResponse[date=2006-02-08, dividend=0.25 Dividend], DividendResponse[date=2005-11-08, dividend=0.25 Dividend], DividendResponse[date=2005-08-10, dividend=0.25 Dividend], DividendResponse[date=2005-05-11, dividend=0.25 Dividend], DividendResponse[date=2005-02-09, dividend=0.25 Dividend], DividendResponse[date=2004-11-09, dividend=0.25 Dividend], DividendResponse[date=2004-08-11, dividend=0.25 Dividend], DividendResponse[date=2004-05-12, dividend=0.25 Dividend], DividendResponse[date=2004-02-11, dividend=0.25 Dividend], DividendResponse[date=2003-11-12, dividend=0.25 Dividend], DividendResponse[date=2003-08-13, dividend=0.25 Dividend], DividendResponse[date=2003-05-14, dividend=0.25 Dividend], DividendResponse[date=2003-02-12, dividend=0.25 Dividend], DividendResponse[date=2002-11-13, dividend=0.25 Dividend], DividendResponse[date=2002-08-14, dividend=0.25 Dividend], DividendResponse[date=2002-05-15, dividend=0.25 Dividend], DividendResponse[date=2002-02-13, dividend=0.25 Dividend], DividendResponse[date=2001-11-14, dividend=0.25 Dividend], DividendResponse[date=2001-08-15, dividend=0.25 Dividend], DividendResponse[date=2001-05-16, dividend=0.25 Dividend], DividendResponse[date=2001-02-14, dividend=0.25 Dividend], DividendResponse[date=2000-11-15, dividend=0.25 Dividend], DividendResponse[date=2000-08-16, dividend=0.25 Dividend], DividendResponse[date=2000-05-17, dividend=0.25 Dividend], DividendResponse[date=2000-02-16, dividend=0.25 Dividend], DividendResponse[date=1999-11-17, dividend=0.25 Dividend], DividendResponse[date=1999-08-18, dividend=0.25 Dividend], DividendResponse[date=1999-05-19, dividend=0.25 Dividend], DividendResponse[date=1999-02-17, dividend=0.25 Dividend], DividendResponse[date=1998-11-18, dividend=0.25 Dividend], DividendResponse[date=1998-08-19, dividend=0.25 Dividend], DividendResponse[date=1998-05-20, dividend=0.25 Dividend], DividendResponse[date=1998-02-18, dividend=0.25 Dividend], DividendResponse[date=1997-11-19, dividend=0.25 Dividend], DividendResponse[date=1997-08-20, dividend=0.25 Dividend], DividendResponse[date=1997-05-20, dividend=0.25 Dividend], DividendResponse[date=1997-02-18, dividend=0.25 Dividend], DividendResponse[date=1996-11-20, dividend=0.25 Dividend], DividendResponse[date=1996-08-21, dividend=0.25 Dividend], DividendResponse[date=1996-05-21, dividend=0.25 Dividend], DividendResponse[date=1996-02-20, dividend=0.25 Dividend], DividendResponse[date=1995-11-21, dividend=0.25 Dividend], DividendResponse[date=1995-08-23, dividend=0.25 Dividend], DividendResponse[date=1995-05-19, dividend=0.25 Dividend], DividendResponse[date=1995-02-16, dividend=0.25 Dividend], DividendResponse[date=1994-11-18, dividend=0.25 Dividend], DividendResponse[date=1994-08-22, dividend=0.25 Dividend], DividendResponse[date=1994-05-20, dividend=0.25 Dividend], DividendResponse[date=1994-02-17, dividend=0.25 Dividend], DividendResponse[date=1993-11-19, dividend=0.22 Dividend], DividendResponse[date=1993-08-23, dividend=0.22 Dividend], DividendResponse[date=1993-05-21, dividend=0.22 Dividend], DividendResponse[date=1993-02-18, dividend=0.22 Dividend], DividendResponse[date=1992-11-19, dividend=0.22 Dividend], DividendResponse[date=1992-08-21, dividend=0.22 Dividend], DividendResponse[date=1992-05-20, dividend=0.22 Dividend], DividendResponse[date=1992-02-19, dividend=0.22 Dividend], DividendResponse[date=1991-11-19, dividend=0.22 Dividend], DividendResponse[date=1991-08-20, dividend=0.22 Dividend], DividendResponse[date=1991-05-20, dividend=0.22 Dividend], DividendResponse[date=1991-02-19, dividend=0.22 Dividend], DividendResponse[date=1990-11-16, dividend=0.22 Dividend], DividendResponse[date=1990-08-20, dividend=0.22 Dividend], DividendResponse[date=1990-05-18, dividend=0.22 Dividend], DividendResponse[date=1990-02-15, dividend=0.22 Dividend], DividendResponse[date=1989-11-17, dividend=0.22 Dividend], DividendResponse[date=1989-08-18, dividend=0.22 Dividend], DividendResponse[date=1989-05-24, dividend=0.22 Dividend], DividendResponse[date=1989-02-16, dividend=0.22 Dividend], DividendResponse[date=1988-11-17, dividend=0.22 Dividend], DividendResponse[date=1988-08-18, dividend=0.22 Dividend], DividendResponse[date=1988-05-20, dividend=0.22 Dividend], DividendResponse[date=1988-02-18, dividend=0.22 Dividend], DividendResponse[date=1987-11-18, dividend=0.22 Dividend], DividendResponse[date=1987-08-20, dividend=0.22 Dividend], DividendResponse[date=1987-05-20, dividend=0.22 Dividend], DividendResponse[date=1987-02-18, dividend=0.22 Dividend]]]
2024-09-04 06:16:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CompanyDetailsResponse com.hayan.dividend.service.FinanceServiceImpl.loadCompanyDetails(String) in 30 ms
2024-09-04 06:20:37 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:20:37 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 06:20:37 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 06:20:37 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 06:20:39 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 06:20:39 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 1229 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 06:20:39 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 06:20:39 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 06:20:39 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 06:20:39 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 06:20:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:20:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 06:20:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 75 ms. Found 3 JPA repository interfaces.
2024-09-04 06:20:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:20:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 06:20:40 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:20:40 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:20:40 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:20:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-04 06:20:40 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 06:20:40 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 06:20:40 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 06:20:40 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 06:20:40 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 06:20:40 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 967 ms
2024-09-04 06:20:40 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 06:20:40 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 06:20:40 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 06:20:40 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 06:20:40 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 06:20:40 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 06:20:40 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 06:20:40 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 06:20:41 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 06:20:41 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:20:41 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 06:20:41 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:20:41 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 06:20:41 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 06:20:41 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 06:20:41 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:20:41 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 06:20:41 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 06:20:42 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 06:20:42 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 06:20:42 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 06:20:42 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 3.152 seconds (process running for 3.386)
2024-09-04 06:20:47 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 06:20:47 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 06:20:47 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-04 06:20:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with arguments: [coke]
2024-09-04 06:20:47 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Dividend */insert 
    into
        dividends (company_id, date, dividend, id) 
    values
        (?, ?, ?, default)
2024-09-04 06:20:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with result: null
2024-09-04 06:20:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) in 3507 ms
2024-09-04 06:26:20 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:26:20 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 06:26:20 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 06:26:20 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 06:35:33 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:35:33 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 06:35:33 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 06:35:33 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 06:35:34 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 06:35:34 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 2416 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 06:35:34 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 06:35:34 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 06:35:34 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 06:35:34 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 06:35:34 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:35:34 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 06:35:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 62 ms. Found 3 JPA repository interfaces.
2024-09-04 06:35:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:35:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 06:35:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:35:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:35:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:35:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-04 06:35:35 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 06:35:35 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 06:35:35 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 06:35:35 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 06:35:35 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 06:35:35 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 807 ms
2024-09-04 06:35:35 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 06:35:35 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 06:35:35 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 06:35:35 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 06:35:35 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 06:35:35 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 06:35:35 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 06:35:35 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 06:35:36 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 06:35:36 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:35:36 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 06:35:36 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:35:36 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 06:35:36 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 06:35:36 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 06:35:36 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:35:36 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 06:35:36 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 06:35:37 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 06:35:37 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 06:35:37 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 06:35:37 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.956 seconds (process running for 3.202)
2024-09-04 06:35:41 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 06:35:41 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 06:35:41 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-04 06:35:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with arguments: [coke]
2024-09-04 06:35:42 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:35:45 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:35:45 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with result: null
2024-09-04 06:35:45 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) in 3355 ms
2024-09-04 06:38:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: void com.hayan.dividend.service.FinanceServiceImpl.delete(String) with arguments: [coke]
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    where
        c1_0.ticker=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    select
        d1_0.company_id,
        d1_0.id,
        d1_0.date,
        d1_0.dividend 
    from
        dividends d1_0 
    where
        d1_0.company_id=?
2024-09-04 06:38:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: void com.hayan.dividend.service.FinanceServiceImpl.delete(String) with result: null
2024-09-04 06:38:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: void com.hayan.dividend.service.FinanceServiceImpl.delete(String) in 60 ms
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Dividend */delete 
    from
        dividends 
    where
        id=?
2024-09-04 06:38:46 DEBUG org.hibernate.SQL - 
    /* delete for com.hayan.dividend.domain.Company */delete 
    from
        companies 
    where
        id=?
2024-09-04 06:44:01 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:44:01 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 06:44:01 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 06:44:01 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 06:44:03 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 06:44:03 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 3025 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 06:44:03 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 06:44:03 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 06:44:03 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 06:44:03 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 06:44:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:44:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 06:44:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 83 ms. Found 3 JPA repository interfaces.
2024-09-04 06:44:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:44:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 06:44:03 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:44:03 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:44:03 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:44:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2024-09-04 06:44:04 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 06:44:04 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 06:44:04 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 06:44:04 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 06:44:04 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 06:44:04 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1002 ms
2024-09-04 06:44:04 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 06:44:04 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 06:44:04 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 06:44:04 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 06:44:04 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 06:44:04 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 06:44:04 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 06:44:04 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 06:44:04 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 06:44:04 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:44:04 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 06:44:04 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:44:04 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 06:44:04 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 06:44:04 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 06:44:04 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:44:05 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 06:44:05 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 06:44:06 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 06:44:06 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 06:44:06 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 06:44:06 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 3.19 seconds (process running for 3.415)
2024-09-04 06:44:10 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 06:44:10 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 06:44:10 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-04 06:44:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with arguments: [coke]
2024-09-04 06:44:10 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:44:14 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with result: null
2024-09-04 06:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) in 3411 ms
2024-09-04 06:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: void com.hayan.dividend.service.FinanceServiceImpl.delete(String) with arguments: [coke]
2024-09-04 06:44:21 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    where
        c1_0.name=?
2024-09-04 06:44:21 ERROR c.hayan.dividend.aop.LoggingAspect - Exception in method: void com.hayan.dividend.service.FinanceServiceImpl.delete(String) with message: 존재하지 않는 회사입니다.
2024-09-04 06:44:21 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [com.hayan.dividend.exception.CustomException: 존재하지 않는 회사입니다.]
2024-09-04 06:46:32 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:46:32 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 06:46:32 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 06:46:32 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 06:46:34 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 06:46:34 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 3205 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 06:46:34 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 06:46:34 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 06:46:34 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 06:46:34 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 06:46:34 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:46:34 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 06:46:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 3 JPA repository interfaces.
2024-09-04 06:46:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:46:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 06:46:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:46:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:46:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:46:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-04 06:46:35 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 06:46:35 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 06:46:35 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 06:46:35 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 06:46:35 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 06:46:35 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1059 ms
2024-09-04 06:46:35 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 06:46:35 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 06:46:35 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 06:46:35 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 06:46:35 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 06:46:35 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 06:46:35 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 06:46:35 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 06:46:36 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 06:46:36 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:46:36 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 06:46:36 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:46:36 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 06:46:36 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 06:46:36 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 06:46:36 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:46:36 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 06:46:36 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 06:46:37 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 06:46:37 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 06:46:37 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 06:46:37 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 3.212 seconds (process running for 3.451)
2024-09-04 06:46:40 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 06:46:40 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 06:46:40 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-04 06:46:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with arguments: [coke]
2024-09-04 06:46:41 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:46:44 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:46:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) with result: null
2024-09-04 06:46:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: void com.hayan.dividend.service.FinanceServiceImpl.save(String) in 3039 ms
2024-09-04 06:46:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: void com.hayan.dividend.service.FinanceServiceImpl.delete(String) with arguments: [coke]
2024-09-04 06:46:50 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    where
        c1_0.ticker=?
2024-09-04 06:46:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: void com.hayan.dividend.service.FinanceServiceImpl.delete(String) with result: null
2024-09-04 06:46:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: void com.hayan.dividend.service.FinanceServiceImpl.delete(String) in 27 ms
2024-09-04 06:49:33 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:49:33 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 06:49:33 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 06:49:33 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 06:49:35 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 06:49:35 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 3459 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 06:49:35 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 06:49:35 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 06:49:35 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 06:49:35 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 06:49:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:49:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 06:49:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 93 ms. Found 3 JPA repository interfaces.
2024-09-04 06:49:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:49:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 06:49:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:49:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:49:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:49:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2024-09-04 06:49:36 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 06:49:36 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 06:49:36 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 06:49:36 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 06:49:36 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 06:49:36 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1049 ms
2024-09-04 06:49:36 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 06:49:36 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 06:49:36 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 06:49:36 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 06:49:36 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 06:49:36 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 06:49:36 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 06:49:36 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 06:49:37 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 06:49:37 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:49:37 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 06:49:37 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:49:37 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 06:49:37 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 06:49:37 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 06:49:37 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.passwordEncoder with arguments: []
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@682a7f5c
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.passwordEncoder in 1 ms
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@5e315507]
2024-09-04 06:49:37 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@40e4e33b
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.authenticationManager in 11 ms
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@798826b
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisConnectionFactory in 7 ms
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.cacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@798826b]
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.cacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@42f2a259
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.cacheManager in 9 ms
2024-09-04 06:49:37 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@62940935]
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@334973e2, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6b3baae0, org.springframework.security.web.context.SecurityContextHolderFilter@78f91bc2, org.springframework.security.web.header.HeaderWriterFilter@5fc1fb06, org.springframework.security.web.authentication.logout.LogoutFilter@37e98c09, com.hayan.dividend.jwt.JwtAuthenticationFilter@3627ff3a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4d4c1c48, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@68265a3e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@66da0262, org.springframework.security.web.session.SessionManagementFilter@4e022836, org.springframework.security.web.access.ExceptionTranslationFilter@243affad, org.springframework.security.web.access.intercept.AuthorizationFilter@6c86958e]]
2024-09-04 06:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.securityFilterChain in 17 ms
2024-09-04 06:49:37 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 06:49:37 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 06:49:37 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 06:49:37 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.751 seconds (process running for 2.982)
2024-09-04 06:49:49 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 06:49:49 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 06:49:49 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-04 06:49:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.create with arguments: [coke]
2024-09-04 06:49:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.save with arguments: [coke]
2024-09-04 06:49:49 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:49:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapCompany with arguments: [coke]
2024-09-04 06:49:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@4c78a406
2024-09-04 06:49:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapCompany in 2034 ms
2024-09-04 06:49:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@4c78a406]
2024-09-04 06:49:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@1e5c0f82, com.hayan.dividend.domain.Dividend@6dfdd21, com.hayan.dividend.domain.Dividend@2be94e7e, com.hayan.dividend.domain.Dividend@19205467, com.hayan.dividend.domain.Dividend@67fe78de, com.hayan.dividend.domain.Dividend@1f3097d5, com.hayan.dividend.domain.Dividend@7e4ba0f3, com.hayan.dividend.domain.Dividend@65534031, com.hayan.dividend.domain.Dividend@71ffeccd, com.hayan.dividend.domain.Dividend@6a6a5318, com.hayan.dividend.domain.Dividend@49052a9e, com.hayan.dividend.domain.Dividend@3628b947, com.hayan.dividend.domain.Dividend@383fa2cb, com.hayan.dividend.domain.Dividend@f5d447, com.hayan.dividend.domain.Dividend@60c44f1d, com.hayan.dividend.domain.Dividend@135530c3, com.hayan.dividend.domain.Dividend@5639f198, com.hayan.dividend.domain.Dividend@784050f4, com.hayan.dividend.domain.Dividend@3a3e5446, com.hayan.dividend.domain.Dividend@d7a8ea, com.hayan.dividend.domain.Dividend@197b2c59, com.hayan.dividend.domain.Dividend@63461872, com.hayan.dividend.domain.Dividend@2b12fc38, com.hayan.dividend.domain.Dividend@163f9148, com.hayan.dividend.domain.Dividend@56e67e32, com.hayan.dividend.domain.Dividend@5b07914, com.hayan.dividend.domain.Dividend@39ffa6a6, com.hayan.dividend.domain.Dividend@5320c500, com.hayan.dividend.domain.Dividend@365236b8, com.hayan.dividend.domain.Dividend@302c91bf, com.hayan.dividend.domain.Dividend@7422cb8a, com.hayan.dividend.domain.Dividend@217f18cb, com.hayan.dividend.domain.Dividend@63f1daa, com.hayan.dividend.domain.Dividend@52cad5bb, com.hayan.dividend.domain.Dividend@30563af3, com.hayan.dividend.domain.Dividend@69b6d572, com.hayan.dividend.domain.Dividend@179a57a3, com.hayan.dividend.domain.Dividend@13f93fe6, com.hayan.dividend.domain.Dividend@12791ec8, com.hayan.dividend.domain.Dividend@4d3b44b0, com.hayan.dividend.domain.Dividend@8d925fb, com.hayan.dividend.domain.Dividend@52053d09, com.hayan.dividend.domain.Dividend@850e6df, com.hayan.dividend.domain.Dividend@1fd92da1, com.hayan.dividend.domain.Dividend@5e6e255c, com.hayan.dividend.domain.Dividend@25f8b6ed, com.hayan.dividend.domain.Dividend@2a91ca93, com.hayan.dividend.domain.Dividend@7cf35e45, com.hayan.dividend.domain.Dividend@5398c042, com.hayan.dividend.domain.Dividend@33374b02, com.hayan.dividend.domain.Dividend@1756daa5, com.hayan.dividend.domain.Dividend@7131bf7c, com.hayan.dividend.domain.Dividend@64beebc8, com.hayan.dividend.domain.Dividend@6d58c306, com.hayan.dividend.domain.Dividend@4cfabffa, com.hayan.dividend.domain.Dividend@304c2346, com.hayan.dividend.domain.Dividend@23bf6e2c, com.hayan.dividend.domain.Dividend@854d9ae, com.hayan.dividend.domain.Dividend@11c8a231, com.hayan.dividend.domain.Dividend@40cfe55d, com.hayan.dividend.domain.Dividend@18d92d66, com.hayan.dividend.domain.Dividend@366e0e7a, com.hayan.dividend.domain.Dividend@62e3ebac, com.hayan.dividend.domain.Dividend@5d391fa0, com.hayan.dividend.domain.Dividend@cdaab7c, com.hayan.dividend.domain.Dividend@4a017943, com.hayan.dividend.domain.Dividend@37424524, com.hayan.dividend.domain.Dividend@22938873, com.hayan.dividend.domain.Dividend@7b4b5616, com.hayan.dividend.domain.Dividend@3ac1e35d, com.hayan.dividend.domain.Dividend@1f0ffa44, com.hayan.dividend.domain.Dividend@21e139c6, com.hayan.dividend.domain.Dividend@bb200a, com.hayan.dividend.domain.Dividend@35d5e04b, com.hayan.dividend.domain.Dividend@5568e16f, com.hayan.dividend.domain.Dividend@7d6fcd0d, com.hayan.dividend.domain.Dividend@248d09da, com.hayan.dividend.domain.Dividend@3ec062b8, com.hayan.dividend.domain.Dividend@2cb18f96, com.hayan.dividend.domain.Dividend@2fb538a8, com.hayan.dividend.domain.Dividend@633a375d, com.hayan.dividend.domain.Dividend@5e525c20, com.hayan.dividend.domain.Dividend@7ebfa543, com.hayan.dividend.domain.Dividend@78c9a244, com.hayan.dividend.domain.Dividend@4a7bf2df, com.hayan.dividend.domain.Dividend@60414ec, com.hayan.dividend.domain.Dividend@5122cd2, com.hayan.dividend.domain.Dividend@30fc75b6, com.hayan.dividend.domain.Dividend@2584947c, com.hayan.dividend.domain.Dividend@3815754, com.hayan.dividend.domain.Dividend@17619f4a, com.hayan.dividend.domain.Dividend@44e319d5, com.hayan.dividend.domain.Dividend@45454241, com.hayan.dividend.domain.Dividend@4c77964a, com.hayan.dividend.domain.Dividend@5777db41, com.hayan.dividend.domain.Dividend@b064dcb, com.hayan.dividend.domain.Dividend@64be51a0, com.hayan.dividend.domain.Dividend@140b4ebb, com.hayan.dividend.domain.Dividend@7d4f22a8, com.hayan.dividend.domain.Dividend@441e50df, com.hayan.dividend.domain.Dividend@523b3aad, com.hayan.dividend.domain.Dividend@1c8bd8c7, com.hayan.dividend.domain.Dividend@18d5f39c, com.hayan.dividend.domain.Dividend@2efbd0f1, com.hayan.dividend.domain.Dividend@259e69d1, com.hayan.dividend.domain.Dividend@6711d045, com.hayan.dividend.domain.Dividend@506f8628, com.hayan.dividend.domain.Dividend@20e3a88c, com.hayan.dividend.domain.Dividend@76658da0, com.hayan.dividend.domain.Dividend@1f1ff8d1, com.hayan.dividend.domain.Dividend@336d63dc, com.hayan.dividend.domain.Dividend@e770af5, com.hayan.dividend.domain.Dividend@54a59e16, com.hayan.dividend.domain.Dividend@349c3d23, com.hayan.dividend.domain.Dividend@6cb7dbef, com.hayan.dividend.domain.Dividend@5aa1442e, com.hayan.dividend.domain.Dividend@228c2442, com.hayan.dividend.domain.Dividend@77ac6015, com.hayan.dividend.domain.Dividend@2596b5ac, com.hayan.dividend.domain.Dividend@75c61504, com.hayan.dividend.domain.Dividend@36ab81ca, com.hayan.dividend.domain.Dividend@2293f3c2, com.hayan.dividend.domain.Dividend@32b819e9, com.hayan.dividend.domain.Dividend@7793448f, com.hayan.dividend.domain.Dividend@1ddc3e66, com.hayan.dividend.domain.Dividend@206cc3fc, com.hayan.dividend.domain.Dividend@52e9e149, com.hayan.dividend.domain.Dividend@3fb370a7, com.hayan.dividend.domain.Dividend@43e05639, com.hayan.dividend.domain.Dividend@5d50e9a, com.hayan.dividend.domain.Dividend@18ab44c0, com.hayan.dividend.domain.Dividend@3c39293a, com.hayan.dividend.domain.Dividend@7d29e11a, com.hayan.dividend.domain.Dividend@502591fb, com.hayan.dividend.domain.Dividend@126a427b, com.hayan.dividend.domain.Dividend@67efc9f5, com.hayan.dividend.domain.Dividend@55fcc523, com.hayan.dividend.domain.Dividend@29aa3c2e, com.hayan.dividend.domain.Dividend@6993dafa, com.hayan.dividend.domain.Dividend@70aa165c, com.hayan.dividend.domain.Dividend@434c00b7, com.hayan.dividend.domain.Dividend@3b7f1fbc, com.hayan.dividend.domain.Dividend@4ccc4623, com.hayan.dividend.domain.Dividend@6c74a110, com.hayan.dividend.domain.Dividend@4f9e4d91, com.hayan.dividend.domain.Dividend@c5f3921, com.hayan.dividend.domain.Dividend@228c9bd7, com.hayan.dividend.domain.Dividend@6bb9c2b7, com.hayan.dividend.domain.Dividend@56f6f894, com.hayan.dividend.domain.Dividend@2395455a, com.hayan.dividend.domain.Dividend@658130dc]
2024-09-04 06:49:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapDividends in 1402 ms
2024-09-04 06:49:52 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:49:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: repository.DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@1e5c0f82, com.hayan.dividend.domain.Dividend@6dfdd21, com.hayan.dividend.domain.Dividend@2be94e7e, com.hayan.dividend.domain.Dividend@19205467, com.hayan.dividend.domain.Dividend@67fe78de, com.hayan.dividend.domain.Dividend@1f3097d5, com.hayan.dividend.domain.Dividend@7e4ba0f3, com.hayan.dividend.domain.Dividend@65534031, com.hayan.dividend.domain.Dividend@71ffeccd, com.hayan.dividend.domain.Dividend@6a6a5318, com.hayan.dividend.domain.Dividend@49052a9e, com.hayan.dividend.domain.Dividend@3628b947, com.hayan.dividend.domain.Dividend@383fa2cb, com.hayan.dividend.domain.Dividend@f5d447, com.hayan.dividend.domain.Dividend@60c44f1d, com.hayan.dividend.domain.Dividend@135530c3, com.hayan.dividend.domain.Dividend@5639f198, com.hayan.dividend.domain.Dividend@784050f4, com.hayan.dividend.domain.Dividend@3a3e5446, com.hayan.dividend.domain.Dividend@d7a8ea, com.hayan.dividend.domain.Dividend@197b2c59, com.hayan.dividend.domain.Dividend@63461872, com.hayan.dividend.domain.Dividend@2b12fc38, com.hayan.dividend.domain.Dividend@163f9148, com.hayan.dividend.domain.Dividend@56e67e32, com.hayan.dividend.domain.Dividend@5b07914, com.hayan.dividend.domain.Dividend@39ffa6a6, com.hayan.dividend.domain.Dividend@5320c500, com.hayan.dividend.domain.Dividend@365236b8, com.hayan.dividend.domain.Dividend@302c91bf, com.hayan.dividend.domain.Dividend@7422cb8a, com.hayan.dividend.domain.Dividend@217f18cb, com.hayan.dividend.domain.Dividend@63f1daa, com.hayan.dividend.domain.Dividend@52cad5bb, com.hayan.dividend.domain.Dividend@30563af3, com.hayan.dividend.domain.Dividend@69b6d572, com.hayan.dividend.domain.Dividend@179a57a3, com.hayan.dividend.domain.Dividend@13f93fe6, com.hayan.dividend.domain.Dividend@12791ec8, com.hayan.dividend.domain.Dividend@4d3b44b0, com.hayan.dividend.domain.Dividend@8d925fb, com.hayan.dividend.domain.Dividend@52053d09, com.hayan.dividend.domain.Dividend@850e6df, com.hayan.dividend.domain.Dividend@1fd92da1, com.hayan.dividend.domain.Dividend@5e6e255c, com.hayan.dividend.domain.Dividend@25f8b6ed, com.hayan.dividend.domain.Dividend@2a91ca93, com.hayan.dividend.domain.Dividend@7cf35e45, com.hayan.dividend.domain.Dividend@5398c042, com.hayan.dividend.domain.Dividend@33374b02, com.hayan.dividend.domain.Dividend@1756daa5, com.hayan.dividend.domain.Dividend@7131bf7c, com.hayan.dividend.domain.Dividend@64beebc8, com.hayan.dividend.domain.Dividend@6d58c306, com.hayan.dividend.domain.Dividend@4cfabffa, com.hayan.dividend.domain.Dividend@304c2346, com.hayan.dividend.domain.Dividend@23bf6e2c, com.hayan.dividend.domain.Dividend@854d9ae, com.hayan.dividend.domain.Dividend@11c8a231, com.hayan.dividend.domain.Dividend@40cfe55d, com.hayan.dividend.domain.Dividend@18d92d66, com.hayan.dividend.domain.Dividend@366e0e7a, com.hayan.dividend.domain.Dividend@62e3ebac, com.hayan.dividend.domain.Dividend@5d391fa0, com.hayan.dividend.domain.Dividend@cdaab7c, com.hayan.dividend.domain.Dividend@4a017943, com.hayan.dividend.domain.Dividend@37424524, com.hayan.dividend.domain.Dividend@22938873, com.hayan.dividend.domain.Dividend@7b4b5616, com.hayan.dividend.domain.Dividend@3ac1e35d, com.hayan.dividend.domain.Dividend@1f0ffa44, com.hayan.dividend.domain.Dividend@21e139c6, com.hayan.dividend.domain.Dividend@bb200a, com.hayan.dividend.domain.Dividend@35d5e04b, com.hayan.dividend.domain.Dividend@5568e16f, com.hayan.dividend.domain.Dividend@7d6fcd0d, com.hayan.dividend.domain.Dividend@248d09da, com.hayan.dividend.domain.Dividend@3ec062b8, com.hayan.dividend.domain.Dividend@2cb18f96, com.hayan.dividend.domain.Dividend@2fb538a8, com.hayan.dividend.domain.Dividend@633a375d, com.hayan.dividend.domain.Dividend@5e525c20, com.hayan.dividend.domain.Dividend@7ebfa543, com.hayan.dividend.domain.Dividend@78c9a244, com.hayan.dividend.domain.Dividend@4a7bf2df, com.hayan.dividend.domain.Dividend@60414ec, com.hayan.dividend.domain.Dividend@5122cd2, com.hayan.dividend.domain.Dividend@30fc75b6, com.hayan.dividend.domain.Dividend@2584947c, com.hayan.dividend.domain.Dividend@3815754, com.hayan.dividend.domain.Dividend@17619f4a, com.hayan.dividend.domain.Dividend@44e319d5, com.hayan.dividend.domain.Dividend@45454241, com.hayan.dividend.domain.Dividend@4c77964a, com.hayan.dividend.domain.Dividend@5777db41, com.hayan.dividend.domain.Dividend@b064dcb, com.hayan.dividend.domain.Dividend@64be51a0, com.hayan.dividend.domain.Dividend@140b4ebb, com.hayan.dividend.domain.Dividend@7d4f22a8, com.hayan.dividend.domain.Dividend@441e50df, com.hayan.dividend.domain.Dividend@523b3aad, com.hayan.dividend.domain.Dividend@1c8bd8c7, com.hayan.dividend.domain.Dividend@18d5f39c, com.hayan.dividend.domain.Dividend@2efbd0f1, com.hayan.dividend.domain.Dividend@259e69d1, com.hayan.dividend.domain.Dividend@6711d045, com.hayan.dividend.domain.Dividend@506f8628, com.hayan.dividend.domain.Dividend@20e3a88c, com.hayan.dividend.domain.Dividend@76658da0, com.hayan.dividend.domain.Dividend@1f1ff8d1, com.hayan.dividend.domain.Dividend@336d63dc, com.hayan.dividend.domain.Dividend@e770af5, com.hayan.dividend.domain.Dividend@54a59e16, com.hayan.dividend.domain.Dividend@349c3d23, com.hayan.dividend.domain.Dividend@6cb7dbef, com.hayan.dividend.domain.Dividend@5aa1442e, com.hayan.dividend.domain.Dividend@228c2442, com.hayan.dividend.domain.Dividend@77ac6015, com.hayan.dividend.domain.Dividend@2596b5ac, com.hayan.dividend.domain.Dividend@75c61504, com.hayan.dividend.domain.Dividend@36ab81ca, com.hayan.dividend.domain.Dividend@2293f3c2, com.hayan.dividend.domain.Dividend@32b819e9, com.hayan.dividend.domain.Dividend@7793448f, com.hayan.dividend.domain.Dividend@1ddc3e66, com.hayan.dividend.domain.Dividend@206cc3fc, com.hayan.dividend.domain.Dividend@52e9e149, com.hayan.dividend.domain.Dividend@3fb370a7, com.hayan.dividend.domain.Dividend@43e05639, com.hayan.dividend.domain.Dividend@5d50e9a, com.hayan.dividend.domain.Dividend@18ab44c0, com.hayan.dividend.domain.Dividend@3c39293a, com.hayan.dividend.domain.Dividend@7d29e11a, com.hayan.dividend.domain.Dividend@502591fb, com.hayan.dividend.domain.Dividend@126a427b, com.hayan.dividend.domain.Dividend@67efc9f5, com.hayan.dividend.domain.Dividend@55fcc523, com.hayan.dividend.domain.Dividend@29aa3c2e, com.hayan.dividend.domain.Dividend@6993dafa, com.hayan.dividend.domain.Dividend@70aa165c, com.hayan.dividend.domain.Dividend@434c00b7, com.hayan.dividend.domain.Dividend@3b7f1fbc, com.hayan.dividend.domain.Dividend@4ccc4623, com.hayan.dividend.domain.Dividend@6c74a110, com.hayan.dividend.domain.Dividend@4f9e4d91, com.hayan.dividend.domain.Dividend@c5f3921, com.hayan.dividend.domain.Dividend@228c9bd7, com.hayan.dividend.domain.Dividend@6bb9c2b7, com.hayan.dividend.domain.Dividend@56f6f894, com.hayan.dividend.domain.Dividend@2395455a, com.hayan.dividend.domain.Dividend@658130dc]]
2024-09-04 06:49:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: repository.DividendBulkRepository.saveAll with result: null
2024-09-04 06:49:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: repository.DividendBulkRepository.saveAll in 14 ms
2024-09-04 06:49:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.save with result: null
2024-09-04 06:49:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.save in 3545 ms
2024-09-04 06:49:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@563b9127
2024-09-04 06:49:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.create in 3554 ms
2024-09-04 06:51:16 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:51:16 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 06:51:16 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 06:51:16 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 06:51:17 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 06:51:17 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 3594 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 06:51:17 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 06:51:17 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 06:51:17 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 06:51:17 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 06:51:17 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:51:17 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 06:51:18 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 3 JPA repository interfaces.
2024-09-04 06:51:18 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 06:51:18 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 06:51:18 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:51:18 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:51:18 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 06:51:18 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-04 06:51:18 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 06:51:18 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 06:51:18 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 06:51:18 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 06:51:18 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 06:51:18 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 735 ms
2024-09-04 06:51:18 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 06:51:18 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 06:51:18 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 06:51:18 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 06:51:18 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 06:51:18 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 06:51:18 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 06:51:18 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 06:51:19 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 06:51:19 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:51:19 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 06:51:19 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 06:51:19 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 06:51:19 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 06:51:19 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 06:51:19 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.passwordEncoder with arguments: []
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@6f323123
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.passwordEncoder in 1 ms
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@595e768e]
2024-09-04 06:51:19 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@14288e54
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.authenticationManager in 11 ms
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@3fb37fda
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisConnectionFactory in 7 ms
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.cacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@3fb37fda]
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.cacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@4a34ecaf
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.cacheManager in 9 ms
2024-09-04 06:51:19 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@6b0b230d]
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@346db86c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3e709901, org.springframework.security.web.context.SecurityContextHolderFilter@3b30770d, org.springframework.security.web.header.HeaderWriterFilter@1bc77c61, org.springframework.security.web.authentication.logout.LogoutFilter@4525ee3a, com.hayan.dividend.jwt.JwtAuthenticationFilter@461a6e66, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@502477a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1205ca0f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@10df1747, org.springframework.security.web.session.SessionManagementFilter@42b21761, org.springframework.security.web.access.ExceptionTranslationFilter@c480347, org.springframework.security.web.access.intercept.AuthorizationFilter@23153050]]
2024-09-04 06:51:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.securityFilterChain in 17 ms
2024-09-04 06:51:19 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 06:51:19 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 06:51:19 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 06:51:19 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.341 seconds (process running for 2.578)
2024-09-04 06:51:26 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 06:51:26 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 06:51:26 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-04 06:51:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.create with arguments: [coke]
2024-09-04 06:51:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.save with arguments: [coke]
2024-09-04 06:51:26 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:51:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapCompany with arguments: [coke]
2024-09-04 06:51:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@30a07e65
2024-09-04 06:51:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapCompany in 2292 ms
2024-09-04 06:51:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@30a07e65]
2024-09-04 06:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@2b8c08a2, com.hayan.dividend.domain.Dividend@686c1c96, com.hayan.dividend.domain.Dividend@7bc412e9, com.hayan.dividend.domain.Dividend@15448850, com.hayan.dividend.domain.Dividend@5ec65b42, com.hayan.dividend.domain.Dividend@56c674a0, com.hayan.dividend.domain.Dividend@dce67cb, com.hayan.dividend.domain.Dividend@3cf9782a, com.hayan.dividend.domain.Dividend@508938bc, com.hayan.dividend.domain.Dividend@350f3579, com.hayan.dividend.domain.Dividend@4b01fc2c, com.hayan.dividend.domain.Dividend@3c4ef54e, com.hayan.dividend.domain.Dividend@259b76a3, com.hayan.dividend.domain.Dividend@69732b94, com.hayan.dividend.domain.Dividend@2d575a0a, com.hayan.dividend.domain.Dividend@66782e6b, com.hayan.dividend.domain.Dividend@18a86269, com.hayan.dividend.domain.Dividend@6877d563, com.hayan.dividend.domain.Dividend@7fe7556d, com.hayan.dividend.domain.Dividend@584b278c, com.hayan.dividend.domain.Dividend@32badc6, com.hayan.dividend.domain.Dividend@5521bc0d, com.hayan.dividend.domain.Dividend@1028d7f9, com.hayan.dividend.domain.Dividend@11def537, com.hayan.dividend.domain.Dividend@4fc52f57, com.hayan.dividend.domain.Dividend@17dc3376, com.hayan.dividend.domain.Dividend@419da96b, com.hayan.dividend.domain.Dividend@270c9b22, com.hayan.dividend.domain.Dividend@41d5a703, com.hayan.dividend.domain.Dividend@37e47bcc, com.hayan.dividend.domain.Dividend@1b9e4aaa, com.hayan.dividend.domain.Dividend@58881770, com.hayan.dividend.domain.Dividend@34095edd, com.hayan.dividend.domain.Dividend@20a7698b, com.hayan.dividend.domain.Dividend@4985bc2f, com.hayan.dividend.domain.Dividend@512e01f8, com.hayan.dividend.domain.Dividend@2f2f42b6, com.hayan.dividend.domain.Dividend@34df8de9, com.hayan.dividend.domain.Dividend@505f3b99, com.hayan.dividend.domain.Dividend@715fd1ab, com.hayan.dividend.domain.Dividend@24b017c4, com.hayan.dividend.domain.Dividend@6c48767e, com.hayan.dividend.domain.Dividend@45621b9d, com.hayan.dividend.domain.Dividend@4a3f4813, com.hayan.dividend.domain.Dividend@6e1568a7, com.hayan.dividend.domain.Dividend@4141089d, com.hayan.dividend.domain.Dividend@14aa4ddb, com.hayan.dividend.domain.Dividend@24e5e08d, com.hayan.dividend.domain.Dividend@61f0e4e6, com.hayan.dividend.domain.Dividend@28bc0da5, com.hayan.dividend.domain.Dividend@6e3e59fc, com.hayan.dividend.domain.Dividend@65d43d3e, com.hayan.dividend.domain.Dividend@3e532b6, com.hayan.dividend.domain.Dividend@4bfcd64a, com.hayan.dividend.domain.Dividend@57919770, com.hayan.dividend.domain.Dividend@13687d71, com.hayan.dividend.domain.Dividend@39b28d28, com.hayan.dividend.domain.Dividend@145152d2, com.hayan.dividend.domain.Dividend@4f206d3f, com.hayan.dividend.domain.Dividend@1ff3125f, com.hayan.dividend.domain.Dividend@32050744, com.hayan.dividend.domain.Dividend@2c5c0414, com.hayan.dividend.domain.Dividend@6059cd35, com.hayan.dividend.domain.Dividend@67bf5a8b, com.hayan.dividend.domain.Dividend@7d9a4e1f, com.hayan.dividend.domain.Dividend@31aa991c, com.hayan.dividend.domain.Dividend@1fb4ca79, com.hayan.dividend.domain.Dividend@242a006, com.hayan.dividend.domain.Dividend@2d07ece7, com.hayan.dividend.domain.Dividend@4800f222, com.hayan.dividend.domain.Dividend@715e1e59, com.hayan.dividend.domain.Dividend@668bd2e4, com.hayan.dividend.domain.Dividend@74f96a06, com.hayan.dividend.domain.Dividend@3b271759, com.hayan.dividend.domain.Dividend@3a8a6ab2, com.hayan.dividend.domain.Dividend@2ae83f5, com.hayan.dividend.domain.Dividend@3db870fc, com.hayan.dividend.domain.Dividend@3e2625cd, com.hayan.dividend.domain.Dividend@57901741, com.hayan.dividend.domain.Dividend@2157976d, com.hayan.dividend.domain.Dividend@5f162c2b, com.hayan.dividend.domain.Dividend@50917249, com.hayan.dividend.domain.Dividend@7ec4d05, com.hayan.dividend.domain.Dividend@1a1d5e6a, com.hayan.dividend.domain.Dividend@74045e76, com.hayan.dividend.domain.Dividend@2fdc6985, com.hayan.dividend.domain.Dividend@4a3d9d1e, com.hayan.dividend.domain.Dividend@3a23643d, com.hayan.dividend.domain.Dividend@6c827ae1, com.hayan.dividend.domain.Dividend@205ea6b5, com.hayan.dividend.domain.Dividend@6ad1acd, com.hayan.dividend.domain.Dividend@278e94a9, com.hayan.dividend.domain.Dividend@58a4b7cb, com.hayan.dividend.domain.Dividend@d1ad964, com.hayan.dividend.domain.Dividend@630fc178, com.hayan.dividend.domain.Dividend@30772a6c, com.hayan.dividend.domain.Dividend@4d10c946, com.hayan.dividend.domain.Dividend@169af879, com.hayan.dividend.domain.Dividend@b03efd3, com.hayan.dividend.domain.Dividend@22e8095, com.hayan.dividend.domain.Dividend@493f236f, com.hayan.dividend.domain.Dividend@8274301, com.hayan.dividend.domain.Dividend@1c4e48a1, com.hayan.dividend.domain.Dividend@6a124995, com.hayan.dividend.domain.Dividend@5a863be3, com.hayan.dividend.domain.Dividend@688b54f9, com.hayan.dividend.domain.Dividend@6ee0209, com.hayan.dividend.domain.Dividend@7e48ada0, com.hayan.dividend.domain.Dividend@15fad8a9, com.hayan.dividend.domain.Dividend@27647a73, com.hayan.dividend.domain.Dividend@516ccadc, com.hayan.dividend.domain.Dividend@6a7258fc, com.hayan.dividend.domain.Dividend@290eea8b, com.hayan.dividend.domain.Dividend@2dbdaa3b, com.hayan.dividend.domain.Dividend@1a30af7a, com.hayan.dividend.domain.Dividend@62fda178, com.hayan.dividend.domain.Dividend@3c79451e, com.hayan.dividend.domain.Dividend@7cd5ccd8, com.hayan.dividend.domain.Dividend@6301e747, com.hayan.dividend.domain.Dividend@6c787c3e, com.hayan.dividend.domain.Dividend@1a5f851a, com.hayan.dividend.domain.Dividend@48be2985, com.hayan.dividend.domain.Dividend@24e9d40a, com.hayan.dividend.domain.Dividend@b5fd525, com.hayan.dividend.domain.Dividend@6d4ee601, com.hayan.dividend.domain.Dividend@5485082c, com.hayan.dividend.domain.Dividend@3e26df32, com.hayan.dividend.domain.Dividend@4ba5d32e, com.hayan.dividend.domain.Dividend@51414ab5, com.hayan.dividend.domain.Dividend@2d79fcd9, com.hayan.dividend.domain.Dividend@25ae690b, com.hayan.dividend.domain.Dividend@40f7f233, com.hayan.dividend.domain.Dividend@1b380c7a, com.hayan.dividend.domain.Dividend@7945b4f0, com.hayan.dividend.domain.Dividend@2ff56ce2, com.hayan.dividend.domain.Dividend@506c6545, com.hayan.dividend.domain.Dividend@b6cf8ee, com.hayan.dividend.domain.Dividend@5fda3f47, com.hayan.dividend.domain.Dividend@5bccca22, com.hayan.dividend.domain.Dividend@6839ca53, com.hayan.dividend.domain.Dividend@47ef432, com.hayan.dividend.domain.Dividend@a50d3fd, com.hayan.dividend.domain.Dividend@37f0954f, com.hayan.dividend.domain.Dividend@11bdaab0, com.hayan.dividend.domain.Dividend@629113d1, com.hayan.dividend.domain.Dividend@6ed2fb45, com.hayan.dividend.domain.Dividend@5d3b413d, com.hayan.dividend.domain.Dividend@212f9800, com.hayan.dividend.domain.Dividend@4b4a086f, com.hayan.dividend.domain.Dividend@32bbda90, com.hayan.dividend.domain.Dividend@358e5753]
2024-09-04 06:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapDividends in 1181 ms
2024-09-04 06:51:29 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:51:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: repository.DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@2b8c08a2, com.hayan.dividend.domain.Dividend@686c1c96, com.hayan.dividend.domain.Dividend@7bc412e9, com.hayan.dividend.domain.Dividend@15448850, com.hayan.dividend.domain.Dividend@5ec65b42, com.hayan.dividend.domain.Dividend@56c674a0, com.hayan.dividend.domain.Dividend@dce67cb, com.hayan.dividend.domain.Dividend@3cf9782a, com.hayan.dividend.domain.Dividend@508938bc, com.hayan.dividend.domain.Dividend@350f3579, com.hayan.dividend.domain.Dividend@4b01fc2c, com.hayan.dividend.domain.Dividend@3c4ef54e, com.hayan.dividend.domain.Dividend@259b76a3, com.hayan.dividend.domain.Dividend@69732b94, com.hayan.dividend.domain.Dividend@2d575a0a, com.hayan.dividend.domain.Dividend@66782e6b, com.hayan.dividend.domain.Dividend@18a86269, com.hayan.dividend.domain.Dividend@6877d563, com.hayan.dividend.domain.Dividend@7fe7556d, com.hayan.dividend.domain.Dividend@584b278c, com.hayan.dividend.domain.Dividend@32badc6, com.hayan.dividend.domain.Dividend@5521bc0d, com.hayan.dividend.domain.Dividend@1028d7f9, com.hayan.dividend.domain.Dividend@11def537, com.hayan.dividend.domain.Dividend@4fc52f57, com.hayan.dividend.domain.Dividend@17dc3376, com.hayan.dividend.domain.Dividend@419da96b, com.hayan.dividend.domain.Dividend@270c9b22, com.hayan.dividend.domain.Dividend@41d5a703, com.hayan.dividend.domain.Dividend@37e47bcc, com.hayan.dividend.domain.Dividend@1b9e4aaa, com.hayan.dividend.domain.Dividend@58881770, com.hayan.dividend.domain.Dividend@34095edd, com.hayan.dividend.domain.Dividend@20a7698b, com.hayan.dividend.domain.Dividend@4985bc2f, com.hayan.dividend.domain.Dividend@512e01f8, com.hayan.dividend.domain.Dividend@2f2f42b6, com.hayan.dividend.domain.Dividend@34df8de9, com.hayan.dividend.domain.Dividend@505f3b99, com.hayan.dividend.domain.Dividend@715fd1ab, com.hayan.dividend.domain.Dividend@24b017c4, com.hayan.dividend.domain.Dividend@6c48767e, com.hayan.dividend.domain.Dividend@45621b9d, com.hayan.dividend.domain.Dividend@4a3f4813, com.hayan.dividend.domain.Dividend@6e1568a7, com.hayan.dividend.domain.Dividend@4141089d, com.hayan.dividend.domain.Dividend@14aa4ddb, com.hayan.dividend.domain.Dividend@24e5e08d, com.hayan.dividend.domain.Dividend@61f0e4e6, com.hayan.dividend.domain.Dividend@28bc0da5, com.hayan.dividend.domain.Dividend@6e3e59fc, com.hayan.dividend.domain.Dividend@65d43d3e, com.hayan.dividend.domain.Dividend@3e532b6, com.hayan.dividend.domain.Dividend@4bfcd64a, com.hayan.dividend.domain.Dividend@57919770, com.hayan.dividend.domain.Dividend@13687d71, com.hayan.dividend.domain.Dividend@39b28d28, com.hayan.dividend.domain.Dividend@145152d2, com.hayan.dividend.domain.Dividend@4f206d3f, com.hayan.dividend.domain.Dividend@1ff3125f, com.hayan.dividend.domain.Dividend@32050744, com.hayan.dividend.domain.Dividend@2c5c0414, com.hayan.dividend.domain.Dividend@6059cd35, com.hayan.dividend.domain.Dividend@67bf5a8b, com.hayan.dividend.domain.Dividend@7d9a4e1f, com.hayan.dividend.domain.Dividend@31aa991c, com.hayan.dividend.domain.Dividend@1fb4ca79, com.hayan.dividend.domain.Dividend@242a006, com.hayan.dividend.domain.Dividend@2d07ece7, com.hayan.dividend.domain.Dividend@4800f222, com.hayan.dividend.domain.Dividend@715e1e59, com.hayan.dividend.domain.Dividend@668bd2e4, com.hayan.dividend.domain.Dividend@74f96a06, com.hayan.dividend.domain.Dividend@3b271759, com.hayan.dividend.domain.Dividend@3a8a6ab2, com.hayan.dividend.domain.Dividend@2ae83f5, com.hayan.dividend.domain.Dividend@3db870fc, com.hayan.dividend.domain.Dividend@3e2625cd, com.hayan.dividend.domain.Dividend@57901741, com.hayan.dividend.domain.Dividend@2157976d, com.hayan.dividend.domain.Dividend@5f162c2b, com.hayan.dividend.domain.Dividend@50917249, com.hayan.dividend.domain.Dividend@7ec4d05, com.hayan.dividend.domain.Dividend@1a1d5e6a, com.hayan.dividend.domain.Dividend@74045e76, com.hayan.dividend.domain.Dividend@2fdc6985, com.hayan.dividend.domain.Dividend@4a3d9d1e, com.hayan.dividend.domain.Dividend@3a23643d, com.hayan.dividend.domain.Dividend@6c827ae1, com.hayan.dividend.domain.Dividend@205ea6b5, com.hayan.dividend.domain.Dividend@6ad1acd, com.hayan.dividend.domain.Dividend@278e94a9, com.hayan.dividend.domain.Dividend@58a4b7cb, com.hayan.dividend.domain.Dividend@d1ad964, com.hayan.dividend.domain.Dividend@630fc178, com.hayan.dividend.domain.Dividend@30772a6c, com.hayan.dividend.domain.Dividend@4d10c946, com.hayan.dividend.domain.Dividend@169af879, com.hayan.dividend.domain.Dividend@b03efd3, com.hayan.dividend.domain.Dividend@22e8095, com.hayan.dividend.domain.Dividend@493f236f, com.hayan.dividend.domain.Dividend@8274301, com.hayan.dividend.domain.Dividend@1c4e48a1, com.hayan.dividend.domain.Dividend@6a124995, com.hayan.dividend.domain.Dividend@5a863be3, com.hayan.dividend.domain.Dividend@688b54f9, com.hayan.dividend.domain.Dividend@6ee0209, com.hayan.dividend.domain.Dividend@7e48ada0, com.hayan.dividend.domain.Dividend@15fad8a9, com.hayan.dividend.domain.Dividend@27647a73, com.hayan.dividend.domain.Dividend@516ccadc, com.hayan.dividend.domain.Dividend@6a7258fc, com.hayan.dividend.domain.Dividend@290eea8b, com.hayan.dividend.domain.Dividend@2dbdaa3b, com.hayan.dividend.domain.Dividend@1a30af7a, com.hayan.dividend.domain.Dividend@62fda178, com.hayan.dividend.domain.Dividend@3c79451e, com.hayan.dividend.domain.Dividend@7cd5ccd8, com.hayan.dividend.domain.Dividend@6301e747, com.hayan.dividend.domain.Dividend@6c787c3e, com.hayan.dividend.domain.Dividend@1a5f851a, com.hayan.dividend.domain.Dividend@48be2985, com.hayan.dividend.domain.Dividend@24e9d40a, com.hayan.dividend.domain.Dividend@b5fd525, com.hayan.dividend.domain.Dividend@6d4ee601, com.hayan.dividend.domain.Dividend@5485082c, com.hayan.dividend.domain.Dividend@3e26df32, com.hayan.dividend.domain.Dividend@4ba5d32e, com.hayan.dividend.domain.Dividend@51414ab5, com.hayan.dividend.domain.Dividend@2d79fcd9, com.hayan.dividend.domain.Dividend@25ae690b, com.hayan.dividend.domain.Dividend@40f7f233, com.hayan.dividend.domain.Dividend@1b380c7a, com.hayan.dividend.domain.Dividend@7945b4f0, com.hayan.dividend.domain.Dividend@2ff56ce2, com.hayan.dividend.domain.Dividend@506c6545, com.hayan.dividend.domain.Dividend@b6cf8ee, com.hayan.dividend.domain.Dividend@5fda3f47, com.hayan.dividend.domain.Dividend@5bccca22, com.hayan.dividend.domain.Dividend@6839ca53, com.hayan.dividend.domain.Dividend@47ef432, com.hayan.dividend.domain.Dividend@a50d3fd, com.hayan.dividend.domain.Dividend@37f0954f, com.hayan.dividend.domain.Dividend@11bdaab0, com.hayan.dividend.domain.Dividend@629113d1, com.hayan.dividend.domain.Dividend@6ed2fb45, com.hayan.dividend.domain.Dividend@5d3b413d, com.hayan.dividend.domain.Dividend@212f9800, com.hayan.dividend.domain.Dividend@4b4a086f, com.hayan.dividend.domain.Dividend@32bbda90, com.hayan.dividend.domain.Dividend@358e5753]]
2024-09-04 06:51:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: repository.DividendBulkRepository.saveAll with result: null
2024-09-04 06:51:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: repository.DividendBulkRepository.saveAll in 15 ms
2024-09-04 06:51:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.save with result: null
2024-09-04 06:51:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.save in 3596 ms
2024-09-04 06:51:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@7d0eedba
2024-09-04 06:51:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.create in 3605 ms
2024-09-04 06:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.getAllCompanies with arguments: [0, 10]
2024-09-04 06:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.loadAllCompanies with arguments: [0, 10]
2024-09-04 06:51:44 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-04 06:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.loadAllCompanies with result: Page 1 of 1 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-04 06:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.loadAllCompanies in 29 ms
2024-09-04 06:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@5d961cae
2024-09-04 06:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.getAllCompanies in 32 ms
2024-09-04 06:51:44 WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2024-09-04 06:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.create with arguments: [mmm]
2024-09-04 06:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.save with arguments: [mmm]
2024-09-04 06:52:01 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapCompany with arguments: [mmm]
2024-09-04 06:52:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@54fc1c15
2024-09-04 06:52:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapCompany in 1817 ms
2024-09-04 06:52:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@54fc1c15]
2024-09-04 06:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapDividends with result: []
2024-09-04 06:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapDividends in 3427 ms
2024-09-04 06:52:06 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: repository.DividendBulkRepository.saveAll with arguments: [[]]
2024-09-04 06:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: repository.DividendBulkRepository.saveAll with result: null
2024-09-04 06:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: repository.DividendBulkRepository.saveAll in 1 ms
2024-09-04 06:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.save with result: null
2024-09-04 06:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.save in 5255 ms
2024-09-04 06:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@486b1a4e
2024-09-04 06:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.create in 5258 ms
2024-09-04 06:52:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.create with arguments: [d]
2024-09-04 06:52:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.save with arguments: [d]
2024-09-04 06:52:09 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:52:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapCompany with arguments: [d]
2024-09-04 06:52:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@676f069c
2024-09-04 06:52:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapCompany in 1460 ms
2024-09-04 06:52:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@676f069c]
2024-09-04 06:52:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@70c4f868, com.hayan.dividend.domain.Dividend@6f805b0a, com.hayan.dividend.domain.Dividend@5dbb8841, com.hayan.dividend.domain.Dividend@12181b8c, com.hayan.dividend.domain.Dividend@45c8a61f, com.hayan.dividend.domain.Dividend@287deda7, com.hayan.dividend.domain.Dividend@29859169, com.hayan.dividend.domain.Dividend@7b932bae, com.hayan.dividend.domain.Dividend@7beb929d, com.hayan.dividend.domain.Dividend@3c3c5892, com.hayan.dividend.domain.Dividend@393798a5, com.hayan.dividend.domain.Dividend@5b9b1a76, com.hayan.dividend.domain.Dividend@7cc304e2, com.hayan.dividend.domain.Dividend@22652b20, com.hayan.dividend.domain.Dividend@27927d79, com.hayan.dividend.domain.Dividend@24d98b57, com.hayan.dividend.domain.Dividend@40d96f3a, com.hayan.dividend.domain.Dividend@4b6e702a, com.hayan.dividend.domain.Dividend@7f23a58b, com.hayan.dividend.domain.Dividend@17c80a0b, com.hayan.dividend.domain.Dividend@1ce30777, com.hayan.dividend.domain.Dividend@24b4cbe1, com.hayan.dividend.domain.Dividend@46592d01, com.hayan.dividend.domain.Dividend@1116ef93, com.hayan.dividend.domain.Dividend@15ca9a79, com.hayan.dividend.domain.Dividend@1723a0e2, com.hayan.dividend.domain.Dividend@189da622, com.hayan.dividend.domain.Dividend@3ed1b8d5, com.hayan.dividend.domain.Dividend@7f09f424, com.hayan.dividend.domain.Dividend@75a77f97, com.hayan.dividend.domain.Dividend@fe6bb7, com.hayan.dividend.domain.Dividend@335a7c6d, com.hayan.dividend.domain.Dividend@34206f6, com.hayan.dividend.domain.Dividend@4d578ace, com.hayan.dividend.domain.Dividend@3e87e300, com.hayan.dividend.domain.Dividend@5ede59a9, com.hayan.dividend.domain.Dividend@4d389132, com.hayan.dividend.domain.Dividend@3c4873a1, com.hayan.dividend.domain.Dividend@3d5618cb, com.hayan.dividend.domain.Dividend@11e91dd9, com.hayan.dividend.domain.Dividend@1851bfd7, com.hayan.dividend.domain.Dividend@677b0207, com.hayan.dividend.domain.Dividend@6a66de63, com.hayan.dividend.domain.Dividend@33b81123, com.hayan.dividend.domain.Dividend@2602bf84, com.hayan.dividend.domain.Dividend@19d6ea79, com.hayan.dividend.domain.Dividend@459faae6, com.hayan.dividend.domain.Dividend@365d9a7f, com.hayan.dividend.domain.Dividend@590edaf, com.hayan.dividend.domain.Dividend@2b3b5a46, com.hayan.dividend.domain.Dividend@134b1d5d, com.hayan.dividend.domain.Dividend@499ff329, com.hayan.dividend.domain.Dividend@4b609220, com.hayan.dividend.domain.Dividend@3af81860, com.hayan.dividend.domain.Dividend@71124b97, com.hayan.dividend.domain.Dividend@47a2f827, com.hayan.dividend.domain.Dividend@81c8361, com.hayan.dividend.domain.Dividend@72ddb11a, com.hayan.dividend.domain.Dividend@11700225, com.hayan.dividend.domain.Dividend@41c3b3ec, com.hayan.dividend.domain.Dividend@2da8373e, com.hayan.dividend.domain.Dividend@326206f0, com.hayan.dividend.domain.Dividend@23125bb3, com.hayan.dividend.domain.Dividend@7f12c0ee, com.hayan.dividend.domain.Dividend@136f09f5, com.hayan.dividend.domain.Dividend@3198c8ee, com.hayan.dividend.domain.Dividend@66c2ad, com.hayan.dividend.domain.Dividend@691a67ff, com.hayan.dividend.domain.Dividend@2d1eb88, com.hayan.dividend.domain.Dividend@75f99c84, com.hayan.dividend.domain.Dividend@43bc4b3c, com.hayan.dividend.domain.Dividend@7923f92b, com.hayan.dividend.domain.Dividend@74a3c02c, com.hayan.dividend.domain.Dividend@4d077f80, com.hayan.dividend.domain.Dividend@6c4338b7, com.hayan.dividend.domain.Dividend@a4f6eb5, com.hayan.dividend.domain.Dividend@60076d70, com.hayan.dividend.domain.Dividend@168af58f, com.hayan.dividend.domain.Dividend@63f9e169, com.hayan.dividend.domain.Dividend@12b21165, com.hayan.dividend.domain.Dividend@490592ae, com.hayan.dividend.domain.Dividend@8e2208c, com.hayan.dividend.domain.Dividend@24bc7a50, com.hayan.dividend.domain.Dividend@26076e9b, com.hayan.dividend.domain.Dividend@43721817, com.hayan.dividend.domain.Dividend@5a8da6b5, com.hayan.dividend.domain.Dividend@1da4294e, com.hayan.dividend.domain.Dividend@caffd7, com.hayan.dividend.domain.Dividend@532bfd79, com.hayan.dividend.domain.Dividend@642451a7, com.hayan.dividend.domain.Dividend@5876ea34, com.hayan.dividend.domain.Dividend@f9582aa, com.hayan.dividend.domain.Dividend@3d97614, com.hayan.dividend.domain.Dividend@4536a6a1, com.hayan.dividend.domain.Dividend@2a7ed379, com.hayan.dividend.domain.Dividend@95d944e, com.hayan.dividend.domain.Dividend@417c2aa7, com.hayan.dividend.domain.Dividend@310f8f87, com.hayan.dividend.domain.Dividend@6db677c4, com.hayan.dividend.domain.Dividend@8ac61d8, com.hayan.dividend.domain.Dividend@28254b78, com.hayan.dividend.domain.Dividend@651b8a4c, com.hayan.dividend.domain.Dividend@3bcdd97c, com.hayan.dividend.domain.Dividend@5084cd7c, com.hayan.dividend.domain.Dividend@52f8329f, com.hayan.dividend.domain.Dividend@6b089b66, com.hayan.dividend.domain.Dividend@3edbb942, com.hayan.dividend.domain.Dividend@48427cc8, com.hayan.dividend.domain.Dividend@5bbdd395, com.hayan.dividend.domain.Dividend@74c1b02f, com.hayan.dividend.domain.Dividend@1733065c, com.hayan.dividend.domain.Dividend@4ccc8c4e, com.hayan.dividend.domain.Dividend@79d8cf39, com.hayan.dividend.domain.Dividend@e158e5, com.hayan.dividend.domain.Dividend@fefaf43, com.hayan.dividend.domain.Dividend@27e9ec0c, com.hayan.dividend.domain.Dividend@18774ecf, com.hayan.dividend.domain.Dividend@12db1b54, com.hayan.dividend.domain.Dividend@60bc2bfb, com.hayan.dividend.domain.Dividend@85d226c, com.hayan.dividend.domain.Dividend@2afe149e, com.hayan.dividend.domain.Dividend@60b5bb2e, com.hayan.dividend.domain.Dividend@61d7b730, com.hayan.dividend.domain.Dividend@78b724, com.hayan.dividend.domain.Dividend@5a781951, com.hayan.dividend.domain.Dividend@1759a5fb, com.hayan.dividend.domain.Dividend@4bebee17, com.hayan.dividend.domain.Dividend@e6fb1d9, com.hayan.dividend.domain.Dividend@14c793d4, com.hayan.dividend.domain.Dividend@4eeb9aca, com.hayan.dividend.domain.Dividend@5a645e56, com.hayan.dividend.domain.Dividend@29f6cdba, com.hayan.dividend.domain.Dividend@187a263, com.hayan.dividend.domain.Dividend@13a85553, com.hayan.dividend.domain.Dividend@6b462f9e, com.hayan.dividend.domain.Dividend@7442a451, com.hayan.dividend.domain.Dividend@48ea9400, com.hayan.dividend.domain.Dividend@19b94283, com.hayan.dividend.domain.Dividend@43d9b4f5, com.hayan.dividend.domain.Dividend@2258e0f3, com.hayan.dividend.domain.Dividend@3e8e3a2c, com.hayan.dividend.domain.Dividend@6d70da24, com.hayan.dividend.domain.Dividend@6300a563, com.hayan.dividend.domain.Dividend@6ba9e88, com.hayan.dividend.domain.Dividend@492a9b29, com.hayan.dividend.domain.Dividend@22e0d9d2, com.hayan.dividend.domain.Dividend@442d5b50, com.hayan.dividend.domain.Dividend@16b1c383, com.hayan.dividend.domain.Dividend@bdff1af, com.hayan.dividend.domain.Dividend@2f55974f, com.hayan.dividend.domain.Dividend@18cae2e, com.hayan.dividend.domain.Dividend@1939c847, com.hayan.dividend.domain.Dividend@6d9f0046, com.hayan.dividend.domain.Dividend@6e730d55, com.hayan.dividend.domain.Dividend@a6a236b, com.hayan.dividend.domain.Dividend@5d46b991, com.hayan.dividend.domain.Dividend@484e0f4f, com.hayan.dividend.domain.Dividend@3ea1bab6, com.hayan.dividend.domain.Dividend@650ba772]
2024-09-04 06:52:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapDividends in 1870 ms
2024-09-04 06:52:12 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:52:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: repository.DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@70c4f868, com.hayan.dividend.domain.Dividend@6f805b0a, com.hayan.dividend.domain.Dividend@5dbb8841, com.hayan.dividend.domain.Dividend@12181b8c, com.hayan.dividend.domain.Dividend@45c8a61f, com.hayan.dividend.domain.Dividend@287deda7, com.hayan.dividend.domain.Dividend@29859169, com.hayan.dividend.domain.Dividend@7b932bae, com.hayan.dividend.domain.Dividend@7beb929d, com.hayan.dividend.domain.Dividend@3c3c5892, com.hayan.dividend.domain.Dividend@393798a5, com.hayan.dividend.domain.Dividend@5b9b1a76, com.hayan.dividend.domain.Dividend@7cc304e2, com.hayan.dividend.domain.Dividend@22652b20, com.hayan.dividend.domain.Dividend@27927d79, com.hayan.dividend.domain.Dividend@24d98b57, com.hayan.dividend.domain.Dividend@40d96f3a, com.hayan.dividend.domain.Dividend@4b6e702a, com.hayan.dividend.domain.Dividend@7f23a58b, com.hayan.dividend.domain.Dividend@17c80a0b, com.hayan.dividend.domain.Dividend@1ce30777, com.hayan.dividend.domain.Dividend@24b4cbe1, com.hayan.dividend.domain.Dividend@46592d01, com.hayan.dividend.domain.Dividend@1116ef93, com.hayan.dividend.domain.Dividend@15ca9a79, com.hayan.dividend.domain.Dividend@1723a0e2, com.hayan.dividend.domain.Dividend@189da622, com.hayan.dividend.domain.Dividend@3ed1b8d5, com.hayan.dividend.domain.Dividend@7f09f424, com.hayan.dividend.domain.Dividend@75a77f97, com.hayan.dividend.domain.Dividend@fe6bb7, com.hayan.dividend.domain.Dividend@335a7c6d, com.hayan.dividend.domain.Dividend@34206f6, com.hayan.dividend.domain.Dividend@4d578ace, com.hayan.dividend.domain.Dividend@3e87e300, com.hayan.dividend.domain.Dividend@5ede59a9, com.hayan.dividend.domain.Dividend@4d389132, com.hayan.dividend.domain.Dividend@3c4873a1, com.hayan.dividend.domain.Dividend@3d5618cb, com.hayan.dividend.domain.Dividend@11e91dd9, com.hayan.dividend.domain.Dividend@1851bfd7, com.hayan.dividend.domain.Dividend@677b0207, com.hayan.dividend.domain.Dividend@6a66de63, com.hayan.dividend.domain.Dividend@33b81123, com.hayan.dividend.domain.Dividend@2602bf84, com.hayan.dividend.domain.Dividend@19d6ea79, com.hayan.dividend.domain.Dividend@459faae6, com.hayan.dividend.domain.Dividend@365d9a7f, com.hayan.dividend.domain.Dividend@590edaf, com.hayan.dividend.domain.Dividend@2b3b5a46, com.hayan.dividend.domain.Dividend@134b1d5d, com.hayan.dividend.domain.Dividend@499ff329, com.hayan.dividend.domain.Dividend@4b609220, com.hayan.dividend.domain.Dividend@3af81860, com.hayan.dividend.domain.Dividend@71124b97, com.hayan.dividend.domain.Dividend@47a2f827, com.hayan.dividend.domain.Dividend@81c8361, com.hayan.dividend.domain.Dividend@72ddb11a, com.hayan.dividend.domain.Dividend@11700225, com.hayan.dividend.domain.Dividend@41c3b3ec, com.hayan.dividend.domain.Dividend@2da8373e, com.hayan.dividend.domain.Dividend@326206f0, com.hayan.dividend.domain.Dividend@23125bb3, com.hayan.dividend.domain.Dividend@7f12c0ee, com.hayan.dividend.domain.Dividend@136f09f5, com.hayan.dividend.domain.Dividend@3198c8ee, com.hayan.dividend.domain.Dividend@66c2ad, com.hayan.dividend.domain.Dividend@691a67ff, com.hayan.dividend.domain.Dividend@2d1eb88, com.hayan.dividend.domain.Dividend@75f99c84, com.hayan.dividend.domain.Dividend@43bc4b3c, com.hayan.dividend.domain.Dividend@7923f92b, com.hayan.dividend.domain.Dividend@74a3c02c, com.hayan.dividend.domain.Dividend@4d077f80, com.hayan.dividend.domain.Dividend@6c4338b7, com.hayan.dividend.domain.Dividend@a4f6eb5, com.hayan.dividend.domain.Dividend@60076d70, com.hayan.dividend.domain.Dividend@168af58f, com.hayan.dividend.domain.Dividend@63f9e169, com.hayan.dividend.domain.Dividend@12b21165, com.hayan.dividend.domain.Dividend@490592ae, com.hayan.dividend.domain.Dividend@8e2208c, com.hayan.dividend.domain.Dividend@24bc7a50, com.hayan.dividend.domain.Dividend@26076e9b, com.hayan.dividend.domain.Dividend@43721817, com.hayan.dividend.domain.Dividend@5a8da6b5, com.hayan.dividend.domain.Dividend@1da4294e, com.hayan.dividend.domain.Dividend@caffd7, com.hayan.dividend.domain.Dividend@532bfd79, com.hayan.dividend.domain.Dividend@642451a7, com.hayan.dividend.domain.Dividend@5876ea34, com.hayan.dividend.domain.Dividend@f9582aa, com.hayan.dividend.domain.Dividend@3d97614, com.hayan.dividend.domain.Dividend@4536a6a1, com.hayan.dividend.domain.Dividend@2a7ed379, com.hayan.dividend.domain.Dividend@95d944e, com.hayan.dividend.domain.Dividend@417c2aa7, com.hayan.dividend.domain.Dividend@310f8f87, com.hayan.dividend.domain.Dividend@6db677c4, com.hayan.dividend.domain.Dividend@8ac61d8, com.hayan.dividend.domain.Dividend@28254b78, com.hayan.dividend.domain.Dividend@651b8a4c, com.hayan.dividend.domain.Dividend@3bcdd97c, com.hayan.dividend.domain.Dividend@5084cd7c, com.hayan.dividend.domain.Dividend@52f8329f, com.hayan.dividend.domain.Dividend@6b089b66, com.hayan.dividend.domain.Dividend@3edbb942, com.hayan.dividend.domain.Dividend@48427cc8, com.hayan.dividend.domain.Dividend@5bbdd395, com.hayan.dividend.domain.Dividend@74c1b02f, com.hayan.dividend.domain.Dividend@1733065c, com.hayan.dividend.domain.Dividend@4ccc8c4e, com.hayan.dividend.domain.Dividend@79d8cf39, com.hayan.dividend.domain.Dividend@e158e5, com.hayan.dividend.domain.Dividend@fefaf43, com.hayan.dividend.domain.Dividend@27e9ec0c, com.hayan.dividend.domain.Dividend@18774ecf, com.hayan.dividend.domain.Dividend@12db1b54, com.hayan.dividend.domain.Dividend@60bc2bfb, com.hayan.dividend.domain.Dividend@85d226c, com.hayan.dividend.domain.Dividend@2afe149e, com.hayan.dividend.domain.Dividend@60b5bb2e, com.hayan.dividend.domain.Dividend@61d7b730, com.hayan.dividend.domain.Dividend@78b724, com.hayan.dividend.domain.Dividend@5a781951, com.hayan.dividend.domain.Dividend@1759a5fb, com.hayan.dividend.domain.Dividend@4bebee17, com.hayan.dividend.domain.Dividend@e6fb1d9, com.hayan.dividend.domain.Dividend@14c793d4, com.hayan.dividend.domain.Dividend@4eeb9aca, com.hayan.dividend.domain.Dividend@5a645e56, com.hayan.dividend.domain.Dividend@29f6cdba, com.hayan.dividend.domain.Dividend@187a263, com.hayan.dividend.domain.Dividend@13a85553, com.hayan.dividend.domain.Dividend@6b462f9e, com.hayan.dividend.domain.Dividend@7442a451, com.hayan.dividend.domain.Dividend@48ea9400, com.hayan.dividend.domain.Dividend@19b94283, com.hayan.dividend.domain.Dividend@43d9b4f5, com.hayan.dividend.domain.Dividend@2258e0f3, com.hayan.dividend.domain.Dividend@3e8e3a2c, com.hayan.dividend.domain.Dividend@6d70da24, com.hayan.dividend.domain.Dividend@6300a563, com.hayan.dividend.domain.Dividend@6ba9e88, com.hayan.dividend.domain.Dividend@492a9b29, com.hayan.dividend.domain.Dividend@22e0d9d2, com.hayan.dividend.domain.Dividend@442d5b50, com.hayan.dividend.domain.Dividend@16b1c383, com.hayan.dividend.domain.Dividend@bdff1af, com.hayan.dividend.domain.Dividend@2f55974f, com.hayan.dividend.domain.Dividend@18cae2e, com.hayan.dividend.domain.Dividend@1939c847, com.hayan.dividend.domain.Dividend@6d9f0046, com.hayan.dividend.domain.Dividend@6e730d55, com.hayan.dividend.domain.Dividend@a6a236b, com.hayan.dividend.domain.Dividend@5d46b991, com.hayan.dividend.domain.Dividend@484e0f4f, com.hayan.dividend.domain.Dividend@3ea1bab6, com.hayan.dividend.domain.Dividend@650ba772]]
2024-09-04 06:52:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: repository.DividendBulkRepository.saveAll with result: null
2024-09-04 06:52:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: repository.DividendBulkRepository.saveAll in 14 ms
2024-09-04 06:52:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.save with result: null
2024-09-04 06:52:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.save in 3352 ms
2024-09-04 06:52:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@4d322a82
2024-09-04 06:52:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.create in 3356 ms
2024-09-04 06:52:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.create with arguments: [a]
2024-09-04 06:52:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.save with arguments: [a]
2024-09-04 06:52:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 06:52:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-04 06:52:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@120cb8bd
2024-09-04 06:52:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapCompany in 1380 ms
2024-09-04 06:52:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@120cb8bd]
2024-09-04 06:52:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapDividends with result: []
2024-09-04 06:52:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapDividends in 2237 ms
2024-09-04 06:52:19 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 06:52:19 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: repository.DividendBulkRepository.saveAll with arguments: [[]]
2024-09-04 06:52:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: repository.DividendBulkRepository.saveAll with result: null
2024-09-04 06:52:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: repository.DividendBulkRepository.saveAll in 0 ms
2024-09-04 06:52:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.save with result: null
2024-09-04 06:52:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.save in 3624 ms
2024-09-04 06:52:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@1f760da0
2024-09-04 06:52:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.create in 3625 ms
2024-09-04 06:52:27 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.getAllCompanies with arguments: [1, 3]
2024-09-04 06:52:27 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.loadAllCompanies with arguments: [1, 3]
2024-09-04 06:52:27 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-04 06:52:27 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.loadAllCompanies with result: Page 2 of 2 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-04 06:52:27 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.loadAllCompanies in 3 ms
2024-09-04 06:52:27 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@77445564
2024-09-04 06:52:27 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.getAllCompanies in 4 ms
2024-09-04 06:52:45 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.getAllCompanies with arguments: [0, 3]
2024-09-04 06:52:45 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.loadAllCompanies with arguments: [0, 3]
2024-09-04 06:52:45 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-04 06:52:45 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        companies c1_0
2024-09-04 06:52:45 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.loadAllCompanies with result: Page 1 of 2 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-04 06:52:45 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.loadAllCompanies in 24 ms
2024-09-04 06:52:45 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@64c381d7
2024-09-04 06:52:45 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.getAllCompanies in 26 ms
2024-09-04 06:52:53 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.register with arguments: [UserRequest[username=hayan, password=test]]
2024-09-04 06:52:53 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.register with arguments: [UserRequest[username=hayan, password=test]]
2024-09-04 06:52:53 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-04 06:52:53 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.UserService.register with result: null
2024-09-04 06:52:53 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.UserService.register in 93 ms
2024-09-04 06:52:53 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.UserController.register with result: com.hayan.dividend.global.ApplicationResponse@7335ef7b
2024-09-04 06:52:53 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.UserController.register in 96 ms
2024-09-04 06:52:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.signin with arguments: [UserRequest[username=hayan, password=test]]
2024-09-04 06:52:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test]]
2024-09-04 06:52:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.authenticate with arguments: [UserRequest[username=hayan, password=test]]
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 06:52:56 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]]
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_USER]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_USER]]
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.UserService.authenticate in 185 ms
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.generateToken with arguments: [hayan]
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsImlhdCI6MTcyNTQwMDM3NiwiZXhwIjoxNzI1NDg2Nzc2fQ.IzoyT_41YE1ShFGYn6MtRZ-NqZvNdRCkFGdSEVLqrOFBXXgwRTR5K_rbS_mAhOCKudnG3N0dxTuMLmTnJVCf6Q
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.generateToken in 13 ms
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsImlhdCI6MTcyNTQwMDM3NiwiZXhwIjoxNzI1NDg2Nzc2fQ.IzoyT_41YE1ShFGYn6MtRZ-NqZvNdRCkFGdSEVLqrOFBXXgwRTR5K_rbS_mAhOCKudnG3N0dxTuMLmTnJVCf6Q
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.AuthenticationService.authenticateAndGenerateToken in 199 ms
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsImlhdCI6MTcyNTQwMDM3NiwiZXhwIjoxNzI1NDg2Nzc2fQ.IzoyT_41YE1ShFGYn6MtRZ-NqZvNdRCkFGdSEVLqrOFBXXgwRTR5K_rbS_mAhOCKudnG3N0dxTuMLmTnJVCf6Q"]>
2024-09-04 06:52:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.UserController.signin in 200 ms
2024-09-04 06:53:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.getCompany with arguments: [Dominion Energy, Inc.]
2024-09-04 06:53:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.loadCompanyDetails with arguments: [Dominion Energy, Inc.]
2024-09-04 06:53:11 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    where
        c1_0.name=?
2024-09-04 06:53:11 DEBUG org.hibernate.SQL - 
    select
        d1_0.company_id,
        d1_0.id,
        d1_0.date,
        d1_0.dividend 
    from
        dividends d1_0 
    where
        d1_0.company_id=?
2024-09-04 06:53:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.loadCompanyDetails with result: CompanyDetailsResponse[company=CompanyResponse[id=3, ticker=d, name=Dominion Energy, Inc.], dividends=[DividendResponse[date=2024-08-30, dividend=0.67 Dividend], DividendResponse[date=2024-05-31, dividend=0.67 Dividend], DividendResponse[date=2024-02-29, dividend=0.67 Dividend], DividendResponse[date=2023-11-30, dividend=0.67 Dividend], DividendResponse[date=2023-08-31, dividend=0.67 Dividend], DividendResponse[date=2023-06-01, dividend=0.67 Dividend], DividendResponse[date=2023-03-02, dividend=0.67 Dividend], DividendResponse[date=2022-12-01, dividend=0.67 Dividend], DividendResponse[date=2022-09-01, dividend=0.67 Dividend], DividendResponse[date=2022-06-02, dividend=0.67 Dividend], DividendResponse[date=2022-03-03, dividend=0.67 Dividend], DividendResponse[date=2021-12-02, dividend=0.63 Dividend], DividendResponse[date=2021-09-02, dividend=0.63 Dividend], DividendResponse[date=2021-06-03, dividend=0.63 Dividend], DividendResponse[date=2021-03-04, dividend=0.63 Dividend], DividendResponse[date=2020-12-03, dividend=0.63 Dividend], DividendResponse[date=2020-09-03, dividend=0.94 Dividend], DividendResponse[date=2020-06-04, dividend=0.94 Dividend], DividendResponse[date=2020-02-27, dividend=0.94 Dividend], DividendResponse[date=2019-12-05, dividend=0.92 Dividend], DividendResponse[date=2019-09-05, dividend=0.92 Dividend], DividendResponse[date=2019-06-06, dividend=0.92 Dividend], DividendResponse[date=2019-02-28, dividend=0.92 Dividend], DividendResponse[date=2018-12-06, dividend=0.84 Dividend], DividendResponse[date=2018-09-06, dividend=0.84 Dividend], DividendResponse[date=2018-05-31, dividend=0.84 Dividend], DividendResponse[date=2018-03-01, dividend=0.84 Dividend], DividendResponse[date=2017-11-30, dividend=0.77 Dividend], DividendResponse[date=2017-08-30, dividend=0.76 Dividend], DividendResponse[date=2017-05-31, dividend=0.76 Dividend], DividendResponse[date=2017-03-01, dividend=0.76 Dividend], DividendResponse[date=2016-11-30, dividend=0.70 Dividend], DividendResponse[date=2016-08-31, dividend=0.70 Dividend], DividendResponse[date=2016-06-01, dividend=0.70 Dividend], DividendResponse[date=2016-03-02, dividend=0.70 Dividend], DividendResponse[date=2015-11-23, dividend=0.65 Dividend], DividendResponse[date=2015-08-26, dividend=0.65 Dividend], DividendResponse[date=2015-05-27, dividend=0.65 Dividend], DividendResponse[date=2015-02-25, dividend=0.65 Dividend], DividendResponse[date=2014-11-25, dividend=0.60 Dividend], DividendResponse[date=2014-08-27, dividend=0.60 Dividend], DividendResponse[date=2014-05-28, dividend=0.60 Dividend], DividendResponse[date=2014-02-26, dividend=0.60 Dividend], DividendResponse[date=2013-12-04, dividend=0.56 Dividend], DividendResponse[date=2013-09-04, dividend=0.56 Dividend], DividendResponse[date=2013-06-05, dividend=0.56 Dividend], DividendResponse[date=2013-02-26, dividend=0.56 Dividend], DividendResponse[date=2012-11-28, dividend=0.53 Dividend], DividendResponse[date=2012-08-29, dividend=0.53 Dividend], DividendResponse[date=2012-05-30, dividend=0.53 Dividend], DividendResponse[date=2012-02-29, dividend=0.53 Dividend], DividendResponse[date=2011-11-30, dividend=0.49 Dividend], DividendResponse[date=2011-08-24, dividend=0.49 Dividend], DividendResponse[date=2011-05-25, dividend=0.49 Dividend], DividendResponse[date=2011-03-02, dividend=0.49 Dividend], DividendResponse[date=2010-11-24, dividend=0.46 Dividend], DividendResponse[date=2010-08-25, dividend=0.46 Dividend], DividendResponse[date=2010-05-26, dividend=0.46 Dividend], DividendResponse[date=2010-02-24, dividend=0.46 Dividend], DividendResponse[date=2009-11-25, dividend=0.44 Dividend], DividendResponse[date=2009-08-26, dividend=0.44 Dividend], DividendResponse[date=2009-05-27, dividend=0.44 Dividend], DividendResponse[date=2009-02-25, dividend=0.44 Dividend], DividendResponse[date=2008-11-26, dividend=0.40 Dividend], DividendResponse[date=2008-08-27, dividend=0.40 Dividend], DividendResponse[date=2008-05-28, dividend=0.40 Dividend], DividendResponse[date=2008-02-27, dividend=0.40 Dividend], DividendResponse[date=2007-11-28, dividend=0.20 Dividend], DividendResponse[date=2007-08-29, dividend=0.36 Dividend], DividendResponse[date=2007-05-30, dividend=0.36 Dividend], DividendResponse[date=2007-02-21, dividend=0.36 Dividend], DividendResponse[date=2006-11-29, dividend=0.35 Dividend], DividendResponse[date=2006-08-30, dividend=0.35 Dividend], DividendResponse[date=2006-05-31, dividend=0.35 Dividend], DividendResponse[date=2006-02-22, dividend=0.35 Dividend], DividendResponse[date=2005-11-23, dividend=0.34 Dividend], DividendResponse[date=2005-08-24, dividend=0.34 Dividend], DividendResponse[date=2005-05-25, dividend=0.34 Dividend], DividendResponse[date=2005-02-23, dividend=0.34 Dividend], DividendResponse[date=2004-11-24, dividend=0.33 Dividend], DividendResponse[date=2004-08-25, dividend=0.32 Dividend], DividendResponse[date=2004-05-26, dividend=0.32 Dividend], DividendResponse[date=2004-02-25, dividend=0.32 Dividend], DividendResponse[date=2003-11-26, dividend=0.32 Dividend], DividendResponse[date=2003-08-27, dividend=0.32 Dividend], DividendResponse[date=2003-05-28, dividend=0.32 Dividend], DividendResponse[date=2003-02-26, dividend=0.32 Dividend], DividendResponse[date=2002-11-27, dividend=0.32 Dividend], DividendResponse[date=2002-08-28, dividend=0.32 Dividend], DividendResponse[date=2002-05-29, dividend=0.32 Dividend], DividendResponse[date=2002-02-27, dividend=0.32 Dividend], DividendResponse[date=2001-11-21, dividend=0.32 Dividend], DividendResponse[date=2001-08-29, dividend=0.32 Dividend], DividendResponse[date=2001-05-30, dividend=0.32 Dividend], DividendResponse[date=2001-02-28, dividend=0.32 Dividend], DividendResponse[date=2000-11-21, dividend=0.32 Dividend], DividendResponse[date=2000-08-23, dividend=0.32 Dividend], DividendResponse[date=2000-05-24, dividend=0.32 Dividend], DividendResponse[date=2000-02-28, dividend=0.32 Dividend], DividendResponse[date=1999-11-23, dividend=0.32 Dividend], DividendResponse[date=1999-08-25, dividend=0.32 Dividend], DividendResponse[date=1999-05-26, dividend=0.32 Dividend], DividendResponse[date=1999-02-26, dividend=0.32 Dividend], DividendResponse[date=1998-11-24, dividend=0.32 Dividend], DividendResponse[date=1998-08-26, dividend=0.32 Dividend], DividendResponse[date=1998-05-27, dividend=0.32 Dividend], DividendResponse[date=1998-02-27, dividend=0.32 Dividend], DividendResponse[date=1997-11-25, dividend=0.32 Dividend], DividendResponse[date=1997-08-27, dividend=0.32 Dividend], DividendResponse[date=1997-05-28, dividend=0.32 Dividend], DividendResponse[date=1997-02-27, dividend=0.32 Dividend], DividendResponse[date=1996-11-26, dividend=0.32 Dividend], DividendResponse[date=1996-08-28, dividend=0.32 Dividend], DividendResponse[date=1996-05-29, dividend=0.32 Dividend], DividendResponse[date=1996-02-28, dividend=0.32 Dividend], DividendResponse[date=1995-11-29, dividend=0.32 Dividend], DividendResponse[date=1995-08-29, dividend=0.32 Dividend], DividendResponse[date=1995-05-25, dividend=0.32 Dividend], DividendResponse[date=1995-02-24, dividend=0.32 Dividend], DividendResponse[date=1994-11-25, dividend=0.32 Dividend], DividendResponse[date=1994-08-24, dividend=0.32 Dividend], DividendResponse[date=1994-05-24, dividend=0.32 Dividend], DividendResponse[date=1994-02-24, dividend=0.32 Dividend], DividendResponse[date=1993-11-24, dividend=0.32 Dividend], DividendResponse[date=1993-08-24, dividend=0.31 Dividend], DividendResponse[date=1993-05-24, dividend=0.31 Dividend], DividendResponse[date=1993-02-24, dividend=0.31 Dividend], DividendResponse[date=1992-11-23, dividend=0.31 Dividend], DividendResponse[date=1992-08-24, dividend=0.30 Dividend], DividendResponse[date=1992-05-22, dividend=0.30 Dividend], DividendResponse[date=1992-02-25, dividend=0.30 Dividend], DividendResponse[date=1991-11-25, dividend=0.30 Dividend], DividendResponse[date=1991-08-26, dividend=0.29 Dividend], DividendResponse[date=1991-05-24, dividend=0.29 Dividend], DividendResponse[date=1991-02-22, dividend=0.29 Dividend], DividendResponse[date=1990-11-26, dividend=0.29 Dividend], DividendResponse[date=1990-08-27, dividend=0.28 Dividend], DividendResponse[date=1990-05-24, dividend=0.28 Dividend], DividendResponse[date=1990-02-23, dividend=0.28 Dividend], DividendResponse[date=1989-11-24, dividend=0.28 Dividend], DividendResponse[date=1989-08-25, dividend=0.27 Dividend], DividendResponse[date=1989-05-24, dividend=0.27 Dividend], DividendResponse[date=1989-02-23, dividend=0.27 Dividend], DividendResponse[date=1988-11-28, dividend=0.27 Dividend], DividendResponse[date=1988-08-29, dividend=0.26 Dividend], DividendResponse[date=1988-05-24, dividend=0.26 Dividend], DividendResponse[date=1988-02-24, dividend=0.26 Dividend], DividendResponse[date=1987-11-23, dividend=0.26 Dividend], DividendResponse[date=1987-08-25, dividend=0.25 Dividend], DividendResponse[date=1987-05-26, dividend=0.25 Dividend], DividendResponse[date=1987-02-23, dividend=0.25 Dividend], DividendResponse[date=1986-11-24, dividend=0.25 Dividend], DividendResponse[date=1986-08-25, dividend=0.24 Dividend], DividendResponse[date=1986-05-22, dividend=0.24 Dividend], DividendResponse[date=1986-02-25, dividend=0.24 Dividend], DividendResponse[date=1985-11-22, dividend=0.24 Dividend], DividendResponse[date=1985-08-26, dividend=0.23 Dividend], DividendResponse[date=1985-05-24, dividend=0.23 Dividend], DividendResponse[date=1985-02-25, dividend=0.23 Dividend]]]
2024-09-04 06:53:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.loadCompanyDetails in 19 ms
2024-09-04 06:53:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.getCompany with result: com.hayan.dividend.global.ApplicationResponse@441123b8
2024-09-04 06:53:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.getCompany in 235 ms
2024-09-04 07:14:18 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:14:18 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 07:14:18 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 07:14:18 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 07:22:31 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 07:22:31 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 6034 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 07:22:31 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 07:22:31 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 07:22:31 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 07:22:31 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 07:22:32 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:22:32 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 07:22:32 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 91 ms. Found 3 JPA repository interfaces.
2024-09-04 07:22:32 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:22:32 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 07:22:32 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:22:32 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:22:32 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:22:32 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2024-09-04 07:22:32 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 07:22:32 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 07:22:32 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 07:22:32 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 07:22:32 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 07:22:32 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1007 ms
2024-09-04 07:22:32 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 07:22:33 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 07:22:33 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 07:22:33 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 07:22:33 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 07:22:33 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 07:22:33 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 07:22:33 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 07:22:33 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 07:22:33 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:22:33 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 07:22:33 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        roles varchar(255)
    )
2024-09-04 07:22:33 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:22:33 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 07:22:33 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 07:22:33 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 07:22:33 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 07:22:33 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:22:33 WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'financeController' defined in file [/Users/chowhite/coding/zerobase/dividend/build/classes/java/main/com/hayan/dividend/controller/FinanceController.class]: Unsatisfied dependency expressed through constructor parameter 0: Error creating bean with name 'financeService' defined in file [/Users/chowhite/coding/zerobase/dividend/build/classes/java/main/com/hayan/dividend/service/FinanceService.class]: Unsatisfied dependency expressed through constructor parameter 1: No qualifying bean of type 'org.springframework.data.redis.cache.RedisCacheManager' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
2024-09-04 07:22:33 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:22:33 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 07:22:33 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 07:22:33 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 07:22:33 INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2024-09-04 07:22:33 INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-09-04 07:22:33 ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 1 of constructor in com.hayan.dividend.service.FinanceServiceImpl required a bean of type 'org.springframework.data.redis.cache.RedisCacheManager' that could not be found.


Action:

Consider defining a bean of type 'org.springframework.data.redis.cache.RedisCacheManager' in your configuration.

2024-09-04 07:25:10 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 07:25:10 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 6230 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 07:25:10 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 07:25:10 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 07:25:10 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 07:25:10 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 07:25:11 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:25:11 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 07:25:11 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 108 ms. Found 3 JPA repository interfaces.
2024-09-04 07:25:11 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:25:11 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 07:25:11 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:25:11 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:25:11 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:25:11 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-04 07:25:11 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 07:25:11 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 07:25:11 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 07:25:11 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 07:25:11 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 07:25:11 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 919 ms
2024-09-04 07:25:11 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 07:25:11 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 07:25:11 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 07:25:11 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 07:25:12 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 07:25:12 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 07:25:12 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 07:25:12 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 07:25:12 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 07:25:12 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:25:12 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 07:25:12 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        roles varchar(255)
    )
2024-09-04 07:25:12 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:25:12 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 07:25:12 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 07:25:12 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 07:25:12 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 07:25:12 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@41abf247
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisConnectionFactory in 7 ms
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@41abf247]
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@397d400c
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisCacheManager in 9 ms
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.passwordEncoder with arguments: []
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3839c3f8
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.passwordEncoder in 1 ms
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@7da5d5c0]
2024-09-04 07:25:12 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@54e81108
2024-09-04 07:25:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.authenticationManager in 10 ms
2024-09-04 07:25:12 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 07:25:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@1ef4eb59]
2024-09-04 07:25:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@45fa22cd, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@52c1c1d7, org.springframework.security.web.context.SecurityContextHolderFilter@5e5cbf40, org.springframework.security.web.header.HeaderWriterFilter@311f5a91, org.springframework.security.web.authentication.logout.LogoutFilter@31013d1d, com.hayan.dividend.jwt.JwtAuthenticationFilter@1a092754, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@a9bc2cc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@41d6e501, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1d5ce16, org.springframework.security.web.session.SessionManagementFilter@38668403, org.springframework.security.web.access.ExceptionTranslationFilter@1cd40d1f, org.springframework.security.web.access.intercept.AuthorizationFilter@993c7f2]]
2024-09-04 07:25:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.securityFilterChain in 16 ms
2024-09-04 07:25:13 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 07:25:13 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 07:25:13 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 07:25:13 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.645 seconds (process running for 2.88)
2024-09-04 07:25:40 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 07:25:40 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 07:25:40 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2024-09-04 07:25:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 07:25:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 07:25:41 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-04 07:25:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.UserService.register with result: null
2024-09-04 07:25:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.UserService.register in 133 ms
2024-09-04 07:25:41 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, roles) 
    values
        (?, ?)
2024-09-04 07:25:41 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, roles) 
    values
        (?, ?)
2024-09-04 07:25:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.UserController.register with result: com.hayan.dividend.global.ApplicationResponse@4b639744
2024-09-04 07:25:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.UserController.register in 149 ms
2024-09-04 07:26:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 07:26:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 07:26:20 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-04 07:26:20 WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 23505, SQLState: 23505
2024-09-04 07:26:20 ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Unique index or primary key violation: "PUBLIC.UKR43AF9AP4EDM43MMTQ01ODDJ6_INDEX_4 ON PUBLIC.USERS(USERNAME NULLS FIRST) VALUES ( /* 1 */ 'hayan' )"; SQL statement:
/* insert for com.hayan.dividend.domain.User */insert into us [23505-224]
2024-09-04 07:26:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: exception.GlobalExceptionHandler.handleUnexpectedException with arguments: [org.springframework.dao.DataIntegrityViolationException: could not execute statement [Unique index or primary key violation: "PUBLIC.UKR43AF9AP4EDM43MMTQ01ODDJ6_INDEX_4 ON PUBLIC.USERS(USERNAME NULLS FIRST) VALUES ( /* 1 */ 'hayan' )"; SQL statement:
/* insert for com.hayan.dividend.domain.User */insert into us [23505-224]] [/* insert for com.hayan.dividend.domain.User */insert into users (password,username,id) values (?,?,default)]; SQL [/* insert for com.hayan.dividend.domain.User */insert into users (password,username,id) values (?,?,default)]; constraint [PUBLIC.UKR43AF9AP4EDM43MMTQ01ODDJ6_INDEX_4]]
2024-09-04 07:26:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: exception.GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-04 07:26:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: exception.GlobalExceptionHandler.handleUnexpectedException in 3 ms
2024-09-04 07:26:20 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.dao.DataIntegrityViolationException: could not execute statement [Unique index or primary key violation: "PUBLIC.UKR43AF9AP4EDM43MMTQ01ODDJ6_INDEX_4 ON PUBLIC.USERS(USERNAME NULLS FIRST) VALUES ( /* 1 */ 'hayan' )"; SQL statement:<EOL>/* insert for com.hayan.dividend.domain.User */insert into us [23505-224]] [/* insert for com.hayan.dividend.domain.User */insert into users (password,username,id) values (?,?,default)]; SQL [/* insert for com.hayan.dividend.domain.User */insert into users (password,username,id) values (?,?,default)]; constraint [PUBLIC.UKR43AF9AP4EDM43MMTQ01ODDJ6_INDEX_4]]
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 07:26:25 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 07:26:25 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.CustomUserDetailsService.loadUserByUsername in 66 ms
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.UserService.authenticate in 252 ms
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyMzg1LCJleHAiOjE3MjU0ODg3ODV9.oxi8plViDxYYsYmVEseHz8VaEeSOS1TFw9SXpOKpyC4AGXTbmn0hnhZ91w9qTrn5hb_hpM_l7IiwZn95h6cxUA
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.generateToken in 24 ms
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyMzg1LCJleHAiOjE3MjU0ODg3ODV9.oxi8plViDxYYsYmVEseHz8VaEeSOS1TFw9SXpOKpyC4AGXTbmn0hnhZ91w9qTrn5hb_hpM_l7IiwZn95h6cxUA
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.AuthenticationService.authenticateAndGenerateToken in 278 ms
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyMzg1LCJleHAiOjE3MjU0ODg3ODV9.oxi8plViDxYYsYmVEseHz8VaEeSOS1TFw9SXpOKpyC4AGXTbmn0hnhZ91w9qTrn5hb_hpM_l7IiwZn95h6cxUA"]>
2024-09-04 07:26:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.UserController.signin in 280 ms
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyMzg1LCJleHAiOjE3MjU0ODg3ODV9.oxi8plViDxYYsYmVEseHz8VaEeSOS1TFw9SXpOKpyC4AGXTbmn0hnhZ91w9qTrn5hb_hpM_l7IiwZn95h6cxUA]
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.validateToken with result: true
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.validateToken in 27 ms
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyMzg1LCJleHAiOjE3MjU0ODg3ODV9.oxi8plViDxYYsYmVEseHz8VaEeSOS1TFw9SXpOKpyC4AGXTbmn0hnhZ91w9qTrn5hb_hpM_l7IiwZn95h6cxUA]
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 07:26:43 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 07:26:43 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.roles 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.FinanceController.create with arguments: [a]
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.FinanceService.save with arguments: [a]
2024-09-04 07:26:43 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 07:26:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-04 07:26:45 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@36740804
2024-09-04 07:26:45 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapCompany in 1705 ms
2024-09-04 07:26:45 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: scraper.YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@36740804]
2024-09-04 07:26:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: scraper.YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@6b3f65de, com.hayan.dividend.domain.Dividend@3272a26c, com.hayan.dividend.domain.Dividend@6d95f4e1, com.hayan.dividend.domain.Dividend@17524fe2, com.hayan.dividend.domain.Dividend@7d3c943, com.hayan.dividend.domain.Dividend@20157a17, com.hayan.dividend.domain.Dividend@62e5b008, com.hayan.dividend.domain.Dividend@674ddee9, com.hayan.dividend.domain.Dividend@7ecd9a92, com.hayan.dividend.domain.Dividend@7583929e, com.hayan.dividend.domain.Dividend@3a2919d6, com.hayan.dividend.domain.Dividend@339a32ec, com.hayan.dividend.domain.Dividend@21912707, com.hayan.dividend.domain.Dividend@486f56c9, com.hayan.dividend.domain.Dividend@3afa01bb, com.hayan.dividend.domain.Dividend@5815495a, com.hayan.dividend.domain.Dividend@7014f440, com.hayan.dividend.domain.Dividend@427f2d95, com.hayan.dividend.domain.Dividend@28e20bb8, com.hayan.dividend.domain.Dividend@5a4fc867, com.hayan.dividend.domain.Dividend@dae919a, com.hayan.dividend.domain.Dividend@3606163f, com.hayan.dividend.domain.Dividend@e81648c, com.hayan.dividend.domain.Dividend@2a2999cb, com.hayan.dividend.domain.Dividend@53f2ef55, com.hayan.dividend.domain.Dividend@5543bcfa, com.hayan.dividend.domain.Dividend@50e317da, com.hayan.dividend.domain.Dividend@36e23bcc, com.hayan.dividend.domain.Dividend@72aee202, com.hayan.dividend.domain.Dividend@3a4224c1, com.hayan.dividend.domain.Dividend@7257b994, com.hayan.dividend.domain.Dividend@55ccd049, com.hayan.dividend.domain.Dividend@50778600, com.hayan.dividend.domain.Dividend@7b38d4e3, com.hayan.dividend.domain.Dividend@346c4909, com.hayan.dividend.domain.Dividend@7919955, com.hayan.dividend.domain.Dividend@6bba4821, com.hayan.dividend.domain.Dividend@56180679, com.hayan.dividend.domain.Dividend@6a39b2, com.hayan.dividend.domain.Dividend@b3a43db, com.hayan.dividend.domain.Dividend@32f8e9dd, com.hayan.dividend.domain.Dividend@24c51a35, com.hayan.dividend.domain.Dividend@75b300b6, com.hayan.dividend.domain.Dividend@2cceb140, com.hayan.dividend.domain.Dividend@590d0305, com.hayan.dividend.domain.Dividend@5595aea3, com.hayan.dividend.domain.Dividend@38ceb217, com.hayan.dividend.domain.Dividend@61d340ff, com.hayan.dividend.domain.Dividend@50f772eb, com.hayan.dividend.domain.Dividend@286f2ee0, com.hayan.dividend.domain.Dividend@657c7ff0]
2024-09-04 07:26:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: scraper.YahooFinanceScraper.scrapDividends in 1415 ms
2024-09-04 07:26:46 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 07:26:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: repository.DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@6b3f65de, com.hayan.dividend.domain.Dividend@3272a26c, com.hayan.dividend.domain.Dividend@6d95f4e1, com.hayan.dividend.domain.Dividend@17524fe2, com.hayan.dividend.domain.Dividend@7d3c943, com.hayan.dividend.domain.Dividend@20157a17, com.hayan.dividend.domain.Dividend@62e5b008, com.hayan.dividend.domain.Dividend@674ddee9, com.hayan.dividend.domain.Dividend@7ecd9a92, com.hayan.dividend.domain.Dividend@7583929e, com.hayan.dividend.domain.Dividend@3a2919d6, com.hayan.dividend.domain.Dividend@339a32ec, com.hayan.dividend.domain.Dividend@21912707, com.hayan.dividend.domain.Dividend@486f56c9, com.hayan.dividend.domain.Dividend@3afa01bb, com.hayan.dividend.domain.Dividend@5815495a, com.hayan.dividend.domain.Dividend@7014f440, com.hayan.dividend.domain.Dividend@427f2d95, com.hayan.dividend.domain.Dividend@28e20bb8, com.hayan.dividend.domain.Dividend@5a4fc867, com.hayan.dividend.domain.Dividend@dae919a, com.hayan.dividend.domain.Dividend@3606163f, com.hayan.dividend.domain.Dividend@e81648c, com.hayan.dividend.domain.Dividend@2a2999cb, com.hayan.dividend.domain.Dividend@53f2ef55, com.hayan.dividend.domain.Dividend@5543bcfa, com.hayan.dividend.domain.Dividend@50e317da, com.hayan.dividend.domain.Dividend@36e23bcc, com.hayan.dividend.domain.Dividend@72aee202, com.hayan.dividend.domain.Dividend@3a4224c1, com.hayan.dividend.domain.Dividend@7257b994, com.hayan.dividend.domain.Dividend@55ccd049, com.hayan.dividend.domain.Dividend@50778600, com.hayan.dividend.domain.Dividend@7b38d4e3, com.hayan.dividend.domain.Dividend@346c4909, com.hayan.dividend.domain.Dividend@7919955, com.hayan.dividend.domain.Dividend@6bba4821, com.hayan.dividend.domain.Dividend@56180679, com.hayan.dividend.domain.Dividend@6a39b2, com.hayan.dividend.domain.Dividend@b3a43db, com.hayan.dividend.domain.Dividend@32f8e9dd, com.hayan.dividend.domain.Dividend@24c51a35, com.hayan.dividend.domain.Dividend@75b300b6, com.hayan.dividend.domain.Dividend@2cceb140, com.hayan.dividend.domain.Dividend@590d0305, com.hayan.dividend.domain.Dividend@5595aea3, com.hayan.dividend.domain.Dividend@38ceb217, com.hayan.dividend.domain.Dividend@61d340ff, com.hayan.dividend.domain.Dividend@50f772eb, com.hayan.dividend.domain.Dividend@286f2ee0, com.hayan.dividend.domain.Dividend@657c7ff0]]
2024-09-04 07:26:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: repository.DividendBulkRepository.saveAll with result: null
2024-09-04 07:26:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: repository.DividendBulkRepository.saveAll in 13 ms
2024-09-04 07:26:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.FinanceService.save with result: null
2024-09-04 07:26:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.FinanceService.save in 3149 ms
2024-09-04 07:26:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@7a256e32
2024-09-04 07:26:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.FinanceController.create in 3151 ms
2024-09-04 07:30:40 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:30:40 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 07:30:40 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 07:30:40 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 07:30:41 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 07:30:41 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 6635 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 07:30:41 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 07:30:42 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 07:30:42 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 07:30:42 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 07:30:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:30:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 07:30:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 78 ms. Found 3 JPA repository interfaces.
2024-09-04 07:30:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:30:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 07:30:42 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:30:42 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:30:42 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:30:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2024-09-04 07:30:42 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 07:30:42 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 07:30:42 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 07:30:42 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 07:30:42 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 07:30:42 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 923 ms
2024-09-04 07:30:42 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 07:30:43 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 07:30:43 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 07:30:43 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 07:30:43 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 07:30:43 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 07:30:43 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 07:30:43 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 07:30:43 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 07:30:43 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:30:43 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 07:30:43 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('ROLE_READ','ROLE_WRITE')
    )
2024-09-04 07:30:43 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:30:43 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 07:30:43 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 07:30:43 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 07:30:43 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 07:30:43 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:30:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 07:30:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@1ff23f44
2024-09-04 07:30:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisConnectionFactory in 6 ms
2024-09-04 07:30:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@1ff23f44]
2024-09-04 07:30:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@4da62dc3
2024-09-04 07:30:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisCacheManager in 9 ms
2024-09-04 07:30:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.passwordEncoder with arguments: []
2024-09-04 07:30:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@12d443df
2024-09-04 07:30:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.passwordEncoder in 0 ms
2024-09-04 07:30:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@50385157]
2024-09-04 07:30:44 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 07:30:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@27874f
2024-09-04 07:30:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.authenticationManager in 11 ms
2024-09-04 07:30:44 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 07:30:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@14d4506f]
2024-09-04 07:30:44 WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration': Unsatisfied dependency expressed through method 'setFilterChains' parameter 0: Error creating bean with name 'securityFilterChain' defined in class path resource [com/hayan/dividend/config/SecurityConfig.class]: Failed to instantiate [org.springframework.security.web.SecurityFilterChain]: Factory method 'securityFilterChain' threw exception with message: ROLE_WRITE should not start with ROLE_ since ROLE_ is automatically prepended when using hasAnyRole. Consider using hasAnyAuthority instead.
2024-09-04 07:30:44 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:30:44 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 07:30:44 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 07:30:44 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 07:30:44 INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2024-09-04 07:30:44 INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2024-09-04 07:30:44 ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration': Unsatisfied dependency expressed through method 'setFilterChains' parameter 0: Error creating bean with name 'securityFilterChain' defined in class path resource [com/hayan/dividend/config/SecurityConfig.class]: Failed to instantiate [org.springframework.security.web.SecurityFilterChain]: Factory method 'securityFilterChain' threw exception with message: ROLE_WRITE should not start with ROLE_ since ROLE_ is automatically prepended when using hasAnyRole. Consider using hasAnyAuthority instead.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.resolveMethodArguments(AutowiredAnnotationBeanPostProcessor.java:896)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.inject(AutowiredAnnotationBeanPostProcessor.java:849)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1439)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:971)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.hayan.dividend.DividendApplication.main(DividendApplication.java:14)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'securityFilterChain' defined in class path resource [com/hayan/dividend/config/SecurityConfig.class]: Failed to instantiate [org.springframework.security.web.SecurityFilterChain]: Factory method 'securityFilterChain' threw exception with message: ROLE_WRITE should not start with ROLE_ since ROLE_ is automatically prepended when using hasAnyRole. Consider using hasAnyAuthority instead.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:648)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:636)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1355)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1185)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.addCandidateEntry(DefaultListableBeanFactory.java:1689)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1653)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeanCollection(DefaultListableBeanFactory.java:1543)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveMultipleBeans(DefaultListableBeanFactory.java:1511)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1392)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredMethodElement.resolveMethodArguments(AutowiredAnnotationBeanPostProcessor.java:888)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.security.web.SecurityFilterChain]: Factory method 'securityFilterChain' threw exception with message: ROLE_WRITE should not start with ROLE_ since ROLE_ is automatically prepended when using hasAnyRole. Consider using hasAnyAuthority instead.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:178)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:644)
	... 42 common frames omitted
Caused by: java.lang.IllegalArgumentException: ROLE_WRITE should not start with ROLE_ since ROLE_ is automatically prepended when using hasAnyRole. Consider using hasAnyAuthority instead.
	at org.springframework.util.Assert.isTrue(Assert.java:129)
	at org.springframework.security.authorization.AuthorityAuthorizationManager.toNamedRolesArray(AuthorityAuthorizationManager.java:128)
	at org.springframework.security.authorization.AuthorityAuthorizationManager.hasAnyRole(AuthorityAuthorizationManager.java:108)
	at org.springframework.security.config.annotation.web.configurers.AuthorizeHttpRequestsConfigurer$AuthorizedUrl.hasRole(AuthorizeHttpRequestsConfigurer.java:307)
	at com.hayan.dividend.config.SecurityConfig.lambda$securityFilterChain$1(SecurityConfig.java:39)
	at org.springframework.security.config.annotation.web.builders.HttpSecurity.authorizeHttpRequests(HttpSecurity.java:1467)
	at com.hayan.dividend.config.SecurityConfig.securityFilterChain(SecurityConfig.java:37)
	at com.hayan.dividend.config.SecurityConfig$$SpringCGLIB$$0.CGLIB$securityFilterChain$0(<generated>)
	at com.hayan.dividend.config.SecurityConfig$$SpringCGLIB$$FastClass$$1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:348)
	at com.hayan.dividend.config.SecurityConfig$$SpringCGLIB$$0.securityFilterChain(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:39)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.config.SecurityConfig$$SpringCGLIB$$1.securityFilterChain(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:146)
	... 43 common frames omitted
2024-09-04 07:33:49 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 07:33:49 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 6910 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 07:33:49 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 07:33:49 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 07:33:49 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 07:33:49 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 07:33:50 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:33:50 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 07:33:50 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 84 ms. Found 3 JPA repository interfaces.
2024-09-04 07:33:50 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:33:50 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 07:33:50 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:33:50 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:33:50 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:33:50 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-04 07:33:50 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 07:33:50 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 07:33:50 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 07:33:50 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 07:33:50 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 07:33:50 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1001 ms
2024-09-04 07:33:50 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 07:33:51 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 07:33:51 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 07:33:51 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 07:33:51 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 07:33:51 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 07:33:51 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 07:33:51 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 07:33:51 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 07:33:51 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:33:51 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 07:33:51 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-04 07:33:51 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:33:51 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 07:33:51 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 07:33:51 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 07:33:51 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 07:33:51 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:33:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 07:33:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@25d9aef5
2024-09-04 07:33:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisConnectionFactory in 7 ms
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@25d9aef5]
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@670b3654
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisCacheManager in 9 ms
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.passwordEncoder with arguments: []
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@328edf5c
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.passwordEncoder in 1 ms
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@7a7cacda]
2024-09-04 07:33:52 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@7d3317f2
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.authenticationManager in 10 ms
2024-09-04 07:33:52 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@e5c18cc]
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@328678a9, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@cb0dad1, org.springframework.security.web.context.SecurityContextHolderFilter@3abf35f, org.springframework.security.web.header.HeaderWriterFilter@41d6e501, org.springframework.security.web.authentication.logout.LogoutFilter@30850144, com.hayan.dividend.jwt.JwtAuthenticationFilter@1c5010ed, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2fa86dbd, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1f3d37e8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@585e4742, org.springframework.security.web.session.SessionManagementFilter@3b15bc45, org.springframework.security.web.access.ExceptionTranslationFilter@5c322014, org.springframework.security.web.access.intercept.AuthorizationFilter@7ee80c04]]
2024-09-04 07:33:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.securityFilterChain in 15 ms
2024-09-04 07:33:52 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 07:33:52 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 07:33:52 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 07:33:52 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.727 seconds (process running for 2.966)
2024-09-04 07:33:58 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 07:33:58 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 07:33:58 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-04 07:33:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-04 07:33:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-04 07:33:58 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-04 07:33:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.UserService.register with result: null
2024-09-04 07:33:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.UserService.register in 112 ms
2024-09-04 07:33:58 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 07:33:58 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 07:33:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.UserController.register with result: com.hayan.dividend.global.ApplicationResponse@324a8b8c
2024-09-04 07:33:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.UserController.register in 123 ms
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 07:34:03 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 07:34:03 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.CustomUserDetailsService.loadUserByUsername in 55 ms
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.UserService.authenticate in 244 ms
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyODQzLCJleHAiOjE3MjU0ODkyNDN9.V8BnSk1GvmcMkN20doY6-Moo8spU2YfmZCdkJS0vu-45hW3XmIv_ToQQYmaKjAuYZmxAKKoswx5Jn30FK64JCw
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.generateToken in 21 ms
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyODQzLCJleHAiOjE3MjU0ODkyNDN9.V8BnSk1GvmcMkN20doY6-Moo8spU2YfmZCdkJS0vu-45hW3XmIv_ToQQYmaKjAuYZmxAKKoswx5Jn30FK64JCw
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.AuthenticationService.authenticateAndGenerateToken in 266 ms
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyODQzLCJleHAiOjE3MjU0ODkyNDN9.V8BnSk1GvmcMkN20doY6-Moo8spU2YfmZCdkJS0vu-45hW3XmIv_ToQQYmaKjAuYZmxAKKoswx5Jn30FK64JCw"]>
2024-09-04 07:34:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.UserController.signin in 269 ms
2024-09-04 07:45:12 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:45:12 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 07:45:12 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 07:45:12 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 07:45:14 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 07:45:14 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 7678 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 07:45:14 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 07:45:14 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 07:45:14 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 07:45:14 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 07:45:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:45:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 07:45:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 85 ms. Found 3 JPA repository interfaces.
2024-09-04 07:45:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:45:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 07:45:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:45:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:45:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:45:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-04 07:45:15 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 07:45:15 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 07:45:15 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 07:45:15 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 07:45:15 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 07:45:15 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 821 ms
2024-09-04 07:45:15 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 07:45:15 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 07:45:15 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 07:45:15 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 07:45:15 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 07:45:15 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 07:45:15 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 07:45:15 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 07:45:15 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 07:45:15 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:45:15 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 07:45:15 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-04 07:45:15 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:45:15 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 07:45:15 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 07:45:15 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 07:45:15 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 07:45:15 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 07:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@158630a9
2024-09-04 07:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisConnectionFactory in 7 ms
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@158630a9]
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@73fd79b2
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisCacheManager in 9 ms
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.passwordEncoder with arguments: []
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@36d103d2
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.passwordEncoder in 0 ms
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@1b640429]
2024-09-04 07:45:16 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@58629524
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.authenticationManager in 10 ms
2024-09-04 07:45:16 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@2e383c12]
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@1b868b80, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@13c02a7f, org.springframework.security.web.context.SecurityContextHolderFilter@54cb1c3, org.springframework.security.web.header.HeaderWriterFilter@40382170, org.springframework.security.web.authentication.logout.LogoutFilter@70792611, com.hayan.dividend.jwt.JwtAuthenticationFilter@79d1c685, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@494c41db, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@f85f3d0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7a15c866, org.springframework.security.web.session.SessionManagementFilter@6192cdfb, org.springframework.security.web.access.ExceptionTranslationFilter@a1b270, org.springframework.security.web.access.intercept.AuthorizationFilter@436974e3]]
2024-09-04 07:45:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.securityFilterChain in 15 ms
2024-09-04 07:45:16 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 07:45:16 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 07:45:16 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 07:45:16 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.393 seconds (process running for 2.704)
2024-09-04 07:45:22 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:45:22 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 07:45:22 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 07:45:22 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 07:58:01 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 07:58:01 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 8773 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 07:58:01 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 07:58:01 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 07:58:01 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 07:58:01 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 07:58:02 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:58:02 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 07:58:02 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 98 ms. Found 3 JPA repository interfaces.
2024-09-04 07:58:02 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 07:58:02 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 07:58:02 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:58:02 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:58:02 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 07:58:02 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-04 07:58:02 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 07:58:02 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 07:58:02 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 07:58:02 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 07:58:02 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 07:58:02 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 952 ms
2024-09-04 07:58:02 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 07:58:03 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 07:58:03 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 07:58:03 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 07:58:03 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 07:58:03 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 07:58:03 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 07:58:03 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 07:58:03 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 07:58:03 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:58:03 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 07:58:03 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-04 07:58:03 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 07:58:03 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 07:58:03 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 07:58:03 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 07:58:03 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 07:58:03 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 07:58:03 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-04 07:58:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 07:58:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@427312f8
2024-09-04 07:58:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisConnectionFactory in 8 ms
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@427312f8]
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@4b1ef863
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.CacheConfig.redisCacheManager in 9 ms
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.passwordEncoder with arguments: []
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@798ad1c9
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.passwordEncoder in 0 ms
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@38bc809e]
2024-09-04 07:58:04 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@526e52c3
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.authenticationManager in 10 ms
2024-09-04 07:58:04 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: config.SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@46d61d45]
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: config.SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@11caa417, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7b4e5011, org.springframework.security.web.context.SecurityContextHolderFilter@1e1db8a1, org.springframework.security.web.header.HeaderWriterFilter@248343db, org.springframework.security.web.authentication.logout.LogoutFilter@7155a8eb, com.hayan.dividend.jwt.JwtAuthenticationFilter@37414c13, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@129ec986, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3fd8498e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@40c38b01, org.springframework.security.web.session.SessionManagementFilter@1d29b9a3, org.springframework.security.web.access.ExceptionTranslationFilter@2262d273, org.springframework.security.web.access.intercept.AuthorizationFilter@176fb037]]
2024-09-04 07:58:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: config.SecurityConfig.securityFilterChain in 16 ms
2024-09-04 07:58:04 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 07:58:04 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 07:58:04 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 07:58:04 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.675 seconds (process running for 3.04)
2024-09-04 07:58:41 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 07:58:41 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 07:58:41 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2024-09-04 07:58:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:58:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:58:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:58:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 07:58:46 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 07:58:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: exception.GlobalExceptionHandler.handleUnexpectedException with arguments: [org.springframework.security.authentication.InternalAuthenticationServiceException: 존재하지 않는 회원입니다.]
2024-09-04 07:58:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: exception.GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-04 07:58:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: exception.GlobalExceptionHandler.handleUnexpectedException in 1 ms
2024-09-04 07:58:46 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authentication.InternalAuthenticationServiceException: 존재하지 않는 회원입니다.]
2024-09-04 07:58:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 07:58:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 07:58:49 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-04 07:58:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.UserService.register with result: null
2024-09-04 07:58:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.UserService.register in 118 ms
2024-09-04 07:58:49 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 07:58:49 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 07:58:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.UserController.register with result: com.hayan.dividend.global.ApplicationResponse@55011b06
2024-09-04 07:58:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.UserController.register in 125 ms
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: controller.UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 07:58:52 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 07:58:52 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.UserService.authenticate in 114 ms
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0MzMyLCJleHAiOjE3MjU0OTA3MzJ9.JyRSRAKopqwdxjSE4u8g_pKHx71CW7Sq3TxYETyQe6cZlfjHekjMR-FaEgptQ7Z6hha5pY8q0AfwMDI3gSOsbA
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.generateToken in 22 ms
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0MzMyLCJleHAiOjE3MjU0OTA3MzJ9.JyRSRAKopqwdxjSE4u8g_pKHx71CW7Sq3TxYETyQe6cZlfjHekjMR-FaEgptQ7Z6hha5pY8q0AfwMDI3gSOsbA
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.AuthenticationService.authenticateAndGenerateToken in 137 ms
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: controller.UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0MzMyLCJleHAiOjE3MjU0OTA3MzJ9.JyRSRAKopqwdxjSE4u8g_pKHx71CW7Sq3TxYETyQe6cZlfjHekjMR-FaEgptQ7Z6hha5pY8q0AfwMDI3gSOsbA"]>
2024-09-04 07:58:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: controller.UserController.signin in 138 ms
2024-09-04 07:59:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0MzMyLCJleHAiOjE3MjU0OTA3MzJ9.JyRSRAKopqwdxjSE4u8g_pKHx71CW7Sq3TxYETyQe6cZlfjHekjMR-FaEgptQ7Z6hha5pY8q0AfwMDI3gSOsbA]
2024-09-04 07:59:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.validateToken with result: true
2024-09-04 07:59:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.validateToken in 20 ms
2024-09-04 07:59:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0MzMyLCJleHAiOjE3MjU0OTA3MzJ9.JyRSRAKopqwdxjSE4u8g_pKHx71CW7Sq3TxYETyQe6cZlfjHekjMR-FaEgptQ7Z6hha5pY8q0AfwMDI3gSOsbA]
2024-09-04 07:59:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 07:59:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-04 07:59:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 07:59:12 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 07:59:12 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 07:59:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 07:59:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-04 08:00:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0MzMyLCJleHAiOjE3MjU0OTA3MzJ9.JyRSRAKopqwdxjSE4u8g_pKHx71CW7Sq3TxYETyQe6cZlfjHekjMR-FaEgptQ7Z6hha5pY8q0AfwMDI3gSOsbA]
2024-09-04 08:00:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.validateToken with result: true
2024-09-04 08:00:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.validateToken in 11 ms
2024-09-04 08:00:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: jwt.JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0MzMyLCJleHAiOjE3MjU0OTA3MzJ9.JyRSRAKopqwdxjSE4u8g_pKHx71CW7Sq3TxYETyQe6cZlfjHekjMR-FaEgptQ7Z6hha5pY8q0AfwMDI3gSOsbA]
2024-09-04 08:00:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: jwt.JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:00:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: jwt.JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:00:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: service.CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:00:02 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:00:02 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:00:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: service.CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:00:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: service.CustomUserDetailsService.loadUserByUsername in 10 ms
2024-09-04 08:01:51 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 08:01:51 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 08:01:51 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 08:01:51 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 08:01:53 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 08:01:53 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 9075 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 08:01:53 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 08:01:53 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 08:01:53 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 08:01:53 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 08:01:53 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 08:01:53 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 08:01:53 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65 ms. Found 3 JPA repository interfaces.
2024-09-04 08:01:53 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 08:01:53 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 08:01:53 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:01:53 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:01:53 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:01:53 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-04 08:01:53 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 08:01:53 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 08:01:53 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 08:01:53 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 08:01:53 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 08:01:53 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 792 ms
2024-09-04 08:01:53 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 08:01:53 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 08:01:53 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 08:01:53 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 08:01:54 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 08:01:54 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 08:01:54 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 08:01:54 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 08:01:54 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 08:01:54 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 08:01:54 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 08:01:54 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-04 08:01:54 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 08:01:54 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 08:01:54 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 08:01:54 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 08:01:54 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 08:01:54 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 08:01:54 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2a725f9b
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 7 ms
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2a725f9b]
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@c40e53c
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@760cc42e
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-04 08:01:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@5a223051]
2024-09-04 08:01:55 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 08:01:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@14c77065
2024-09-04 08:01:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 9 ms
2024-09-04 08:01:55 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 08:01:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@414f3670]
2024-09-04 08:01:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@30369734, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6c7189b0, org.springframework.security.web.context.SecurityContextHolderFilter@42516ee1, org.springframework.security.web.header.HeaderWriterFilter@1f19bc01, org.springframework.security.web.authentication.logout.LogoutFilter@4481e4fd, com.hayan.dividend.jwt.JwtAuthenticationFilter@3dba4d9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6a463614, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@50b46caf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5d35c7a7, org.springframework.security.web.session.SessionManagementFilter@549783b8, org.springframework.security.web.access.ExceptionTranslationFilter@66e4579, org.springframework.security.web.access.intercept.AuthorizationFilter@40c38b01]]
2024-09-04 08:01:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 16 ms
2024-09-04 08:01:55 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 08:01:55 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 08:01:55 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 08:01:55 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.454 seconds (process running for 2.762)
2024-09-04 08:02:00 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 08:02:00 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 08:02:00 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-04 08:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 08:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 08:02:00 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-04 08:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-04 08:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 102 ms
2024-09-04 08:02:00 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 08:02:00 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 08:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@45b8fd70
2024-09-04 08:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 108 ms
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:02:02 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:02:02 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 193 ms
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0NTIyLCJleHAiOjE3MjU0OTA5MjJ9.Vq2VZX_n15h9KOSr5MePcJf3GJwtfJmKJrgqaf-px0Nqe3DXbIvnSLadC2cwVdzcItihRB1U4Vf1MdLDhdJkEw
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 20 ms
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0NTIyLCJleHAiOjE3MjU0OTA5MjJ9.Vq2VZX_n15h9KOSr5MePcJf3GJwtfJmKJrgqaf-px0Nqe3DXbIvnSLadC2cwVdzcItihRB1U4Vf1MdLDhdJkEw
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 216 ms
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0NTIyLCJleHAiOjE3MjU0OTA5MjJ9.Vq2VZX_n15h9KOSr5MePcJf3GJwtfJmKJrgqaf-px0Nqe3DXbIvnSLadC2cwVdzcItihRB1U4Vf1MdLDhdJkEw"]>
2024-09-04 08:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 218 ms
2024-09-04 08:02:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0NTIyLCJleHAiOjE3MjU0OTA5MjJ9.Vq2VZX_n15h9KOSr5MePcJf3GJwtfJmKJrgqaf-px0Nqe3DXbIvnSLadC2cwVdzcItihRB1U4Vf1MdLDhdJkEw]
2024-09-04 08:02:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:02:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 23 ms
2024-09-04 08:02:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0NTIyLCJleHAiOjE3MjU0OTA5MjJ9.Vq2VZX_n15h9KOSr5MePcJf3GJwtfJmKJrgqaf-px0Nqe3DXbIvnSLadC2cwVdzcItihRB1U4Vf1MdLDhdJkEw]
2024-09-04 08:02:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:02:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:02:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:02:10 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:02:10 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:02:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:02:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-04 08:04:45 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 08:04:45 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 08:04:45 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 08:04:45 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 08:04:46 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 08:04:46 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 9283 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 08:04:46 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 08:04:46 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 08:04:46 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 08:04:46 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 08:04:47 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 08:04:47 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 08:04:47 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81 ms. Found 3 JPA repository interfaces.
2024-09-04 08:04:47 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 08:04:47 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 08:04:47 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:04:47 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:04:47 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:04:47 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-04 08:04:47 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 08:04:47 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 08:04:47 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 08:04:47 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 08:04:47 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 08:04:47 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 946 ms
2024-09-04 08:04:47 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 08:04:47 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 08:04:47 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 08:04:47 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 08:04:47 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 08:04:47 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 08:04:47 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 08:04:48 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 08:04:48 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 08:04:48 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 08:04:48 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 08:04:48 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-04 08:04:48 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 08:04:48 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 08:04:48 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 08:04:48 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 08:04:48 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 08:04:48 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 08:04:48 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@57bbc6a8
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@57bbc6a8]
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@3dbc9b8c
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@7b432cba
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@3b16ffac]
2024-09-04 08:04:48 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@35bc1d56
2024-09-04 08:04:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 12 ms
2024-09-04 08:04:48 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 08:04:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@1ce0e4ef]
2024-09-04 08:04:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@37414c13, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@40c38b01, org.springframework.security.web.context.SecurityContextHolderFilter@129ec986, org.springframework.security.web.header.HeaderWriterFilter@4639e3c5, org.springframework.security.web.authentication.logout.LogoutFilter@447792e, com.hayan.dividend.jwt.JwtAuthenticationFilter@4ed6512, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@273cf13b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@530bd99c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@daa7346, org.springframework.security.web.session.SessionManagementFilter@4070d7ea, org.springframework.security.web.access.ExceptionTranslationFilter@248343db, org.springframework.security.web.access.intercept.AuthorizationFilter@6953d4de]]
2024-09-04 08:04:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 16 ms
2024-09-04 08:04:49 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 08:04:49 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 08:04:49 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 08:04:49 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.623 seconds (process running for 2.907)
2024-09-04 08:04:53 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 08:04:53 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 08:04:53 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 5 ms
2024-09-04 08:04:53 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-04 08:04:53 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-04 08:04:53 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-04 08:04:53 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-04 08:04:53 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 105 ms
2024-09-04 08:04:53 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 08:04:53 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 08:04:53 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@241964fa
2024-09-04 08:04:53 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 112 ms
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:04:55 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:04:55 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 17 ms
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 200 ms
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 22 ms
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 223 ms
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA"]>
2024-09-04 08:04:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 225 ms
2024-09-04 08:05:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:05:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:05:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 23 ms
2024-09-04 08:05:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:05:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:05:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:05:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:05:04 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:05:04 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:05:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:05:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyMzg1LCJleHAiOjE3MjU0ODg3ODV9.oxi8plViDxYYsYmVEseHz8VaEeSOS1TFw9SXpOKpyC4AGXTbmn0hnhZ91w9qTrn5hb_hpM_l7IiwZn95h6cxUA]
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 6 ms
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyMzg1LCJleHAiOjE3MjU0ODg3ODV9.oxi8plViDxYYsYmVEseHz8VaEeSOS1TFw9SXpOKpyC4AGXTbmn0hnhZ91w9qTrn5hb_hpM_l7IiwZn95h6cxUA]
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:07:45 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:07:45 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 12 ms
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-04 08:07:45 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:07:45 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-04 08:07:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@5716b57d
2024-09-04 08:07:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1695 ms
2024-09-04 08:07:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@5716b57d]
2024-09-04 08:07:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@754464cc, com.hayan.dividend.domain.Dividend@7e3f49c8, com.hayan.dividend.domain.Dividend@6a720767, com.hayan.dividend.domain.Dividend@285d2042, com.hayan.dividend.domain.Dividend@7ee94381, com.hayan.dividend.domain.Dividend@7a9c249d, com.hayan.dividend.domain.Dividend@af4d96, com.hayan.dividend.domain.Dividend@413132f1, com.hayan.dividend.domain.Dividend@7570841d, com.hayan.dividend.domain.Dividend@6ed3eee2, com.hayan.dividend.domain.Dividend@14eacd53, com.hayan.dividend.domain.Dividend@5c84d385, com.hayan.dividend.domain.Dividend@2da5f464, com.hayan.dividend.domain.Dividend@5c70bbcc, com.hayan.dividend.domain.Dividend@1eb27544, com.hayan.dividend.domain.Dividend@645085ec, com.hayan.dividend.domain.Dividend@66d45bd6, com.hayan.dividend.domain.Dividend@3f23321b, com.hayan.dividend.domain.Dividend@323668ee, com.hayan.dividend.domain.Dividend@52a9e4a1, com.hayan.dividend.domain.Dividend@16e70fc9, com.hayan.dividend.domain.Dividend@30f254e4, com.hayan.dividend.domain.Dividend@31822b0c, com.hayan.dividend.domain.Dividend@2c135d71, com.hayan.dividend.domain.Dividend@2a4967d, com.hayan.dividend.domain.Dividend@20d3a7b9, com.hayan.dividend.domain.Dividend@a922e4, com.hayan.dividend.domain.Dividend@36670f55, com.hayan.dividend.domain.Dividend@10d6609a, com.hayan.dividend.domain.Dividend@2d05f356, com.hayan.dividend.domain.Dividend@64f25a10, com.hayan.dividend.domain.Dividend@6ae1fc7c, com.hayan.dividend.domain.Dividend@4910830a, com.hayan.dividend.domain.Dividend@4b0d463d, com.hayan.dividend.domain.Dividend@3d59b796, com.hayan.dividend.domain.Dividend@58beae5d, com.hayan.dividend.domain.Dividend@15fb6e93, com.hayan.dividend.domain.Dividend@34e6eebf, com.hayan.dividend.domain.Dividend@44f31ab2, com.hayan.dividend.domain.Dividend@69129837, com.hayan.dividend.domain.Dividend@27d3ec70, com.hayan.dividend.domain.Dividend@24c36d23, com.hayan.dividend.domain.Dividend@7839d583, com.hayan.dividend.domain.Dividend@5172993, com.hayan.dividend.domain.Dividend@3d1fe52d, com.hayan.dividend.domain.Dividend@20a3dd8, com.hayan.dividend.domain.Dividend@342975d7, com.hayan.dividend.domain.Dividend@84e9970, com.hayan.dividend.domain.Dividend@4aba23d9, com.hayan.dividend.domain.Dividend@198d23ab, com.hayan.dividend.domain.Dividend@66756a80]
2024-09-04 08:07:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1043 ms
2024-09-04 08:07:48 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:07:48 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@754464cc, com.hayan.dividend.domain.Dividend@7e3f49c8, com.hayan.dividend.domain.Dividend@6a720767, com.hayan.dividend.domain.Dividend@285d2042, com.hayan.dividend.domain.Dividend@7ee94381, com.hayan.dividend.domain.Dividend@7a9c249d, com.hayan.dividend.domain.Dividend@af4d96, com.hayan.dividend.domain.Dividend@413132f1, com.hayan.dividend.domain.Dividend@7570841d, com.hayan.dividend.domain.Dividend@6ed3eee2, com.hayan.dividend.domain.Dividend@14eacd53, com.hayan.dividend.domain.Dividend@5c84d385, com.hayan.dividend.domain.Dividend@2da5f464, com.hayan.dividend.domain.Dividend@5c70bbcc, com.hayan.dividend.domain.Dividend@1eb27544, com.hayan.dividend.domain.Dividend@645085ec, com.hayan.dividend.domain.Dividend@66d45bd6, com.hayan.dividend.domain.Dividend@3f23321b, com.hayan.dividend.domain.Dividend@323668ee, com.hayan.dividend.domain.Dividend@52a9e4a1, com.hayan.dividend.domain.Dividend@16e70fc9, com.hayan.dividend.domain.Dividend@30f254e4, com.hayan.dividend.domain.Dividend@31822b0c, com.hayan.dividend.domain.Dividend@2c135d71, com.hayan.dividend.domain.Dividend@2a4967d, com.hayan.dividend.domain.Dividend@20d3a7b9, com.hayan.dividend.domain.Dividend@a922e4, com.hayan.dividend.domain.Dividend@36670f55, com.hayan.dividend.domain.Dividend@10d6609a, com.hayan.dividend.domain.Dividend@2d05f356, com.hayan.dividend.domain.Dividend@64f25a10, com.hayan.dividend.domain.Dividend@6ae1fc7c, com.hayan.dividend.domain.Dividend@4910830a, com.hayan.dividend.domain.Dividend@4b0d463d, com.hayan.dividend.domain.Dividend@3d59b796, com.hayan.dividend.domain.Dividend@58beae5d, com.hayan.dividend.domain.Dividend@15fb6e93, com.hayan.dividend.domain.Dividend@34e6eebf, com.hayan.dividend.domain.Dividend@44f31ab2, com.hayan.dividend.domain.Dividend@69129837, com.hayan.dividend.domain.Dividend@27d3ec70, com.hayan.dividend.domain.Dividend@24c36d23, com.hayan.dividend.domain.Dividend@7839d583, com.hayan.dividend.domain.Dividend@5172993, com.hayan.dividend.domain.Dividend@3d1fe52d, com.hayan.dividend.domain.Dividend@20a3dd8, com.hayan.dividend.domain.Dividend@342975d7, com.hayan.dividend.domain.Dividend@84e9970, com.hayan.dividend.domain.Dividend@4aba23d9, com.hayan.dividend.domain.Dividend@198d23ab, com.hayan.dividend.domain.Dividend@66756a80]]
2024-09-04 08:07:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:07:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 17 ms
2024-09-04 08:07:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:07:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2800 ms
2024-09-04 08:07:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@6c07b638
2024-09-04 08:07:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2801 ms
2024-09-04 08:08:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDAyMzg1LCJleHAiOjE3MjU0ODg3ODV9.oxi8plViDxYYsYmVEseHz8VaEeSsFw9SXpOKpyC4AGXTbmn0hnhZ91w9qTrn5hb_hpM_l7IiwZn95h6cxUAdf]
2024-09-04 08:08:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: false
2024-09-04 08:08:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 7 ms
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:08:42 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:08:42 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 12 ms
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-04 08:08:42 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleCustomException with arguments: [com.hayan.dividend.exception.CustomException: 회사가 이미 존재합니다.]
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleCustomException with result: <400 BAD_REQUEST Bad Request,ErrorResponse[status=400, name=COMPANY_ALREADY_EXISTS, message=회사가 이미 존재합니다.],[]>
2024-09-04 08:08:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleCustomException in 4 ms
2024-09-04 08:08:42 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [com.hayan.dividend.exception.CustomException: 회사가 이미 존재합니다.]
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 2 ms
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:08:47 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:08:47 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [mmm]
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [mmm]
2024-09-04 08:08:47 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:08:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [mmm]
2024-09-04 08:08:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@70f22572
2024-09-04 08:08:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1619 ms
2024-09-04 08:08:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@70f22572]
2024-09-04 08:08:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@67f19aca, com.hayan.dividend.domain.Dividend@649eaf3, com.hayan.dividend.domain.Dividend@6087b197, com.hayan.dividend.domain.Dividend@79c4814, com.hayan.dividend.domain.Dividend@6cd0b5e7, com.hayan.dividend.domain.Dividend@2507c4fc, com.hayan.dividend.domain.Dividend@78d1c2c2, com.hayan.dividend.domain.Dividend@1d68e924, com.hayan.dividend.domain.Dividend@747e08e3, com.hayan.dividend.domain.Dividend@6f4512b4, com.hayan.dividend.domain.Dividend@19f41a4c, com.hayan.dividend.domain.Dividend@430fe19f, com.hayan.dividend.domain.Dividend@4732c00d, com.hayan.dividend.domain.Dividend@25aaed, com.hayan.dividend.domain.Dividend@393ae6df, com.hayan.dividend.domain.Dividend@505eb7e, com.hayan.dividend.domain.Dividend@54e6617b, com.hayan.dividend.domain.Dividend@7939dbc8, com.hayan.dividend.domain.Dividend@175bd62e, com.hayan.dividend.domain.Dividend@3daf81a0, com.hayan.dividend.domain.Dividend@5a25d2d7, com.hayan.dividend.domain.Dividend@6df5a5c0, com.hayan.dividend.domain.Dividend@2456e4f6, com.hayan.dividend.domain.Dividend@65b5c35d, com.hayan.dividend.domain.Dividend@11721656, com.hayan.dividend.domain.Dividend@51696a1d, com.hayan.dividend.domain.Dividend@428b5592, com.hayan.dividend.domain.Dividend@9efd9b5, com.hayan.dividend.domain.Dividend@8aeae78, com.hayan.dividend.domain.Dividend@120d14f2, com.hayan.dividend.domain.Dividend@a32e4e4, com.hayan.dividend.domain.Dividend@7de7a666, com.hayan.dividend.domain.Dividend@471acc, com.hayan.dividend.domain.Dividend@7a1734b2, com.hayan.dividend.domain.Dividend@671ffad0, com.hayan.dividend.domain.Dividend@278ba4c3, com.hayan.dividend.domain.Dividend@1f225b84, com.hayan.dividend.domain.Dividend@5cd35e76, com.hayan.dividend.domain.Dividend@4402f646, com.hayan.dividend.domain.Dividend@3e55ffb9, com.hayan.dividend.domain.Dividend@33267d8c, com.hayan.dividend.domain.Dividend@7540a570, com.hayan.dividend.domain.Dividend@2623cd58, com.hayan.dividend.domain.Dividend@371a5612, com.hayan.dividend.domain.Dividend@37509760, com.hayan.dividend.domain.Dividend@47cbdfdf, com.hayan.dividend.domain.Dividend@7fba8373, com.hayan.dividend.domain.Dividend@1a75f050, com.hayan.dividend.domain.Dividend@292d9fe9, com.hayan.dividend.domain.Dividend@30818834, com.hayan.dividend.domain.Dividend@1b0b244c, com.hayan.dividend.domain.Dividend@2ec9b00d, com.hayan.dividend.domain.Dividend@6b5ea0ea, com.hayan.dividend.domain.Dividend@5722559d, com.hayan.dividend.domain.Dividend@15c93271, com.hayan.dividend.domain.Dividend@7663b11d, com.hayan.dividend.domain.Dividend@682416cb, com.hayan.dividend.domain.Dividend@2def28ef, com.hayan.dividend.domain.Dividend@7169cd99, com.hayan.dividend.domain.Dividend@1ae961f0, com.hayan.dividend.domain.Dividend@5233ae28, com.hayan.dividend.domain.Dividend@6cf4cd1, com.hayan.dividend.domain.Dividend@39755c94, com.hayan.dividend.domain.Dividend@68425cab, com.hayan.dividend.domain.Dividend@274fed65, com.hayan.dividend.domain.Dividend@5b1a9499, com.hayan.dividend.domain.Dividend@4818f292, com.hayan.dividend.domain.Dividend@3245483e, com.hayan.dividend.domain.Dividend@6ab9afd6, com.hayan.dividend.domain.Dividend@65885044, com.hayan.dividend.domain.Dividend@6a0bb205, com.hayan.dividend.domain.Dividend@721703c2, com.hayan.dividend.domain.Dividend@55f7d549, com.hayan.dividend.domain.Dividend@72daa5c3, com.hayan.dividend.domain.Dividend@4576aa07, com.hayan.dividend.domain.Dividend@fb5b878, com.hayan.dividend.domain.Dividend@6403695a, com.hayan.dividend.domain.Dividend@43502ca4, com.hayan.dividend.domain.Dividend@3386805b, com.hayan.dividend.domain.Dividend@11d2882b, com.hayan.dividend.domain.Dividend@6ee47af2, com.hayan.dividend.domain.Dividend@2c934e86, com.hayan.dividend.domain.Dividend@2b109717, com.hayan.dividend.domain.Dividend@2e06d18e, com.hayan.dividend.domain.Dividend@63781d56, com.hayan.dividend.domain.Dividend@552998c1, com.hayan.dividend.domain.Dividend@7a2e155c, com.hayan.dividend.domain.Dividend@623c2136, com.hayan.dividend.domain.Dividend@418d128a, com.hayan.dividend.domain.Dividend@587b65ea, com.hayan.dividend.domain.Dividend@52751f4c, com.hayan.dividend.domain.Dividend@51c3a1a5, com.hayan.dividend.domain.Dividend@78f3f055, com.hayan.dividend.domain.Dividend@7b249e94, com.hayan.dividend.domain.Dividend@1d171c3, com.hayan.dividend.domain.Dividend@4d5326d5, com.hayan.dividend.domain.Dividend@2ac51672, com.hayan.dividend.domain.Dividend@75cafd80, com.hayan.dividend.domain.Dividend@7f9fd593, com.hayan.dividend.domain.Dividend@2bae213b, com.hayan.dividend.domain.Dividend@29dac4ba, com.hayan.dividend.domain.Dividend@b5e0afc, com.hayan.dividend.domain.Dividend@a6c7549, com.hayan.dividend.domain.Dividend@50112ac6, com.hayan.dividend.domain.Dividend@2f91db6a, com.hayan.dividend.domain.Dividend@54632d8e, com.hayan.dividend.domain.Dividend@3dccdc76, com.hayan.dividend.domain.Dividend@64d28613, com.hayan.dividend.domain.Dividend@45b94b68, com.hayan.dividend.domain.Dividend@8fb110c, com.hayan.dividend.domain.Dividend@538f5309, com.hayan.dividend.domain.Dividend@239da575, com.hayan.dividend.domain.Dividend@2cf05865, com.hayan.dividend.domain.Dividend@7c535f86, com.hayan.dividend.domain.Dividend@556d4c1e, com.hayan.dividend.domain.Dividend@1b95edcb, com.hayan.dividend.domain.Dividend@3508bdac, com.hayan.dividend.domain.Dividend@53c17be4, com.hayan.dividend.domain.Dividend@6c73c03e, com.hayan.dividend.domain.Dividend@58bc93ce, com.hayan.dividend.domain.Dividend@2829b0a8, com.hayan.dividend.domain.Dividend@706fe012, com.hayan.dividend.domain.Dividend@26fbc11, com.hayan.dividend.domain.Dividend@3e716d71, com.hayan.dividend.domain.Dividend@5b3826e7, com.hayan.dividend.domain.Dividend@54d832e2, com.hayan.dividend.domain.Dividend@2ba8935c, com.hayan.dividend.domain.Dividend@1e8769bd, com.hayan.dividend.domain.Dividend@4127b94, com.hayan.dividend.domain.Dividend@114806d6, com.hayan.dividend.domain.Dividend@7e1555d0, com.hayan.dividend.domain.Dividend@5bfa012e, com.hayan.dividend.domain.Dividend@4c230f1e, com.hayan.dividend.domain.Dividend@1d8cdefa, com.hayan.dividend.domain.Dividend@4963b34e, com.hayan.dividend.domain.Dividend@429b383d, com.hayan.dividend.domain.Dividend@1614948f, com.hayan.dividend.domain.Dividend@6d14f3b9, com.hayan.dividend.domain.Dividend@39b9d496, com.hayan.dividend.domain.Dividend@2278494c, com.hayan.dividend.domain.Dividend@10fa1160, com.hayan.dividend.domain.Dividend@5a39a1fd, com.hayan.dividend.domain.Dividend@2d53d348, com.hayan.dividend.domain.Dividend@4d81cd87, com.hayan.dividend.domain.Dividend@d30b446, com.hayan.dividend.domain.Dividend@1a91ca54, com.hayan.dividend.domain.Dividend@29eb83dd, com.hayan.dividend.domain.Dividend@6ac59e92, com.hayan.dividend.domain.Dividend@62df9508, com.hayan.dividend.domain.Dividend@7608306d, com.hayan.dividend.domain.Dividend@388a01a, com.hayan.dividend.domain.Dividend@457f9ff7, com.hayan.dividend.domain.Dividend@5b962585, com.hayan.dividend.domain.Dividend@6c2afdc2, com.hayan.dividend.domain.Dividend@2ae4082d, com.hayan.dividend.domain.Dividend@135daaa1, com.hayan.dividend.domain.Dividend@790d1f42, com.hayan.dividend.domain.Dividend@42f2294c, com.hayan.dividend.domain.Dividend@485df45f, com.hayan.dividend.domain.Dividend@36ab4757, com.hayan.dividend.domain.Dividend@27cdb9cf, com.hayan.dividend.domain.Dividend@74265c33, com.hayan.dividend.domain.Dividend@53feb1e4, com.hayan.dividend.domain.Dividend@3f03c533, com.hayan.dividend.domain.Dividend@75ca10dd, com.hayan.dividend.domain.Dividend@33cb1d93, com.hayan.dividend.domain.Dividend@159ceb9f, com.hayan.dividend.domain.Dividend@34178e42, com.hayan.dividend.domain.Dividend@117e3ce5, com.hayan.dividend.domain.Dividend@7ab29cdc, com.hayan.dividend.domain.Dividend@8005006, com.hayan.dividend.domain.Dividend@edbada, com.hayan.dividend.domain.Dividend@60943736, com.hayan.dividend.domain.Dividend@eae0384, com.hayan.dividend.domain.Dividend@4a4f237, com.hayan.dividend.domain.Dividend@69f2a313, com.hayan.dividend.domain.Dividend@289e049c, com.hayan.dividend.domain.Dividend@56d29028, com.hayan.dividend.domain.Dividend@75c4f58f, com.hayan.dividend.domain.Dividend@9d23a1f, com.hayan.dividend.domain.Dividend@51b0655d, com.hayan.dividend.domain.Dividend@13a1fc93, com.hayan.dividend.domain.Dividend@411b0be5, com.hayan.dividend.domain.Dividend@5981c31b, com.hayan.dividend.domain.Dividend@b49cffb, com.hayan.dividend.domain.Dividend@1790ff65, com.hayan.dividend.domain.Dividend@e4d9a51, com.hayan.dividend.domain.Dividend@59030998, com.hayan.dividend.domain.Dividend@1cf02354, com.hayan.dividend.domain.Dividend@c0b8c78, com.hayan.dividend.domain.Dividend@6e7600ba, com.hayan.dividend.domain.Dividend@2f789b25, com.hayan.dividend.domain.Dividend@328fe71d, com.hayan.dividend.domain.Dividend@62b7d578, com.hayan.dividend.domain.Dividend@3c9a6a44, com.hayan.dividend.domain.Dividend@57506f41, com.hayan.dividend.domain.Dividend@1a2acdb9, com.hayan.dividend.domain.Dividend@466ac791, com.hayan.dividend.domain.Dividend@29cd4d52, com.hayan.dividend.domain.Dividend@7db3054d, com.hayan.dividend.domain.Dividend@31b84847, com.hayan.dividend.domain.Dividend@21fe57ae, com.hayan.dividend.domain.Dividend@621a291e, com.hayan.dividend.domain.Dividend@766d17d, com.hayan.dividend.domain.Dividend@746f4ba6, com.hayan.dividend.domain.Dividend@27ff21a2, com.hayan.dividend.domain.Dividend@141ebe9a]
2024-09-04 08:08:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1096 ms
2024-09-04 08:08:50 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:08:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@67f19aca, com.hayan.dividend.domain.Dividend@649eaf3, com.hayan.dividend.domain.Dividend@6087b197, com.hayan.dividend.domain.Dividend@79c4814, com.hayan.dividend.domain.Dividend@6cd0b5e7, com.hayan.dividend.domain.Dividend@2507c4fc, com.hayan.dividend.domain.Dividend@78d1c2c2, com.hayan.dividend.domain.Dividend@1d68e924, com.hayan.dividend.domain.Dividend@747e08e3, com.hayan.dividend.domain.Dividend@6f4512b4, com.hayan.dividend.domain.Dividend@19f41a4c, com.hayan.dividend.domain.Dividend@430fe19f, com.hayan.dividend.domain.Dividend@4732c00d, com.hayan.dividend.domain.Dividend@25aaed, com.hayan.dividend.domain.Dividend@393ae6df, com.hayan.dividend.domain.Dividend@505eb7e, com.hayan.dividend.domain.Dividend@54e6617b, com.hayan.dividend.domain.Dividend@7939dbc8, com.hayan.dividend.domain.Dividend@175bd62e, com.hayan.dividend.domain.Dividend@3daf81a0, com.hayan.dividend.domain.Dividend@5a25d2d7, com.hayan.dividend.domain.Dividend@6df5a5c0, com.hayan.dividend.domain.Dividend@2456e4f6, com.hayan.dividend.domain.Dividend@65b5c35d, com.hayan.dividend.domain.Dividend@11721656, com.hayan.dividend.domain.Dividend@51696a1d, com.hayan.dividend.domain.Dividend@428b5592, com.hayan.dividend.domain.Dividend@9efd9b5, com.hayan.dividend.domain.Dividend@8aeae78, com.hayan.dividend.domain.Dividend@120d14f2, com.hayan.dividend.domain.Dividend@a32e4e4, com.hayan.dividend.domain.Dividend@7de7a666, com.hayan.dividend.domain.Dividend@471acc, com.hayan.dividend.domain.Dividend@7a1734b2, com.hayan.dividend.domain.Dividend@671ffad0, com.hayan.dividend.domain.Dividend@278ba4c3, com.hayan.dividend.domain.Dividend@1f225b84, com.hayan.dividend.domain.Dividend@5cd35e76, com.hayan.dividend.domain.Dividend@4402f646, com.hayan.dividend.domain.Dividend@3e55ffb9, com.hayan.dividend.domain.Dividend@33267d8c, com.hayan.dividend.domain.Dividend@7540a570, com.hayan.dividend.domain.Dividend@2623cd58, com.hayan.dividend.domain.Dividend@371a5612, com.hayan.dividend.domain.Dividend@37509760, com.hayan.dividend.domain.Dividend@47cbdfdf, com.hayan.dividend.domain.Dividend@7fba8373, com.hayan.dividend.domain.Dividend@1a75f050, com.hayan.dividend.domain.Dividend@292d9fe9, com.hayan.dividend.domain.Dividend@30818834, com.hayan.dividend.domain.Dividend@1b0b244c, com.hayan.dividend.domain.Dividend@2ec9b00d, com.hayan.dividend.domain.Dividend@6b5ea0ea, com.hayan.dividend.domain.Dividend@5722559d, com.hayan.dividend.domain.Dividend@15c93271, com.hayan.dividend.domain.Dividend@7663b11d, com.hayan.dividend.domain.Dividend@682416cb, com.hayan.dividend.domain.Dividend@2def28ef, com.hayan.dividend.domain.Dividend@7169cd99, com.hayan.dividend.domain.Dividend@1ae961f0, com.hayan.dividend.domain.Dividend@5233ae28, com.hayan.dividend.domain.Dividend@6cf4cd1, com.hayan.dividend.domain.Dividend@39755c94, com.hayan.dividend.domain.Dividend@68425cab, com.hayan.dividend.domain.Dividend@274fed65, com.hayan.dividend.domain.Dividend@5b1a9499, com.hayan.dividend.domain.Dividend@4818f292, com.hayan.dividend.domain.Dividend@3245483e, com.hayan.dividend.domain.Dividend@6ab9afd6, com.hayan.dividend.domain.Dividend@65885044, com.hayan.dividend.domain.Dividend@6a0bb205, com.hayan.dividend.domain.Dividend@721703c2, com.hayan.dividend.domain.Dividend@55f7d549, com.hayan.dividend.domain.Dividend@72daa5c3, com.hayan.dividend.domain.Dividend@4576aa07, com.hayan.dividend.domain.Dividend@fb5b878, com.hayan.dividend.domain.Dividend@6403695a, com.hayan.dividend.domain.Dividend@43502ca4, com.hayan.dividend.domain.Dividend@3386805b, com.hayan.dividend.domain.Dividend@11d2882b, com.hayan.dividend.domain.Dividend@6ee47af2, com.hayan.dividend.domain.Dividend@2c934e86, com.hayan.dividend.domain.Dividend@2b109717, com.hayan.dividend.domain.Dividend@2e06d18e, com.hayan.dividend.domain.Dividend@63781d56, com.hayan.dividend.domain.Dividend@552998c1, com.hayan.dividend.domain.Dividend@7a2e155c, com.hayan.dividend.domain.Dividend@623c2136, com.hayan.dividend.domain.Dividend@418d128a, com.hayan.dividend.domain.Dividend@587b65ea, com.hayan.dividend.domain.Dividend@52751f4c, com.hayan.dividend.domain.Dividend@51c3a1a5, com.hayan.dividend.domain.Dividend@78f3f055, com.hayan.dividend.domain.Dividend@7b249e94, com.hayan.dividend.domain.Dividend@1d171c3, com.hayan.dividend.domain.Dividend@4d5326d5, com.hayan.dividend.domain.Dividend@2ac51672, com.hayan.dividend.domain.Dividend@75cafd80, com.hayan.dividend.domain.Dividend@7f9fd593, com.hayan.dividend.domain.Dividend@2bae213b, com.hayan.dividend.domain.Dividend@29dac4ba, com.hayan.dividend.domain.Dividend@b5e0afc, com.hayan.dividend.domain.Dividend@a6c7549, com.hayan.dividend.domain.Dividend@50112ac6, com.hayan.dividend.domain.Dividend@2f91db6a, com.hayan.dividend.domain.Dividend@54632d8e, com.hayan.dividend.domain.Dividend@3dccdc76, com.hayan.dividend.domain.Dividend@64d28613, com.hayan.dividend.domain.Dividend@45b94b68, com.hayan.dividend.domain.Dividend@8fb110c, com.hayan.dividend.domain.Dividend@538f5309, com.hayan.dividend.domain.Dividend@239da575, com.hayan.dividend.domain.Dividend@2cf05865, com.hayan.dividend.domain.Dividend@7c535f86, com.hayan.dividend.domain.Dividend@556d4c1e, com.hayan.dividend.domain.Dividend@1b95edcb, com.hayan.dividend.domain.Dividend@3508bdac, com.hayan.dividend.domain.Dividend@53c17be4, com.hayan.dividend.domain.Dividend@6c73c03e, com.hayan.dividend.domain.Dividend@58bc93ce, com.hayan.dividend.domain.Dividend@2829b0a8, com.hayan.dividend.domain.Dividend@706fe012, com.hayan.dividend.domain.Dividend@26fbc11, com.hayan.dividend.domain.Dividend@3e716d71, com.hayan.dividend.domain.Dividend@5b3826e7, com.hayan.dividend.domain.Dividend@54d832e2, com.hayan.dividend.domain.Dividend@2ba8935c, com.hayan.dividend.domain.Dividend@1e8769bd, com.hayan.dividend.domain.Dividend@4127b94, com.hayan.dividend.domain.Dividend@114806d6, com.hayan.dividend.domain.Dividend@7e1555d0, com.hayan.dividend.domain.Dividend@5bfa012e, com.hayan.dividend.domain.Dividend@4c230f1e, com.hayan.dividend.domain.Dividend@1d8cdefa, com.hayan.dividend.domain.Dividend@4963b34e, com.hayan.dividend.domain.Dividend@429b383d, com.hayan.dividend.domain.Dividend@1614948f, com.hayan.dividend.domain.Dividend@6d14f3b9, com.hayan.dividend.domain.Dividend@39b9d496, com.hayan.dividend.domain.Dividend@2278494c, com.hayan.dividend.domain.Dividend@10fa1160, com.hayan.dividend.domain.Dividend@5a39a1fd, com.hayan.dividend.domain.Dividend@2d53d348, com.hayan.dividend.domain.Dividend@4d81cd87, com.hayan.dividend.domain.Dividend@d30b446, com.hayan.dividend.domain.Dividend@1a91ca54, com.hayan.dividend.domain.Dividend@29eb83dd, com.hayan.dividend.domain.Dividend@6ac59e92, com.hayan.dividend.domain.Dividend@62df9508, com.hayan.dividend.domain.Dividend@7608306d, com.hayan.dividend.domain.Dividend@388a01a, com.hayan.dividend.domain.Dividend@457f9ff7, com.hayan.dividend.domain.Dividend@5b962585, com.hayan.dividend.domain.Dividend@6c2afdc2, com.hayan.dividend.domain.Dividend@2ae4082d, com.hayan.dividend.domain.Dividend@135daaa1, com.hayan.dividend.domain.Dividend@790d1f42, com.hayan.dividend.domain.Dividend@42f2294c, com.hayan.dividend.domain.Dividend@485df45f, com.hayan.dividend.domain.Dividend@36ab4757, com.hayan.dividend.domain.Dividend@27cdb9cf, com.hayan.dividend.domain.Dividend@74265c33, com.hayan.dividend.domain.Dividend@53feb1e4, com.hayan.dividend.domain.Dividend@3f03c533, com.hayan.dividend.domain.Dividend@75ca10dd, com.hayan.dividend.domain.Dividend@33cb1d93, com.hayan.dividend.domain.Dividend@159ceb9f, com.hayan.dividend.domain.Dividend@34178e42, com.hayan.dividend.domain.Dividend@117e3ce5, com.hayan.dividend.domain.Dividend@7ab29cdc, com.hayan.dividend.domain.Dividend@8005006, com.hayan.dividend.domain.Dividend@edbada, com.hayan.dividend.domain.Dividend@60943736, com.hayan.dividend.domain.Dividend@eae0384, com.hayan.dividend.domain.Dividend@4a4f237, com.hayan.dividend.domain.Dividend@69f2a313, com.hayan.dividend.domain.Dividend@289e049c, com.hayan.dividend.domain.Dividend@56d29028, com.hayan.dividend.domain.Dividend@75c4f58f, com.hayan.dividend.domain.Dividend@9d23a1f, com.hayan.dividend.domain.Dividend@51b0655d, com.hayan.dividend.domain.Dividend@13a1fc93, com.hayan.dividend.domain.Dividend@411b0be5, com.hayan.dividend.domain.Dividend@5981c31b, com.hayan.dividend.domain.Dividend@b49cffb, com.hayan.dividend.domain.Dividend@1790ff65, com.hayan.dividend.domain.Dividend@e4d9a51, com.hayan.dividend.domain.Dividend@59030998, com.hayan.dividend.domain.Dividend@1cf02354, com.hayan.dividend.domain.Dividend@c0b8c78, com.hayan.dividend.domain.Dividend@6e7600ba, com.hayan.dividend.domain.Dividend@2f789b25, com.hayan.dividend.domain.Dividend@328fe71d, com.hayan.dividend.domain.Dividend@62b7d578, com.hayan.dividend.domain.Dividend@3c9a6a44, com.hayan.dividend.domain.Dividend@57506f41, com.hayan.dividend.domain.Dividend@1a2acdb9, com.hayan.dividend.domain.Dividend@466ac791, com.hayan.dividend.domain.Dividend@29cd4d52, com.hayan.dividend.domain.Dividend@7db3054d, com.hayan.dividend.domain.Dividend@31b84847, com.hayan.dividend.domain.Dividend@21fe57ae, com.hayan.dividend.domain.Dividend@621a291e, com.hayan.dividend.domain.Dividend@766d17d, com.hayan.dividend.domain.Dividend@746f4ba6, com.hayan.dividend.domain.Dividend@27ff21a2, com.hayan.dividend.domain.Dividend@141ebe9a]]
2024-09-04 08:08:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:08:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 18 ms
2024-09-04 08:08:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:08:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2741 ms
2024-09-04 08:08:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@18ead04a
2024-09-04 08:08:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2743 ms
2024-09-04 08:10:03 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 08:10:03 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 08:10:03 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 08:10:03 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 08:10:05 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 08:10:05 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 9676 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 08:10:05 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 08:10:05 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 08:10:05 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 08:10:05 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 08:10:05 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 08:10:05 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 08:10:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71 ms. Found 3 JPA repository interfaces.
2024-09-04 08:10:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 08:10:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 08:10:06 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:10:06 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:10:06 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:10:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-04 08:10:06 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 08:10:06 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 08:10:06 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 08:10:06 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 08:10:06 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 08:10:06 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 786 ms
2024-09-04 08:10:06 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 08:10:06 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 08:10:06 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 08:10:06 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 08:10:06 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 08:10:06 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 08:10:06 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 08:10:06 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 08:10:07 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 08:10:07 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 08:10:07 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 08:10:07 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-04 08:10:07 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 08:10:07 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 08:10:07 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 08:10:07 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 08:10:07 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 08:10:07 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 08:10:07 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@3eaab37c
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@3eaab37c]
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@5c492b86
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@2df5aad2
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@6c874b3f]
2024-09-04 08:10:07 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@3821729
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-04 08:10:07 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@4c402371]
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@583605c9, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7f837ebe, org.springframework.security.web.context.SecurityContextHolderFilter@5f0b27d4, org.springframework.security.web.header.HeaderWriterFilter@2fbb4575, org.springframework.security.web.authentication.logout.LogoutFilter@1de9d22a, com.hayan.dividend.jwt.JwtAuthenticationFilter@a20642c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6b983953, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@12576f6e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@73caa50, org.springframework.security.web.session.SessionManagementFilter@11f7103d, org.springframework.security.web.access.ExceptionTranslationFilter@7e5f53a, org.springframework.security.web.access.intercept.AuthorizationFilter@30c2fa13]]
2024-09-04 08:10:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-04 08:10:07 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 08:10:07 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 08:10:07 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 08:10:07 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.537 seconds (process running for 3.232)
2024-09-04 08:10:13 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 08:10:13 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 08:10:13 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-04 08:10:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:10:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:10:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:10:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:10:13 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:10:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [org.springframework.security.authentication.InternalAuthenticationServiceException: 존재하지 않는 회원입니다.]
2024-09-04 08:10:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-04 08:10:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 1 ms
2024-09-04 08:10:13 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.security.authentication.InternalAuthenticationServiceException: 존재하지 않는 회원입니다.]
2024-09-04 08:10:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 08:10:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 08:10:17 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-04 08:10:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-04 08:10:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 134 ms
2024-09-04 08:10:17 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 08:10:17 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 08:10:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@3bf60f4a
2024-09-04 08:10:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 141 ms
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:10:20 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:10:20 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 23 ms
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 115 ms
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDIwLCJleHAiOjE3MjU0OTE0MjB9.xMdsoTFoWVUlCdYDeO3RLqImyLdhK42rftXh1olTvjctqkr4G1IB-V2g7OyCmI2RdCVCJkeGLl5yawvIHyOrOA
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 21 ms
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDIwLCJleHAiOjE3MjU0OTE0MjB9.xMdsoTFoWVUlCdYDeO3RLqImyLdhK42rftXh1olTvjctqkr4G1IB-V2g7OyCmI2RdCVCJkeGLl5yawvIHyOrOA
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 138 ms
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDIwLCJleHAiOjE3MjU0OTE0MjB9.xMdsoTFoWVUlCdYDeO3RLqImyLdhK42rftXh1olTvjctqkr4G1IB-V2g7OyCmI2RdCVCJkeGLl5yawvIHyOrOA"]>
2024-09-04 08:10:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 139 ms
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDIwLCJleHAiOjE3MjU0OTE0MjB9.xMdsoTFoWVUlCdYDeO3RLqImyLdhK42rftXh1olTvjctqkr4G1IB-V2g7OyCmI2RdCVCJkeGLl5yawvIHyOrOA]
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 24 ms
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDIwLCJleHAiOjE3MjU0OTE0MjB9.xMdsoTFoWVUlCdYDeO3RLqImyLdhK42rftXh1olTvjctqkr4G1IB-V2g7OyCmI2RdCVCJkeGLl5yawvIHyOrOA]
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:10:32 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:10:32 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-04 08:10:32 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: ["s"]
2024-09-04 08:10:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: ["s"]
2024-09-04 08:10:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-04 08:10:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 2 ms
2024-09-04 08:10:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@2e86b6c3
2024-09-04 08:10:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 5015 ms
2024-09-04 08:10:37 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 08:10:37 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 08:10:37 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 08:10:37 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-04 08:10:48 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-04 08:10:48 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 9728 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-04 08:10:48 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-04 08:10:48 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-04 08:10:48 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-04 08:10:48 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-04 08:10:48 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 08:10:48 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-04 08:10:48 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63 ms. Found 3 JPA repository interfaces.
2024-09-04 08:10:48 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-04 08:10:48 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-04 08:10:48 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:10:48 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:10:48 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-04 08:10:48 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-04 08:10:49 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-04 08:10:49 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-04 08:10:49 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-04 08:10:49 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-04 08:10:49 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-04 08:10:49 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 744 ms
2024-09-04 08:10:49 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-04 08:10:49 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-04 08:10:49 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-04 08:10:49 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-04 08:10:49 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-04 08:10:49 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-04 08:10:49 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-04 08:10:49 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-04 08:10:50 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-04 08:10:50 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-04 08:10:50 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-04 08:10:50 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-04 08:10:50 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-04 08:10:50 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-04 08:10:50 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-04 08:10:50 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-04 08:10:50 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-04 08:10:50 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 08:10:50 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@6b3dcaff
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@6b3dcaff]
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@3922660e
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@5e2cf041
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@4411571b]
2024-09-04 08:10:50 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@4de51892
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-04 08:10:50 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@60712b95]
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@5c82182b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6953d4de, org.springframework.security.web.context.SecurityContextHolderFilter@7b44f5e6, org.springframework.security.web.header.HeaderWriterFilter@2262d273, org.springframework.security.web.authentication.logout.LogoutFilter@5ebfcdd8, com.hayan.dividend.jwt.JwtAuthenticationFilter@11caa417, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1e1db8a1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6a463614, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7b4e5011, org.springframework.security.web.session.SessionManagementFilter@539d1246, org.springframework.security.web.access.ExceptionTranslationFilter@2f6cb8e8, org.springframework.security.web.access.intercept.AuthorizationFilter@61fa93c6]]
2024-09-04 08:10:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 16 ms
2024-09-04 08:10:50 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-04 08:10:50 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-04 08:10:50 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-04 08:10:50 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.4 seconds (process running for 2.711)
2024-09-04 08:10:54 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-04 08:10:54 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-04 08:10:54 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-04 08:10:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 08:10:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-04 08:10:54 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-04 08:10:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-04 08:10:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 101 ms
2024-09-04 08:10:54 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 08:10:54 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-04 08:10:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@1c52ca1b
2024-09-04 08:10:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 108 ms
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:10:56 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:10:56 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 22 ms
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 202 ms
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDU2LCJleHAiOjE3MjU0OTE0NTZ9.Sjw1LXbExGS_IhvlbGjzUfrfyfQsOrOA0Qf1fSF2ct39geNrf7AcoqB2UqHolH5PjHmowWIyYxJpKBrRHnryOQ
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 22 ms
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDU2LCJleHAiOjE3MjU0OTE0NTZ9.Sjw1LXbExGS_IhvlbGjzUfrfyfQsOrOA0Qf1fSF2ct39geNrf7AcoqB2UqHolH5PjHmowWIyYxJpKBrRHnryOQ
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 224 ms
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDU2LCJleHAiOjE3MjU0OTE0NTZ9.Sjw1LXbExGS_IhvlbGjzUfrfyfQsOrOA0Qf1fSF2ct39geNrf7AcoqB2UqHolH5PjHmowWIyYxJpKBrRHnryOQ"]>
2024-09-04 08:10:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 226 ms
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDU2LCJleHAiOjE3MjU0OTE0NTZ9.Sjw1LXbExGS_IhvlbGjzUfrfyfQsOrOA0Qf1fSF2ct39geNrf7AcoqB2UqHolH5PjHmowWIyYxJpKBrRHnryOQ]
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 27 ms
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDU2LCJleHAiOjE3MjU0OTE0NTZ9.Sjw1LXbExGS_IhvlbGjzUfrfyfQsOrOA0Qf1fSF2ct39geNrf7AcoqB2UqHolH5PjHmowWIyYxJpKBrRHnryOQ]
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:11:03 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:11:03 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [s]
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [s]
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@76889f93
2024-09-04 08:11:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 3 ms
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:11:06 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:11:06 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 6 ms
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [mmm]
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [mmm]
2024-09-04 08:11:06 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:11:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [mmm]
2024-09-04 08:11:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@3aa8162d
2024-09-04 08:11:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1949 ms
2024-09-04 08:11:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@3aa8162d]
2024-09-04 08:11:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@387dbbc5, com.hayan.dividend.domain.Dividend@764cc326, com.hayan.dividend.domain.Dividend@23f23f13, com.hayan.dividend.domain.Dividend@1b8ce3b3, com.hayan.dividend.domain.Dividend@4e7ad094, com.hayan.dividend.domain.Dividend@5e3f7f8e, com.hayan.dividend.domain.Dividend@6c07d9fd, com.hayan.dividend.domain.Dividend@10ea3eb5, com.hayan.dividend.domain.Dividend@88cb24c, com.hayan.dividend.domain.Dividend@2dea6fdc, com.hayan.dividend.domain.Dividend@7f7093ad, com.hayan.dividend.domain.Dividend@3e2e1560, com.hayan.dividend.domain.Dividend@53ddde3b, com.hayan.dividend.domain.Dividend@2d37df13, com.hayan.dividend.domain.Dividend@5621dce3, com.hayan.dividend.domain.Dividend@18ea4652, com.hayan.dividend.domain.Dividend@25fb6f72, com.hayan.dividend.domain.Dividend@3627e399, com.hayan.dividend.domain.Dividend@6eb9e77a, com.hayan.dividend.domain.Dividend@242be429, com.hayan.dividend.domain.Dividend@5a559f21, com.hayan.dividend.domain.Dividend@536794d9, com.hayan.dividend.domain.Dividend@72443bf8, com.hayan.dividend.domain.Dividend@9359335, com.hayan.dividend.domain.Dividend@7fefa9a5, com.hayan.dividend.domain.Dividend@10c13bdd, com.hayan.dividend.domain.Dividend@430949c6, com.hayan.dividend.domain.Dividend@6600c6a9, com.hayan.dividend.domain.Dividend@64a0e94d, com.hayan.dividend.domain.Dividend@7d2629d7, com.hayan.dividend.domain.Dividend@74e808cc, com.hayan.dividend.domain.Dividend@14bdbd76, com.hayan.dividend.domain.Dividend@7734d42d, com.hayan.dividend.domain.Dividend@3b90238d, com.hayan.dividend.domain.Dividend@f0af25b, com.hayan.dividend.domain.Dividend@76a5b8c1, com.hayan.dividend.domain.Dividend@27e19f84, com.hayan.dividend.domain.Dividend@1d574cbe, com.hayan.dividend.domain.Dividend@4517ed65, com.hayan.dividend.domain.Dividend@1e2f36b6, com.hayan.dividend.domain.Dividend@35999748, com.hayan.dividend.domain.Dividend@128c0ff9, com.hayan.dividend.domain.Dividend@680aa408, com.hayan.dividend.domain.Dividend@ff7b539, com.hayan.dividend.domain.Dividend@76ad4058, com.hayan.dividend.domain.Dividend@4ac7ab3, com.hayan.dividend.domain.Dividend@39bba4ca, com.hayan.dividend.domain.Dividend@b5790b9, com.hayan.dividend.domain.Dividend@17e4be0b, com.hayan.dividend.domain.Dividend@707a27a6, com.hayan.dividend.domain.Dividend@14835097, com.hayan.dividend.domain.Dividend@23e6c8e6, com.hayan.dividend.domain.Dividend@11c03e77, com.hayan.dividend.domain.Dividend@30a66cfe, com.hayan.dividend.domain.Dividend@3e2f8595, com.hayan.dividend.domain.Dividend@2b9bcb4e, com.hayan.dividend.domain.Dividend@3bb86bcc, com.hayan.dividend.domain.Dividend@387a21d9, com.hayan.dividend.domain.Dividend@7abb186e, com.hayan.dividend.domain.Dividend@f0f6dcc, com.hayan.dividend.domain.Dividend@779181ea, com.hayan.dividend.domain.Dividend@1e8c1228, com.hayan.dividend.domain.Dividend@3c5601ff, com.hayan.dividend.domain.Dividend@48437ab4, com.hayan.dividend.domain.Dividend@33262c87, com.hayan.dividend.domain.Dividend@4d456599, com.hayan.dividend.domain.Dividend@4110cc37, com.hayan.dividend.domain.Dividend@1255887b, com.hayan.dividend.domain.Dividend@1015cca2, com.hayan.dividend.domain.Dividend@761a1a94, com.hayan.dividend.domain.Dividend@31ac0114, com.hayan.dividend.domain.Dividend@f84410a, com.hayan.dividend.domain.Dividend@31caec84, com.hayan.dividend.domain.Dividend@17229e93, com.hayan.dividend.domain.Dividend@46d799c2, com.hayan.dividend.domain.Dividend@6b760c03, com.hayan.dividend.domain.Dividend@dbe6325, com.hayan.dividend.domain.Dividend@e6bb207, com.hayan.dividend.domain.Dividend@74882381, com.hayan.dividend.domain.Dividend@2f453f07, com.hayan.dividend.domain.Dividend@511cd681, com.hayan.dividend.domain.Dividend@2b4bd2f, com.hayan.dividend.domain.Dividend@379512d3, com.hayan.dividend.domain.Dividend@312eae21, com.hayan.dividend.domain.Dividend@6b1de5b, com.hayan.dividend.domain.Dividend@21cb4667, com.hayan.dividend.domain.Dividend@3e57cb07, com.hayan.dividend.domain.Dividend@7a4c254a, com.hayan.dividend.domain.Dividend@72877f5e, com.hayan.dividend.domain.Dividend@904f717, com.hayan.dividend.domain.Dividend@90b0ac3, com.hayan.dividend.domain.Dividend@12f618dd, com.hayan.dividend.domain.Dividend@5bc2f852, com.hayan.dividend.domain.Dividend@75501072, com.hayan.dividend.domain.Dividend@245c4109, com.hayan.dividend.domain.Dividend@64e95af, com.hayan.dividend.domain.Dividend@4a82ed5c, com.hayan.dividend.domain.Dividend@3f24b7fe, com.hayan.dividend.domain.Dividend@7936ed1a, com.hayan.dividend.domain.Dividend@b27ec7e, com.hayan.dividend.domain.Dividend@5692184b, com.hayan.dividend.domain.Dividend@4c13de20, com.hayan.dividend.domain.Dividend@283a485, com.hayan.dividend.domain.Dividend@3673fcb7, com.hayan.dividend.domain.Dividend@7065fa72, com.hayan.dividend.domain.Dividend@22d5d880, com.hayan.dividend.domain.Dividend@3d6de7d3, com.hayan.dividend.domain.Dividend@14d2228d, com.hayan.dividend.domain.Dividend@4bbbec0f, com.hayan.dividend.domain.Dividend@47a62c20, com.hayan.dividend.domain.Dividend@15270878, com.hayan.dividend.domain.Dividend@10e4961b, com.hayan.dividend.domain.Dividend@4abcb9c, com.hayan.dividend.domain.Dividend@721a2005, com.hayan.dividend.domain.Dividend@5fd382f6, com.hayan.dividend.domain.Dividend@6b338359, com.hayan.dividend.domain.Dividend@319e5288, com.hayan.dividend.domain.Dividend@122746b6, com.hayan.dividend.domain.Dividend@51a0a236, com.hayan.dividend.domain.Dividend@267eda10, com.hayan.dividend.domain.Dividend@65b7c645, com.hayan.dividend.domain.Dividend@4d0d3eb3, com.hayan.dividend.domain.Dividend@19689436, com.hayan.dividend.domain.Dividend@49167351, com.hayan.dividend.domain.Dividend@12c811d8, com.hayan.dividend.domain.Dividend@36144d94, com.hayan.dividend.domain.Dividend@6b00a644, com.hayan.dividend.domain.Dividend@1176cc8e, com.hayan.dividend.domain.Dividend@436259a9, com.hayan.dividend.domain.Dividend@578ec4bc, com.hayan.dividend.domain.Dividend@39526a8f, com.hayan.dividend.domain.Dividend@1ee7c397, com.hayan.dividend.domain.Dividend@4f196ef3, com.hayan.dividend.domain.Dividend@6e13f888, com.hayan.dividend.domain.Dividend@44bfe1d7, com.hayan.dividend.domain.Dividend@64e479ac, com.hayan.dividend.domain.Dividend@608eed35, com.hayan.dividend.domain.Dividend@11a88e14, com.hayan.dividend.domain.Dividend@2a2274af, com.hayan.dividend.domain.Dividend@6d4c515e, com.hayan.dividend.domain.Dividend@7abcee87, com.hayan.dividend.domain.Dividend@2fb107ea, com.hayan.dividend.domain.Dividend@168f89bf, com.hayan.dividend.domain.Dividend@19c6fc91, com.hayan.dividend.domain.Dividend@413e1f8, com.hayan.dividend.domain.Dividend@233a38c7, com.hayan.dividend.domain.Dividend@49129f6e, com.hayan.dividend.domain.Dividend@671ec0a9, com.hayan.dividend.domain.Dividend@7c99f193, com.hayan.dividend.domain.Dividend@e1712c7, com.hayan.dividend.domain.Dividend@53230584, com.hayan.dividend.domain.Dividend@42a99cc1, com.hayan.dividend.domain.Dividend@718ff86e, com.hayan.dividend.domain.Dividend@47384db2, com.hayan.dividend.domain.Dividend@c7c7ff4, com.hayan.dividend.domain.Dividend@2bdb52e, com.hayan.dividend.domain.Dividend@c7f719f, com.hayan.dividend.domain.Dividend@92fe87f, com.hayan.dividend.domain.Dividend@66c3a571, com.hayan.dividend.domain.Dividend@9386842, com.hayan.dividend.domain.Dividend@7ebc1373, com.hayan.dividend.domain.Dividend@82660cb, com.hayan.dividend.domain.Dividend@7335b493, com.hayan.dividend.domain.Dividend@3985b8cf, com.hayan.dividend.domain.Dividend@273c0307, com.hayan.dividend.domain.Dividend@1ca71f13, com.hayan.dividend.domain.Dividend@42e8b138, com.hayan.dividend.domain.Dividend@563f3a6a, com.hayan.dividend.domain.Dividend@11dc3f91, com.hayan.dividend.domain.Dividend@3527e53e, com.hayan.dividend.domain.Dividend@3241e3d3, com.hayan.dividend.domain.Dividend@1d82739b, com.hayan.dividend.domain.Dividend@6d52f70d, com.hayan.dividend.domain.Dividend@67d6e18c, com.hayan.dividend.domain.Dividend@5a34d9de, com.hayan.dividend.domain.Dividend@54a467a8, com.hayan.dividend.domain.Dividend@2eb408ae, com.hayan.dividend.domain.Dividend@7e3e5675, com.hayan.dividend.domain.Dividend@2388a45, com.hayan.dividend.domain.Dividend@7556248d, com.hayan.dividend.domain.Dividend@7b29a3f1, com.hayan.dividend.domain.Dividend@7728cf1f, com.hayan.dividend.domain.Dividend@3104091d, com.hayan.dividend.domain.Dividend@75b231fc, com.hayan.dividend.domain.Dividend@43323290, com.hayan.dividend.domain.Dividend@72535dde, com.hayan.dividend.domain.Dividend@630efe68, com.hayan.dividend.domain.Dividend@7571e24, com.hayan.dividend.domain.Dividend@55230aec, com.hayan.dividend.domain.Dividend@3d76003b, com.hayan.dividend.domain.Dividend@299f4443, com.hayan.dividend.domain.Dividend@1686d96a, com.hayan.dividend.domain.Dividend@5b3fd53c, com.hayan.dividend.domain.Dividend@56c571b8, com.hayan.dividend.domain.Dividend@5ab8a7f, com.hayan.dividend.domain.Dividend@25464e29, com.hayan.dividend.domain.Dividend@75f988, com.hayan.dividend.domain.Dividend@7dc0008f, com.hayan.dividend.domain.Dividend@2461953a, com.hayan.dividend.domain.Dividend@33c1b099, com.hayan.dividend.domain.Dividend@1cd7b6d0, com.hayan.dividend.domain.Dividend@61ee19bd, com.hayan.dividend.domain.Dividend@498e98ff, com.hayan.dividend.domain.Dividend@77f5bc2f, com.hayan.dividend.domain.Dividend@56b5f537, com.hayan.dividend.domain.Dividend@47873dad, com.hayan.dividend.domain.Dividend@7a730cc2]
2024-09-04 08:11:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1294 ms
2024-09-04 08:11:09 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:11:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@387dbbc5, com.hayan.dividend.domain.Dividend@764cc326, com.hayan.dividend.domain.Dividend@23f23f13, com.hayan.dividend.domain.Dividend@1b8ce3b3, com.hayan.dividend.domain.Dividend@4e7ad094, com.hayan.dividend.domain.Dividend@5e3f7f8e, com.hayan.dividend.domain.Dividend@6c07d9fd, com.hayan.dividend.domain.Dividend@10ea3eb5, com.hayan.dividend.domain.Dividend@88cb24c, com.hayan.dividend.domain.Dividend@2dea6fdc, com.hayan.dividend.domain.Dividend@7f7093ad, com.hayan.dividend.domain.Dividend@3e2e1560, com.hayan.dividend.domain.Dividend@53ddde3b, com.hayan.dividend.domain.Dividend@2d37df13, com.hayan.dividend.domain.Dividend@5621dce3, com.hayan.dividend.domain.Dividend@18ea4652, com.hayan.dividend.domain.Dividend@25fb6f72, com.hayan.dividend.domain.Dividend@3627e399, com.hayan.dividend.domain.Dividend@6eb9e77a, com.hayan.dividend.domain.Dividend@242be429, com.hayan.dividend.domain.Dividend@5a559f21, com.hayan.dividend.domain.Dividend@536794d9, com.hayan.dividend.domain.Dividend@72443bf8, com.hayan.dividend.domain.Dividend@9359335, com.hayan.dividend.domain.Dividend@7fefa9a5, com.hayan.dividend.domain.Dividend@10c13bdd, com.hayan.dividend.domain.Dividend@430949c6, com.hayan.dividend.domain.Dividend@6600c6a9, com.hayan.dividend.domain.Dividend@64a0e94d, com.hayan.dividend.domain.Dividend@7d2629d7, com.hayan.dividend.domain.Dividend@74e808cc, com.hayan.dividend.domain.Dividend@14bdbd76, com.hayan.dividend.domain.Dividend@7734d42d, com.hayan.dividend.domain.Dividend@3b90238d, com.hayan.dividend.domain.Dividend@f0af25b, com.hayan.dividend.domain.Dividend@76a5b8c1, com.hayan.dividend.domain.Dividend@27e19f84, com.hayan.dividend.domain.Dividend@1d574cbe, com.hayan.dividend.domain.Dividend@4517ed65, com.hayan.dividend.domain.Dividend@1e2f36b6, com.hayan.dividend.domain.Dividend@35999748, com.hayan.dividend.domain.Dividend@128c0ff9, com.hayan.dividend.domain.Dividend@680aa408, com.hayan.dividend.domain.Dividend@ff7b539, com.hayan.dividend.domain.Dividend@76ad4058, com.hayan.dividend.domain.Dividend@4ac7ab3, com.hayan.dividend.domain.Dividend@39bba4ca, com.hayan.dividend.domain.Dividend@b5790b9, com.hayan.dividend.domain.Dividend@17e4be0b, com.hayan.dividend.domain.Dividend@707a27a6, com.hayan.dividend.domain.Dividend@14835097, com.hayan.dividend.domain.Dividend@23e6c8e6, com.hayan.dividend.domain.Dividend@11c03e77, com.hayan.dividend.domain.Dividend@30a66cfe, com.hayan.dividend.domain.Dividend@3e2f8595, com.hayan.dividend.domain.Dividend@2b9bcb4e, com.hayan.dividend.domain.Dividend@3bb86bcc, com.hayan.dividend.domain.Dividend@387a21d9, com.hayan.dividend.domain.Dividend@7abb186e, com.hayan.dividend.domain.Dividend@f0f6dcc, com.hayan.dividend.domain.Dividend@779181ea, com.hayan.dividend.domain.Dividend@1e8c1228, com.hayan.dividend.domain.Dividend@3c5601ff, com.hayan.dividend.domain.Dividend@48437ab4, com.hayan.dividend.domain.Dividend@33262c87, com.hayan.dividend.domain.Dividend@4d456599, com.hayan.dividend.domain.Dividend@4110cc37, com.hayan.dividend.domain.Dividend@1255887b, com.hayan.dividend.domain.Dividend@1015cca2, com.hayan.dividend.domain.Dividend@761a1a94, com.hayan.dividend.domain.Dividend@31ac0114, com.hayan.dividend.domain.Dividend@f84410a, com.hayan.dividend.domain.Dividend@31caec84, com.hayan.dividend.domain.Dividend@17229e93, com.hayan.dividend.domain.Dividend@46d799c2, com.hayan.dividend.domain.Dividend@6b760c03, com.hayan.dividend.domain.Dividend@dbe6325, com.hayan.dividend.domain.Dividend@e6bb207, com.hayan.dividend.domain.Dividend@74882381, com.hayan.dividend.domain.Dividend@2f453f07, com.hayan.dividend.domain.Dividend@511cd681, com.hayan.dividend.domain.Dividend@2b4bd2f, com.hayan.dividend.domain.Dividend@379512d3, com.hayan.dividend.domain.Dividend@312eae21, com.hayan.dividend.domain.Dividend@6b1de5b, com.hayan.dividend.domain.Dividend@21cb4667, com.hayan.dividend.domain.Dividend@3e57cb07, com.hayan.dividend.domain.Dividend@7a4c254a, com.hayan.dividend.domain.Dividend@72877f5e, com.hayan.dividend.domain.Dividend@904f717, com.hayan.dividend.domain.Dividend@90b0ac3, com.hayan.dividend.domain.Dividend@12f618dd, com.hayan.dividend.domain.Dividend@5bc2f852, com.hayan.dividend.domain.Dividend@75501072, com.hayan.dividend.domain.Dividend@245c4109, com.hayan.dividend.domain.Dividend@64e95af, com.hayan.dividend.domain.Dividend@4a82ed5c, com.hayan.dividend.domain.Dividend@3f24b7fe, com.hayan.dividend.domain.Dividend@7936ed1a, com.hayan.dividend.domain.Dividend@b27ec7e, com.hayan.dividend.domain.Dividend@5692184b, com.hayan.dividend.domain.Dividend@4c13de20, com.hayan.dividend.domain.Dividend@283a485, com.hayan.dividend.domain.Dividend@3673fcb7, com.hayan.dividend.domain.Dividend@7065fa72, com.hayan.dividend.domain.Dividend@22d5d880, com.hayan.dividend.domain.Dividend@3d6de7d3, com.hayan.dividend.domain.Dividend@14d2228d, com.hayan.dividend.domain.Dividend@4bbbec0f, com.hayan.dividend.domain.Dividend@47a62c20, com.hayan.dividend.domain.Dividend@15270878, com.hayan.dividend.domain.Dividend@10e4961b, com.hayan.dividend.domain.Dividend@4abcb9c, com.hayan.dividend.domain.Dividend@721a2005, com.hayan.dividend.domain.Dividend@5fd382f6, com.hayan.dividend.domain.Dividend@6b338359, com.hayan.dividend.domain.Dividend@319e5288, com.hayan.dividend.domain.Dividend@122746b6, com.hayan.dividend.domain.Dividend@51a0a236, com.hayan.dividend.domain.Dividend@267eda10, com.hayan.dividend.domain.Dividend@65b7c645, com.hayan.dividend.domain.Dividend@4d0d3eb3, com.hayan.dividend.domain.Dividend@19689436, com.hayan.dividend.domain.Dividend@49167351, com.hayan.dividend.domain.Dividend@12c811d8, com.hayan.dividend.domain.Dividend@36144d94, com.hayan.dividend.domain.Dividend@6b00a644, com.hayan.dividend.domain.Dividend@1176cc8e, com.hayan.dividend.domain.Dividend@436259a9, com.hayan.dividend.domain.Dividend@578ec4bc, com.hayan.dividend.domain.Dividend@39526a8f, com.hayan.dividend.domain.Dividend@1ee7c397, com.hayan.dividend.domain.Dividend@4f196ef3, com.hayan.dividend.domain.Dividend@6e13f888, com.hayan.dividend.domain.Dividend@44bfe1d7, com.hayan.dividend.domain.Dividend@64e479ac, com.hayan.dividend.domain.Dividend@608eed35, com.hayan.dividend.domain.Dividend@11a88e14, com.hayan.dividend.domain.Dividend@2a2274af, com.hayan.dividend.domain.Dividend@6d4c515e, com.hayan.dividend.domain.Dividend@7abcee87, com.hayan.dividend.domain.Dividend@2fb107ea, com.hayan.dividend.domain.Dividend@168f89bf, com.hayan.dividend.domain.Dividend@19c6fc91, com.hayan.dividend.domain.Dividend@413e1f8, com.hayan.dividend.domain.Dividend@233a38c7, com.hayan.dividend.domain.Dividend@49129f6e, com.hayan.dividend.domain.Dividend@671ec0a9, com.hayan.dividend.domain.Dividend@7c99f193, com.hayan.dividend.domain.Dividend@e1712c7, com.hayan.dividend.domain.Dividend@53230584, com.hayan.dividend.domain.Dividend@42a99cc1, com.hayan.dividend.domain.Dividend@718ff86e, com.hayan.dividend.domain.Dividend@47384db2, com.hayan.dividend.domain.Dividend@c7c7ff4, com.hayan.dividend.domain.Dividend@2bdb52e, com.hayan.dividend.domain.Dividend@c7f719f, com.hayan.dividend.domain.Dividend@92fe87f, com.hayan.dividend.domain.Dividend@66c3a571, com.hayan.dividend.domain.Dividend@9386842, com.hayan.dividend.domain.Dividend@7ebc1373, com.hayan.dividend.domain.Dividend@82660cb, com.hayan.dividend.domain.Dividend@7335b493, com.hayan.dividend.domain.Dividend@3985b8cf, com.hayan.dividend.domain.Dividend@273c0307, com.hayan.dividend.domain.Dividend@1ca71f13, com.hayan.dividend.domain.Dividend@42e8b138, com.hayan.dividend.domain.Dividend@563f3a6a, com.hayan.dividend.domain.Dividend@11dc3f91, com.hayan.dividend.domain.Dividend@3527e53e, com.hayan.dividend.domain.Dividend@3241e3d3, com.hayan.dividend.domain.Dividend@1d82739b, com.hayan.dividend.domain.Dividend@6d52f70d, com.hayan.dividend.domain.Dividend@67d6e18c, com.hayan.dividend.domain.Dividend@5a34d9de, com.hayan.dividend.domain.Dividend@54a467a8, com.hayan.dividend.domain.Dividend@2eb408ae, com.hayan.dividend.domain.Dividend@7e3e5675, com.hayan.dividend.domain.Dividend@2388a45, com.hayan.dividend.domain.Dividend@7556248d, com.hayan.dividend.domain.Dividend@7b29a3f1, com.hayan.dividend.domain.Dividend@7728cf1f, com.hayan.dividend.domain.Dividend@3104091d, com.hayan.dividend.domain.Dividend@75b231fc, com.hayan.dividend.domain.Dividend@43323290, com.hayan.dividend.domain.Dividend@72535dde, com.hayan.dividend.domain.Dividend@630efe68, com.hayan.dividend.domain.Dividend@7571e24, com.hayan.dividend.domain.Dividend@55230aec, com.hayan.dividend.domain.Dividend@3d76003b, com.hayan.dividend.domain.Dividend@299f4443, com.hayan.dividend.domain.Dividend@1686d96a, com.hayan.dividend.domain.Dividend@5b3fd53c, com.hayan.dividend.domain.Dividend@56c571b8, com.hayan.dividend.domain.Dividend@5ab8a7f, com.hayan.dividend.domain.Dividend@25464e29, com.hayan.dividend.domain.Dividend@75f988, com.hayan.dividend.domain.Dividend@7dc0008f, com.hayan.dividend.domain.Dividend@2461953a, com.hayan.dividend.domain.Dividend@33c1b099, com.hayan.dividend.domain.Dividend@1cd7b6d0, com.hayan.dividend.domain.Dividend@61ee19bd, com.hayan.dividend.domain.Dividend@498e98ff, com.hayan.dividend.domain.Dividend@77f5bc2f, com.hayan.dividend.domain.Dividend@56b5f537, com.hayan.dividend.domain.Dividend@47873dad, com.hayan.dividend.domain.Dividend@7a730cc2]]
2024-09-04 08:11:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:11:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 21 ms
2024-09-04 08:11:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:11:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3289 ms
2024-09-04 08:11:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@4f1c53f
2024-09-04 08:11:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3290 ms
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 7 ms
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:11:16 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:11:16 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 7 ms
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-04 08:11:16 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:11:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-04 08:11:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@2074e66e
2024-09-04 08:11:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1507 ms
2024-09-04 08:11:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@2074e66e]
2024-09-04 08:11:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@6ab556ff, com.hayan.dividend.domain.Dividend@6d758a51, com.hayan.dividend.domain.Dividend@67c2eece, com.hayan.dividend.domain.Dividend@491b9bfd, com.hayan.dividend.domain.Dividend@9d92e8f, com.hayan.dividend.domain.Dividend@48bf0ae7, com.hayan.dividend.domain.Dividend@38fb29a0, com.hayan.dividend.domain.Dividend@2d2a8931, com.hayan.dividend.domain.Dividend@6d47674d, com.hayan.dividend.domain.Dividend@5d1fb030, com.hayan.dividend.domain.Dividend@3cc8341a, com.hayan.dividend.domain.Dividend@455241b3, com.hayan.dividend.domain.Dividend@13793b5b, com.hayan.dividend.domain.Dividend@33c79734, com.hayan.dividend.domain.Dividend@4e521db2, com.hayan.dividend.domain.Dividend@19da8212, com.hayan.dividend.domain.Dividend@43a3c191, com.hayan.dividend.domain.Dividend@4cd290e6, com.hayan.dividend.domain.Dividend@1233bb43, com.hayan.dividend.domain.Dividend@5f347105, com.hayan.dividend.domain.Dividend@2469c3b, com.hayan.dividend.domain.Dividend@5a4b7935, com.hayan.dividend.domain.Dividend@55ad289c, com.hayan.dividend.domain.Dividend@29edd775, com.hayan.dividend.domain.Dividend@1ffc3137, com.hayan.dividend.domain.Dividend@1eff712c, com.hayan.dividend.domain.Dividend@22aa53a7, com.hayan.dividend.domain.Dividend@65bb6ef8, com.hayan.dividend.domain.Dividend@1bb08ef1, com.hayan.dividend.domain.Dividend@7e23faba, com.hayan.dividend.domain.Dividend@ee4a9b2, com.hayan.dividend.domain.Dividend@3016da38, com.hayan.dividend.domain.Dividend@2fce0dcd, com.hayan.dividend.domain.Dividend@4e59c4a4, com.hayan.dividend.domain.Dividend@655b4de4, com.hayan.dividend.domain.Dividend@639a9c6d, com.hayan.dividend.domain.Dividend@3ce555b6, com.hayan.dividend.domain.Dividend@3c99da6a, com.hayan.dividend.domain.Dividend@3129470, com.hayan.dividend.domain.Dividend@34dc198b, com.hayan.dividend.domain.Dividend@2202a243, com.hayan.dividend.domain.Dividend@503a66e3, com.hayan.dividend.domain.Dividend@471cc980, com.hayan.dividend.domain.Dividend@135880a9, com.hayan.dividend.domain.Dividend@247f383b, com.hayan.dividend.domain.Dividend@27f15f29, com.hayan.dividend.domain.Dividend@680c29e, com.hayan.dividend.domain.Dividend@518a572f, com.hayan.dividend.domain.Dividend@c6903c5, com.hayan.dividend.domain.Dividend@21cc1d76, com.hayan.dividend.domain.Dividend@2158afe3]
2024-09-04 08:11:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1131 ms
2024-09-04 08:11:19 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:11:19 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@6ab556ff, com.hayan.dividend.domain.Dividend@6d758a51, com.hayan.dividend.domain.Dividend@67c2eece, com.hayan.dividend.domain.Dividend@491b9bfd, com.hayan.dividend.domain.Dividend@9d92e8f, com.hayan.dividend.domain.Dividend@48bf0ae7, com.hayan.dividend.domain.Dividend@38fb29a0, com.hayan.dividend.domain.Dividend@2d2a8931, com.hayan.dividend.domain.Dividend@6d47674d, com.hayan.dividend.domain.Dividend@5d1fb030, com.hayan.dividend.domain.Dividend@3cc8341a, com.hayan.dividend.domain.Dividend@455241b3, com.hayan.dividend.domain.Dividend@13793b5b, com.hayan.dividend.domain.Dividend@33c79734, com.hayan.dividend.domain.Dividend@4e521db2, com.hayan.dividend.domain.Dividend@19da8212, com.hayan.dividend.domain.Dividend@43a3c191, com.hayan.dividend.domain.Dividend@4cd290e6, com.hayan.dividend.domain.Dividend@1233bb43, com.hayan.dividend.domain.Dividend@5f347105, com.hayan.dividend.domain.Dividend@2469c3b, com.hayan.dividend.domain.Dividend@5a4b7935, com.hayan.dividend.domain.Dividend@55ad289c, com.hayan.dividend.domain.Dividend@29edd775, com.hayan.dividend.domain.Dividend@1ffc3137, com.hayan.dividend.domain.Dividend@1eff712c, com.hayan.dividend.domain.Dividend@22aa53a7, com.hayan.dividend.domain.Dividend@65bb6ef8, com.hayan.dividend.domain.Dividend@1bb08ef1, com.hayan.dividend.domain.Dividend@7e23faba, com.hayan.dividend.domain.Dividend@ee4a9b2, com.hayan.dividend.domain.Dividend@3016da38, com.hayan.dividend.domain.Dividend@2fce0dcd, com.hayan.dividend.domain.Dividend@4e59c4a4, com.hayan.dividend.domain.Dividend@655b4de4, com.hayan.dividend.domain.Dividend@639a9c6d, com.hayan.dividend.domain.Dividend@3ce555b6, com.hayan.dividend.domain.Dividend@3c99da6a, com.hayan.dividend.domain.Dividend@3129470, com.hayan.dividend.domain.Dividend@34dc198b, com.hayan.dividend.domain.Dividend@2202a243, com.hayan.dividend.domain.Dividend@503a66e3, com.hayan.dividend.domain.Dividend@471cc980, com.hayan.dividend.domain.Dividend@135880a9, com.hayan.dividend.domain.Dividend@247f383b, com.hayan.dividend.domain.Dividend@27f15f29, com.hayan.dividend.domain.Dividend@680c29e, com.hayan.dividend.domain.Dividend@518a572f, com.hayan.dividend.domain.Dividend@c6903c5, com.hayan.dividend.domain.Dividend@21cc1d76, com.hayan.dividend.domain.Dividend@2158afe3]]
2024-09-04 08:11:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:11:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 9 ms
2024-09-04 08:11:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:11:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2654 ms
2024-09-04 08:11:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@3bfd4740
2024-09-04 08:11:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2655 ms
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:11:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:11:22 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [bb]
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [bb]
2024-09-04 08:11:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:11:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [bb]
2024-09-04 08:11:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@1a1a9106
2024-09-04 08:11:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1341 ms
2024-09-04 08:11:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@1a1a9106]
2024-09-04 08:11:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-04 08:11:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-04 08:11:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 2 ms
2024-09-04 08:11:24 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:11:30 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:11:30 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [coke]
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [coke]
2024-09-04 08:11:30 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:11:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [coke]
2024-09-04 08:11:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@45959833
2024-09-04 08:11:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1881 ms
2024-09-04 08:11:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@45959833]
2024-09-04 08:11:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@664fba33, com.hayan.dividend.domain.Dividend@f72e2c9, com.hayan.dividend.domain.Dividend@280b65ec, com.hayan.dividend.domain.Dividend@45295feb, com.hayan.dividend.domain.Dividend@5eacfb5f, com.hayan.dividend.domain.Dividend@46502ee9, com.hayan.dividend.domain.Dividend@350707ca, com.hayan.dividend.domain.Dividend@3a5ed086, com.hayan.dividend.domain.Dividend@391b291, com.hayan.dividend.domain.Dividend@4471f36c, com.hayan.dividend.domain.Dividend@4945857f, com.hayan.dividend.domain.Dividend@5d3a631, com.hayan.dividend.domain.Dividend@b588920, com.hayan.dividend.domain.Dividend@40f9f1b4, com.hayan.dividend.domain.Dividend@2572eaa9, com.hayan.dividend.domain.Dividend@3d883218, com.hayan.dividend.domain.Dividend@7256bd00, com.hayan.dividend.domain.Dividend@7dad96af, com.hayan.dividend.domain.Dividend@4fb80c11, com.hayan.dividend.domain.Dividend@335cff0c, com.hayan.dividend.domain.Dividend@7425fada, com.hayan.dividend.domain.Dividend@65ac121f, com.hayan.dividend.domain.Dividend@6a7b423f, com.hayan.dividend.domain.Dividend@3e0b74e3, com.hayan.dividend.domain.Dividend@6523bad2, com.hayan.dividend.domain.Dividend@601a6083, com.hayan.dividend.domain.Dividend@50c0bc05, com.hayan.dividend.domain.Dividend@35896692, com.hayan.dividend.domain.Dividend@4d04bfdb, com.hayan.dividend.domain.Dividend@7ea9d080, com.hayan.dividend.domain.Dividend@2b5c7bc4, com.hayan.dividend.domain.Dividend@559f35cb, com.hayan.dividend.domain.Dividend@3d0da2c4, com.hayan.dividend.domain.Dividend@d905835, com.hayan.dividend.domain.Dividend@45da9018, com.hayan.dividend.domain.Dividend@6947c405, com.hayan.dividend.domain.Dividend@390c406b, com.hayan.dividend.domain.Dividend@3652f68f, com.hayan.dividend.domain.Dividend@2799ea0d, com.hayan.dividend.domain.Dividend@70296517, com.hayan.dividend.domain.Dividend@2bfd6c61, com.hayan.dividend.domain.Dividend@a3a011f, com.hayan.dividend.domain.Dividend@621b4bd7, com.hayan.dividend.domain.Dividend@59a18b5e, com.hayan.dividend.domain.Dividend@19ff7a6f, com.hayan.dividend.domain.Dividend@4317a2b6, com.hayan.dividend.domain.Dividend@7b6a1cf0, com.hayan.dividend.domain.Dividend@2ec493b8, com.hayan.dividend.domain.Dividend@4c8ab80d, com.hayan.dividend.domain.Dividend@3276a138, com.hayan.dividend.domain.Dividend@19d0a61a, com.hayan.dividend.domain.Dividend@1383bfcb, com.hayan.dividend.domain.Dividend@ad03766, com.hayan.dividend.domain.Dividend@da83865, com.hayan.dividend.domain.Dividend@1154bfbc, com.hayan.dividend.domain.Dividend@1fa737ba, com.hayan.dividend.domain.Dividend@14c7582f, com.hayan.dividend.domain.Dividend@586021c2, com.hayan.dividend.domain.Dividend@6cfdcc2d, com.hayan.dividend.domain.Dividend@4ac12cef, com.hayan.dividend.domain.Dividend@64e913b8, com.hayan.dividend.domain.Dividend@3d5e50d6, com.hayan.dividend.domain.Dividend@3fc06ff4, com.hayan.dividend.domain.Dividend@7ca59ab7, com.hayan.dividend.domain.Dividend@507d2248, com.hayan.dividend.domain.Dividend@1f6a1071, com.hayan.dividend.domain.Dividend@23e973a7, com.hayan.dividend.domain.Dividend@7349354f, com.hayan.dividend.domain.Dividend@4a9f360c, com.hayan.dividend.domain.Dividend@5b95eb6, com.hayan.dividend.domain.Dividend@6d2561ed, com.hayan.dividend.domain.Dividend@57fcd24b, com.hayan.dividend.domain.Dividend@64e0b1ee, com.hayan.dividend.domain.Dividend@2b630f2a, com.hayan.dividend.domain.Dividend@6d8f29a2, com.hayan.dividend.domain.Dividend@5cd0d0d2, com.hayan.dividend.domain.Dividend@3d5e6567, com.hayan.dividend.domain.Dividend@e7727b9, com.hayan.dividend.domain.Dividend@1a21ddec, com.hayan.dividend.domain.Dividend@402dd83a, com.hayan.dividend.domain.Dividend@e96e805, com.hayan.dividend.domain.Dividend@396b4c81, com.hayan.dividend.domain.Dividend@2d3128fd, com.hayan.dividend.domain.Dividend@373c969, com.hayan.dividend.domain.Dividend@3a1ccfc2, com.hayan.dividend.domain.Dividend@59f08344, com.hayan.dividend.domain.Dividend@7d222e47, com.hayan.dividend.domain.Dividend@6007980b, com.hayan.dividend.domain.Dividend@3cb92916, com.hayan.dividend.domain.Dividend@610e7766, com.hayan.dividend.domain.Dividend@d322d16, com.hayan.dividend.domain.Dividend@51a93b7b, com.hayan.dividend.domain.Dividend@242d49c1, com.hayan.dividend.domain.Dividend@360aaf65, com.hayan.dividend.domain.Dividend@2a4c6e2f, com.hayan.dividend.domain.Dividend@32a6fafe, com.hayan.dividend.domain.Dividend@7c0bce2a, com.hayan.dividend.domain.Dividend@1f193749, com.hayan.dividend.domain.Dividend@566d1f93, com.hayan.dividend.domain.Dividend@53996eaa, com.hayan.dividend.domain.Dividend@71c1906d, com.hayan.dividend.domain.Dividend@27b45263, com.hayan.dividend.domain.Dividend@191b4081, com.hayan.dividend.domain.Dividend@1ef9136, com.hayan.dividend.domain.Dividend@7c502b9e, com.hayan.dividend.domain.Dividend@79f2593d, com.hayan.dividend.domain.Dividend@3a2e01ca, com.hayan.dividend.domain.Dividend@47355198, com.hayan.dividend.domain.Dividend@3a449e3b, com.hayan.dividend.domain.Dividend@519403ff, com.hayan.dividend.domain.Dividend@1b7e7856, com.hayan.dividend.domain.Dividend@76aa4330, com.hayan.dividend.domain.Dividend@6881ae98, com.hayan.dividend.domain.Dividend@19fbd38c, com.hayan.dividend.domain.Dividend@712fb42d, com.hayan.dividend.domain.Dividend@5538dafb, com.hayan.dividend.domain.Dividend@30a84baa, com.hayan.dividend.domain.Dividend@77889980, com.hayan.dividend.domain.Dividend@7b8ac580, com.hayan.dividend.domain.Dividend@68f63708, com.hayan.dividend.domain.Dividend@1a71d4a7, com.hayan.dividend.domain.Dividend@29060af0, com.hayan.dividend.domain.Dividend@40d6c95, com.hayan.dividend.domain.Dividend@5d9a456b, com.hayan.dividend.domain.Dividend@49da7693, com.hayan.dividend.domain.Dividend@5092b4d2, com.hayan.dividend.domain.Dividend@3f140391, com.hayan.dividend.domain.Dividend@302aa805, com.hayan.dividend.domain.Dividend@2a5e3e7d, com.hayan.dividend.domain.Dividend@6f2f3bc0, com.hayan.dividend.domain.Dividend@70b8a53f, com.hayan.dividend.domain.Dividend@153741ad, com.hayan.dividend.domain.Dividend@4ec128a0, com.hayan.dividend.domain.Dividend@58a6fb83, com.hayan.dividend.domain.Dividend@6d823cf5, com.hayan.dividend.domain.Dividend@429732c1, com.hayan.dividend.domain.Dividend@5d4861b, com.hayan.dividend.domain.Dividend@6ac11fc1, com.hayan.dividend.domain.Dividend@1658e3f8, com.hayan.dividend.domain.Dividend@6d22cac8, com.hayan.dividend.domain.Dividend@4c676d29, com.hayan.dividend.domain.Dividend@2e3a4c73, com.hayan.dividend.domain.Dividend@7f2c2d6f, com.hayan.dividend.domain.Dividend@4a3dcc8, com.hayan.dividend.domain.Dividend@73dae750, com.hayan.dividend.domain.Dividend@f7f748c, com.hayan.dividend.domain.Dividend@11266759, com.hayan.dividend.domain.Dividend@bf9bc29, com.hayan.dividend.domain.Dividend@2f3d2a61, com.hayan.dividend.domain.Dividend@5b12f01e, com.hayan.dividend.domain.Dividend@792c488a]
2024-09-04 08:11:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1357 ms
2024-09-04 08:11:33 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:11:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@664fba33, com.hayan.dividend.domain.Dividend@f72e2c9, com.hayan.dividend.domain.Dividend@280b65ec, com.hayan.dividend.domain.Dividend@45295feb, com.hayan.dividend.domain.Dividend@5eacfb5f, com.hayan.dividend.domain.Dividend@46502ee9, com.hayan.dividend.domain.Dividend@350707ca, com.hayan.dividend.domain.Dividend@3a5ed086, com.hayan.dividend.domain.Dividend@391b291, com.hayan.dividend.domain.Dividend@4471f36c, com.hayan.dividend.domain.Dividend@4945857f, com.hayan.dividend.domain.Dividend@5d3a631, com.hayan.dividend.domain.Dividend@b588920, com.hayan.dividend.domain.Dividend@40f9f1b4, com.hayan.dividend.domain.Dividend@2572eaa9, com.hayan.dividend.domain.Dividend@3d883218, com.hayan.dividend.domain.Dividend@7256bd00, com.hayan.dividend.domain.Dividend@7dad96af, com.hayan.dividend.domain.Dividend@4fb80c11, com.hayan.dividend.domain.Dividend@335cff0c, com.hayan.dividend.domain.Dividend@7425fada, com.hayan.dividend.domain.Dividend@65ac121f, com.hayan.dividend.domain.Dividend@6a7b423f, com.hayan.dividend.domain.Dividend@3e0b74e3, com.hayan.dividend.domain.Dividend@6523bad2, com.hayan.dividend.domain.Dividend@601a6083, com.hayan.dividend.domain.Dividend@50c0bc05, com.hayan.dividend.domain.Dividend@35896692, com.hayan.dividend.domain.Dividend@4d04bfdb, com.hayan.dividend.domain.Dividend@7ea9d080, com.hayan.dividend.domain.Dividend@2b5c7bc4, com.hayan.dividend.domain.Dividend@559f35cb, com.hayan.dividend.domain.Dividend@3d0da2c4, com.hayan.dividend.domain.Dividend@d905835, com.hayan.dividend.domain.Dividend@45da9018, com.hayan.dividend.domain.Dividend@6947c405, com.hayan.dividend.domain.Dividend@390c406b, com.hayan.dividend.domain.Dividend@3652f68f, com.hayan.dividend.domain.Dividend@2799ea0d, com.hayan.dividend.domain.Dividend@70296517, com.hayan.dividend.domain.Dividend@2bfd6c61, com.hayan.dividend.domain.Dividend@a3a011f, com.hayan.dividend.domain.Dividend@621b4bd7, com.hayan.dividend.domain.Dividend@59a18b5e, com.hayan.dividend.domain.Dividend@19ff7a6f, com.hayan.dividend.domain.Dividend@4317a2b6, com.hayan.dividend.domain.Dividend@7b6a1cf0, com.hayan.dividend.domain.Dividend@2ec493b8, com.hayan.dividend.domain.Dividend@4c8ab80d, com.hayan.dividend.domain.Dividend@3276a138, com.hayan.dividend.domain.Dividend@19d0a61a, com.hayan.dividend.domain.Dividend@1383bfcb, com.hayan.dividend.domain.Dividend@ad03766, com.hayan.dividend.domain.Dividend@da83865, com.hayan.dividend.domain.Dividend@1154bfbc, com.hayan.dividend.domain.Dividend@1fa737ba, com.hayan.dividend.domain.Dividend@14c7582f, com.hayan.dividend.domain.Dividend@586021c2, com.hayan.dividend.domain.Dividend@6cfdcc2d, com.hayan.dividend.domain.Dividend@4ac12cef, com.hayan.dividend.domain.Dividend@64e913b8, com.hayan.dividend.domain.Dividend@3d5e50d6, com.hayan.dividend.domain.Dividend@3fc06ff4, com.hayan.dividend.domain.Dividend@7ca59ab7, com.hayan.dividend.domain.Dividend@507d2248, com.hayan.dividend.domain.Dividend@1f6a1071, com.hayan.dividend.domain.Dividend@23e973a7, com.hayan.dividend.domain.Dividend@7349354f, com.hayan.dividend.domain.Dividend@4a9f360c, com.hayan.dividend.domain.Dividend@5b95eb6, com.hayan.dividend.domain.Dividend@6d2561ed, com.hayan.dividend.domain.Dividend@57fcd24b, com.hayan.dividend.domain.Dividend@64e0b1ee, com.hayan.dividend.domain.Dividend@2b630f2a, com.hayan.dividend.domain.Dividend@6d8f29a2, com.hayan.dividend.domain.Dividend@5cd0d0d2, com.hayan.dividend.domain.Dividend@3d5e6567, com.hayan.dividend.domain.Dividend@e7727b9, com.hayan.dividend.domain.Dividend@1a21ddec, com.hayan.dividend.domain.Dividend@402dd83a, com.hayan.dividend.domain.Dividend@e96e805, com.hayan.dividend.domain.Dividend@396b4c81, com.hayan.dividend.domain.Dividend@2d3128fd, com.hayan.dividend.domain.Dividend@373c969, com.hayan.dividend.domain.Dividend@3a1ccfc2, com.hayan.dividend.domain.Dividend@59f08344, com.hayan.dividend.domain.Dividend@7d222e47, com.hayan.dividend.domain.Dividend@6007980b, com.hayan.dividend.domain.Dividend@3cb92916, com.hayan.dividend.domain.Dividend@610e7766, com.hayan.dividend.domain.Dividend@d322d16, com.hayan.dividend.domain.Dividend@51a93b7b, com.hayan.dividend.domain.Dividend@242d49c1, com.hayan.dividend.domain.Dividend@360aaf65, com.hayan.dividend.domain.Dividend@2a4c6e2f, com.hayan.dividend.domain.Dividend@32a6fafe, com.hayan.dividend.domain.Dividend@7c0bce2a, com.hayan.dividend.domain.Dividend@1f193749, com.hayan.dividend.domain.Dividend@566d1f93, com.hayan.dividend.domain.Dividend@53996eaa, com.hayan.dividend.domain.Dividend@71c1906d, com.hayan.dividend.domain.Dividend@27b45263, com.hayan.dividend.domain.Dividend@191b4081, com.hayan.dividend.domain.Dividend@1ef9136, com.hayan.dividend.domain.Dividend@7c502b9e, com.hayan.dividend.domain.Dividend@79f2593d, com.hayan.dividend.domain.Dividend@3a2e01ca, com.hayan.dividend.domain.Dividend@47355198, com.hayan.dividend.domain.Dividend@3a449e3b, com.hayan.dividend.domain.Dividend@519403ff, com.hayan.dividend.domain.Dividend@1b7e7856, com.hayan.dividend.domain.Dividend@76aa4330, com.hayan.dividend.domain.Dividend@6881ae98, com.hayan.dividend.domain.Dividend@19fbd38c, com.hayan.dividend.domain.Dividend@712fb42d, com.hayan.dividend.domain.Dividend@5538dafb, com.hayan.dividend.domain.Dividend@30a84baa, com.hayan.dividend.domain.Dividend@77889980, com.hayan.dividend.domain.Dividend@7b8ac580, com.hayan.dividend.domain.Dividend@68f63708, com.hayan.dividend.domain.Dividend@1a71d4a7, com.hayan.dividend.domain.Dividend@29060af0, com.hayan.dividend.domain.Dividend@40d6c95, com.hayan.dividend.domain.Dividend@5d9a456b, com.hayan.dividend.domain.Dividend@49da7693, com.hayan.dividend.domain.Dividend@5092b4d2, com.hayan.dividend.domain.Dividend@3f140391, com.hayan.dividend.domain.Dividend@302aa805, com.hayan.dividend.domain.Dividend@2a5e3e7d, com.hayan.dividend.domain.Dividend@6f2f3bc0, com.hayan.dividend.domain.Dividend@70b8a53f, com.hayan.dividend.domain.Dividend@153741ad, com.hayan.dividend.domain.Dividend@4ec128a0, com.hayan.dividend.domain.Dividend@58a6fb83, com.hayan.dividend.domain.Dividend@6d823cf5, com.hayan.dividend.domain.Dividend@429732c1, com.hayan.dividend.domain.Dividend@5d4861b, com.hayan.dividend.domain.Dividend@6ac11fc1, com.hayan.dividend.domain.Dividend@1658e3f8, com.hayan.dividend.domain.Dividend@6d22cac8, com.hayan.dividend.domain.Dividend@4c676d29, com.hayan.dividend.domain.Dividend@2e3a4c73, com.hayan.dividend.domain.Dividend@7f2c2d6f, com.hayan.dividend.domain.Dividend@4a3dcc8, com.hayan.dividend.domain.Dividend@73dae750, com.hayan.dividend.domain.Dividend@f7f748c, com.hayan.dividend.domain.Dividend@11266759, com.hayan.dividend.domain.Dividend@bf9bc29, com.hayan.dividend.domain.Dividend@2f3d2a61, com.hayan.dividend.domain.Dividend@5b12f01e, com.hayan.dividend.domain.Dividend@792c488a]]
2024-09-04 08:11:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:11:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 12 ms
2024-09-04 08:11:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:11:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3256 ms
2024-09-04 08:11:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@76ef1089
2024-09-04 08:11:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3259 ms
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 5 ms
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:11:35 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:11:35 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [tslr]
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [tslr]
2024-09-04 08:11:35 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:11:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [tslr]
2024-09-04 08:11:38 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@3e6a0d7
2024-09-04 08:11:38 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 2541 ms
2024-09-04 08:11:38 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@3e6a0d7]
2024-09-04 08:11:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-04 08:11:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1546 ms
2024-09-04 08:11:39 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:11:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-04 08:11:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:11:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 1 ms
2024-09-04 08:11:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:11:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 4091 ms
2024-09-04 08:11:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@75ae663c
2024-09-04 08:11:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 4091 ms
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 17 ms
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:12:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:12:05 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 11 ms
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [nvda]
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [nvda]
2024-09-04 08:12:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:12:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [nvda]
2024-09-04 08:12:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@de8837b
2024-09-04 08:12:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1266 ms
2024-09-04 08:12:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@de8837b]
2024-09-04 08:12:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@64e13c93, com.hayan.dividend.domain.Dividend@2d5b982f, com.hayan.dividend.domain.Dividend@11445b71, com.hayan.dividend.domain.Dividend@5f6482ed, com.hayan.dividend.domain.Dividend@320c2836, com.hayan.dividend.domain.Dividend@436754b8, com.hayan.dividend.domain.Dividend@704b0076, com.hayan.dividend.domain.Dividend@b439778, com.hayan.dividend.domain.Dividend@585d43be, com.hayan.dividend.domain.Dividend@21661e99, com.hayan.dividend.domain.Dividend@906f273, com.hayan.dividend.domain.Dividend@1ee94c7c, com.hayan.dividend.domain.Dividend@2c1bacac, com.hayan.dividend.domain.Dividend@3d18ed60, com.hayan.dividend.domain.Dividend@33305da, com.hayan.dividend.domain.Dividend@576d236c, com.hayan.dividend.domain.Dividend@26e28be1, com.hayan.dividend.domain.Dividend@5ceb11b0, com.hayan.dividend.domain.Dividend@476dd222, com.hayan.dividend.domain.Dividend@79a5ffe0, com.hayan.dividend.domain.Dividend@4b2aceb6, com.hayan.dividend.domain.Dividend@4f4830f2, com.hayan.dividend.domain.Dividend@661d07fb, com.hayan.dividend.domain.Dividend@3011be27, com.hayan.dividend.domain.Dividend@2d5389ed, com.hayan.dividend.domain.Dividend@2392f315, com.hayan.dividend.domain.Dividend@2dbe1a43, com.hayan.dividend.domain.Dividend@10636955, com.hayan.dividend.domain.Dividend@214e8655, com.hayan.dividend.domain.Dividend@1570c332, com.hayan.dividend.domain.Dividend@4841bfdd, com.hayan.dividend.domain.Dividend@43e34e41, com.hayan.dividend.domain.Dividend@164a1446, com.hayan.dividend.domain.Dividend@5303cee, com.hayan.dividend.domain.Dividend@404ac4c2, com.hayan.dividend.domain.Dividend@19821bcc, com.hayan.dividend.domain.Dividend@5facd49e, com.hayan.dividend.domain.Dividend@5b7f54c9, com.hayan.dividend.domain.Dividend@4d05f7b0, com.hayan.dividend.domain.Dividend@4450c9a7, com.hayan.dividend.domain.Dividend@7de1fd97, com.hayan.dividend.domain.Dividend@5c1937fe, com.hayan.dividend.domain.Dividend@3e43f3ba, com.hayan.dividend.domain.Dividend@7c1c0824, com.hayan.dividend.domain.Dividend@e635f75, com.hayan.dividend.domain.Dividend@1b502f80, com.hayan.dividend.domain.Dividend@3a2fd173]
2024-09-04 08:12:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 976 ms
2024-09-04 08:12:07 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:12:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@64e13c93, com.hayan.dividend.domain.Dividend@2d5b982f, com.hayan.dividend.domain.Dividend@11445b71, com.hayan.dividend.domain.Dividend@5f6482ed, com.hayan.dividend.domain.Dividend@320c2836, com.hayan.dividend.domain.Dividend@436754b8, com.hayan.dividend.domain.Dividend@704b0076, com.hayan.dividend.domain.Dividend@b439778, com.hayan.dividend.domain.Dividend@585d43be, com.hayan.dividend.domain.Dividend@21661e99, com.hayan.dividend.domain.Dividend@906f273, com.hayan.dividend.domain.Dividend@1ee94c7c, com.hayan.dividend.domain.Dividend@2c1bacac, com.hayan.dividend.domain.Dividend@3d18ed60, com.hayan.dividend.domain.Dividend@33305da, com.hayan.dividend.domain.Dividend@576d236c, com.hayan.dividend.domain.Dividend@26e28be1, com.hayan.dividend.domain.Dividend@5ceb11b0, com.hayan.dividend.domain.Dividend@476dd222, com.hayan.dividend.domain.Dividend@79a5ffe0, com.hayan.dividend.domain.Dividend@4b2aceb6, com.hayan.dividend.domain.Dividend@4f4830f2, com.hayan.dividend.domain.Dividend@661d07fb, com.hayan.dividend.domain.Dividend@3011be27, com.hayan.dividend.domain.Dividend@2d5389ed, com.hayan.dividend.domain.Dividend@2392f315, com.hayan.dividend.domain.Dividend@2dbe1a43, com.hayan.dividend.domain.Dividend@10636955, com.hayan.dividend.domain.Dividend@214e8655, com.hayan.dividend.domain.Dividend@1570c332, com.hayan.dividend.domain.Dividend@4841bfdd, com.hayan.dividend.domain.Dividend@43e34e41, com.hayan.dividend.domain.Dividend@164a1446, com.hayan.dividend.domain.Dividend@5303cee, com.hayan.dividend.domain.Dividend@404ac4c2, com.hayan.dividend.domain.Dividend@19821bcc, com.hayan.dividend.domain.Dividend@5facd49e, com.hayan.dividend.domain.Dividend@5b7f54c9, com.hayan.dividend.domain.Dividend@4d05f7b0, com.hayan.dividend.domain.Dividend@4450c9a7, com.hayan.dividend.domain.Dividend@7de1fd97, com.hayan.dividend.domain.Dividend@5c1937fe, com.hayan.dividend.domain.Dividend@3e43f3ba, com.hayan.dividend.domain.Dividend@7c1c0824, com.hayan.dividend.domain.Dividend@e635f75, com.hayan.dividend.domain.Dividend@1b502f80, com.hayan.dividend.domain.Dividend@3a2fd173]]
2024-09-04 08:12:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:12:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 3 ms
2024-09-04 08:12:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:12:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2251 ms
2024-09-04 08:12:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@623e3e93
2024-09-04 08:12:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2252 ms
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 2 ms
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:12:09 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:12:09 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [ab]
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [ab]
2024-09-04 08:12:09 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:12:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [ab]
2024-09-04 08:12:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@768290da
2024-09-04 08:12:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1473 ms
2024-09-04 08:12:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@768290da]
2024-09-04 08:12:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@5d17f2f9, com.hayan.dividend.domain.Dividend@3f71bdc1, com.hayan.dividend.domain.Dividend@24770616, com.hayan.dividend.domain.Dividend@122f8d83, com.hayan.dividend.domain.Dividend@704d2505, com.hayan.dividend.domain.Dividend@42600178, com.hayan.dividend.domain.Dividend@5e3be894, com.hayan.dividend.domain.Dividend@30962545, com.hayan.dividend.domain.Dividend@29ea4b5f, com.hayan.dividend.domain.Dividend@6b43e4db, com.hayan.dividend.domain.Dividend@6a3dce6f, com.hayan.dividend.domain.Dividend@6b006260, com.hayan.dividend.domain.Dividend@10cb6cec, com.hayan.dividend.domain.Dividend@645a3712, com.hayan.dividend.domain.Dividend@6010d340, com.hayan.dividend.domain.Dividend@86bbe40, com.hayan.dividend.domain.Dividend@438c0fad, com.hayan.dividend.domain.Dividend@765b5269, com.hayan.dividend.domain.Dividend@10b71531, com.hayan.dividend.domain.Dividend@45fb20d9, com.hayan.dividend.domain.Dividend@66a9beac, com.hayan.dividend.domain.Dividend@4a4d700a, com.hayan.dividend.domain.Dividend@627beaef, com.hayan.dividend.domain.Dividend@7e1ae391, com.hayan.dividend.domain.Dividend@55ed6e20, com.hayan.dividend.domain.Dividend@748199b7, com.hayan.dividend.domain.Dividend@4990295a, com.hayan.dividend.domain.Dividend@603f4d92, com.hayan.dividend.domain.Dividend@5e1da3db, com.hayan.dividend.domain.Dividend@2629c58e, com.hayan.dividend.domain.Dividend@6e3be2e8, com.hayan.dividend.domain.Dividend@74727160, com.hayan.dividend.domain.Dividend@47c2174e, com.hayan.dividend.domain.Dividend@2fafaf8d, com.hayan.dividend.domain.Dividend@1eb22432, com.hayan.dividend.domain.Dividend@792caff5, com.hayan.dividend.domain.Dividend@2e03bff9, com.hayan.dividend.domain.Dividend@7c82ae73, com.hayan.dividend.domain.Dividend@739e8665, com.hayan.dividend.domain.Dividend@6fd1cce4, com.hayan.dividend.domain.Dividend@5c1e5a90, com.hayan.dividend.domain.Dividend@35868656, com.hayan.dividend.domain.Dividend@322c932d, com.hayan.dividend.domain.Dividend@53fbdf60, com.hayan.dividend.domain.Dividend@7d1fd555, com.hayan.dividend.domain.Dividend@7c2a4896, com.hayan.dividend.domain.Dividend@2a4909c5, com.hayan.dividend.domain.Dividend@2744c333, com.hayan.dividend.domain.Dividend@24f21ff3, com.hayan.dividend.domain.Dividend@ab29d03, com.hayan.dividend.domain.Dividend@6857aab1, com.hayan.dividend.domain.Dividend@698ba1d3, com.hayan.dividend.domain.Dividend@5db23696, com.hayan.dividend.domain.Dividend@43f6f2a6, com.hayan.dividend.domain.Dividend@1621ca4b, com.hayan.dividend.domain.Dividend@22107465, com.hayan.dividend.domain.Dividend@6e5ae037, com.hayan.dividend.domain.Dividend@1a4d5c98, com.hayan.dividend.domain.Dividend@226ae08, com.hayan.dividend.domain.Dividend@23b45175, com.hayan.dividend.domain.Dividend@1ad6466c, com.hayan.dividend.domain.Dividend@6a8f6032, com.hayan.dividend.domain.Dividend@5d6ed585, com.hayan.dividend.domain.Dividend@5c5008a4, com.hayan.dividend.domain.Dividend@749dd064, com.hayan.dividend.domain.Dividend@6502b035, com.hayan.dividend.domain.Dividend@4e6b93ed, com.hayan.dividend.domain.Dividend@1222a7ac, com.hayan.dividend.domain.Dividend@8264b7c, com.hayan.dividend.domain.Dividend@7855d155, com.hayan.dividend.domain.Dividend@6ab3c149, com.hayan.dividend.domain.Dividend@6dab0474, com.hayan.dividend.domain.Dividend@57eccf16, com.hayan.dividend.domain.Dividend@16573c7, com.hayan.dividend.domain.Dividend@75a8532b, com.hayan.dividend.domain.Dividend@4095614e, com.hayan.dividend.domain.Dividend@71b08235, com.hayan.dividend.domain.Dividend@5be12c8f, com.hayan.dividend.domain.Dividend@6c671dd3, com.hayan.dividend.domain.Dividend@7138e00, com.hayan.dividend.domain.Dividend@72c705fd, com.hayan.dividend.domain.Dividend@2010da7e, com.hayan.dividend.domain.Dividend@744dd22a, com.hayan.dividend.domain.Dividend@6fb5212d, com.hayan.dividend.domain.Dividend@251729cb, com.hayan.dividend.domain.Dividend@372c43d, com.hayan.dividend.domain.Dividend@19348afb, com.hayan.dividend.domain.Dividend@5f4e7cb9, com.hayan.dividend.domain.Dividend@438b4fea, com.hayan.dividend.domain.Dividend@56cd388a, com.hayan.dividend.domain.Dividend@6b1303fa, com.hayan.dividend.domain.Dividend@47140195, com.hayan.dividend.domain.Dividend@5ef9e282, com.hayan.dividend.domain.Dividend@61cf88bf, com.hayan.dividend.domain.Dividend@12b05baf, com.hayan.dividend.domain.Dividend@754fe8c5, com.hayan.dividend.domain.Dividend@6433e91c, com.hayan.dividend.domain.Dividend@79a41f55, com.hayan.dividend.domain.Dividend@69595eed, com.hayan.dividend.domain.Dividend@63da8ac3, com.hayan.dividend.domain.Dividend@185af4ad, com.hayan.dividend.domain.Dividend@415d0e44, com.hayan.dividend.domain.Dividend@62d08eb4, com.hayan.dividend.domain.Dividend@55eb8cbf, com.hayan.dividend.domain.Dividend@1a5be533, com.hayan.dividend.domain.Dividend@335de712, com.hayan.dividend.domain.Dividend@559e6ae3, com.hayan.dividend.domain.Dividend@5c199a9b, com.hayan.dividend.domain.Dividend@19ae9e56, com.hayan.dividend.domain.Dividend@45179f06, com.hayan.dividend.domain.Dividend@63782c35, com.hayan.dividend.domain.Dividend@7325bf83, com.hayan.dividend.domain.Dividend@1e94c39f, com.hayan.dividend.domain.Dividend@678290e4, com.hayan.dividend.domain.Dividend@45b901a5, com.hayan.dividend.domain.Dividend@1b3e7736, com.hayan.dividend.domain.Dividend@238ec7f5, com.hayan.dividend.domain.Dividend@50f876d0, com.hayan.dividend.domain.Dividend@5dc1e143, com.hayan.dividend.domain.Dividend@35aeba0a, com.hayan.dividend.domain.Dividend@604a6225, com.hayan.dividend.domain.Dividend@7397d60a, com.hayan.dividend.domain.Dividend@218efac2, com.hayan.dividend.domain.Dividend@61b06a13, com.hayan.dividend.domain.Dividend@52d8774a, com.hayan.dividend.domain.Dividend@1fb2dc9d, com.hayan.dividend.domain.Dividend@49bc6d43, com.hayan.dividend.domain.Dividend@2bbe7695, com.hayan.dividend.domain.Dividend@3a4d268f, com.hayan.dividend.domain.Dividend@3392436f, com.hayan.dividend.domain.Dividend@19eef62b, com.hayan.dividend.domain.Dividend@41bc215d, com.hayan.dividend.domain.Dividend@12960ebb, com.hayan.dividend.domain.Dividend@333ebebd, com.hayan.dividend.domain.Dividend@5d0f495f, com.hayan.dividend.domain.Dividend@7d193d6a, com.hayan.dividend.domain.Dividend@5f5817a4, com.hayan.dividend.domain.Dividend@195581a4, com.hayan.dividend.domain.Dividend@3e376660, com.hayan.dividend.domain.Dividend@af1eea1, com.hayan.dividend.domain.Dividend@158b2d6c, com.hayan.dividend.domain.Dividend@20e6d6d8, com.hayan.dividend.domain.Dividend@25e7b0c2]
2024-09-04 08:12:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1160 ms
2024-09-04 08:12:12 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:12:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@5d17f2f9, com.hayan.dividend.domain.Dividend@3f71bdc1, com.hayan.dividend.domain.Dividend@24770616, com.hayan.dividend.domain.Dividend@122f8d83, com.hayan.dividend.domain.Dividend@704d2505, com.hayan.dividend.domain.Dividend@42600178, com.hayan.dividend.domain.Dividend@5e3be894, com.hayan.dividend.domain.Dividend@30962545, com.hayan.dividend.domain.Dividend@29ea4b5f, com.hayan.dividend.domain.Dividend@6b43e4db, com.hayan.dividend.domain.Dividend@6a3dce6f, com.hayan.dividend.domain.Dividend@6b006260, com.hayan.dividend.domain.Dividend@10cb6cec, com.hayan.dividend.domain.Dividend@645a3712, com.hayan.dividend.domain.Dividend@6010d340, com.hayan.dividend.domain.Dividend@86bbe40, com.hayan.dividend.domain.Dividend@438c0fad, com.hayan.dividend.domain.Dividend@765b5269, com.hayan.dividend.domain.Dividend@10b71531, com.hayan.dividend.domain.Dividend@45fb20d9, com.hayan.dividend.domain.Dividend@66a9beac, com.hayan.dividend.domain.Dividend@4a4d700a, com.hayan.dividend.domain.Dividend@627beaef, com.hayan.dividend.domain.Dividend@7e1ae391, com.hayan.dividend.domain.Dividend@55ed6e20, com.hayan.dividend.domain.Dividend@748199b7, com.hayan.dividend.domain.Dividend@4990295a, com.hayan.dividend.domain.Dividend@603f4d92, com.hayan.dividend.domain.Dividend@5e1da3db, com.hayan.dividend.domain.Dividend@2629c58e, com.hayan.dividend.domain.Dividend@6e3be2e8, com.hayan.dividend.domain.Dividend@74727160, com.hayan.dividend.domain.Dividend@47c2174e, com.hayan.dividend.domain.Dividend@2fafaf8d, com.hayan.dividend.domain.Dividend@1eb22432, com.hayan.dividend.domain.Dividend@792caff5, com.hayan.dividend.domain.Dividend@2e03bff9, com.hayan.dividend.domain.Dividend@7c82ae73, com.hayan.dividend.domain.Dividend@739e8665, com.hayan.dividend.domain.Dividend@6fd1cce4, com.hayan.dividend.domain.Dividend@5c1e5a90, com.hayan.dividend.domain.Dividend@35868656, com.hayan.dividend.domain.Dividend@322c932d, com.hayan.dividend.domain.Dividend@53fbdf60, com.hayan.dividend.domain.Dividend@7d1fd555, com.hayan.dividend.domain.Dividend@7c2a4896, com.hayan.dividend.domain.Dividend@2a4909c5, com.hayan.dividend.domain.Dividend@2744c333, com.hayan.dividend.domain.Dividend@24f21ff3, com.hayan.dividend.domain.Dividend@ab29d03, com.hayan.dividend.domain.Dividend@6857aab1, com.hayan.dividend.domain.Dividend@698ba1d3, com.hayan.dividend.domain.Dividend@5db23696, com.hayan.dividend.domain.Dividend@43f6f2a6, com.hayan.dividend.domain.Dividend@1621ca4b, com.hayan.dividend.domain.Dividend@22107465, com.hayan.dividend.domain.Dividend@6e5ae037, com.hayan.dividend.domain.Dividend@1a4d5c98, com.hayan.dividend.domain.Dividend@226ae08, com.hayan.dividend.domain.Dividend@23b45175, com.hayan.dividend.domain.Dividend@1ad6466c, com.hayan.dividend.domain.Dividend@6a8f6032, com.hayan.dividend.domain.Dividend@5d6ed585, com.hayan.dividend.domain.Dividend@5c5008a4, com.hayan.dividend.domain.Dividend@749dd064, com.hayan.dividend.domain.Dividend@6502b035, com.hayan.dividend.domain.Dividend@4e6b93ed, com.hayan.dividend.domain.Dividend@1222a7ac, com.hayan.dividend.domain.Dividend@8264b7c, com.hayan.dividend.domain.Dividend@7855d155, com.hayan.dividend.domain.Dividend@6ab3c149, com.hayan.dividend.domain.Dividend@6dab0474, com.hayan.dividend.domain.Dividend@57eccf16, com.hayan.dividend.domain.Dividend@16573c7, com.hayan.dividend.domain.Dividend@75a8532b, com.hayan.dividend.domain.Dividend@4095614e, com.hayan.dividend.domain.Dividend@71b08235, com.hayan.dividend.domain.Dividend@5be12c8f, com.hayan.dividend.domain.Dividend@6c671dd3, com.hayan.dividend.domain.Dividend@7138e00, com.hayan.dividend.domain.Dividend@72c705fd, com.hayan.dividend.domain.Dividend@2010da7e, com.hayan.dividend.domain.Dividend@744dd22a, com.hayan.dividend.domain.Dividend@6fb5212d, com.hayan.dividend.domain.Dividend@251729cb, com.hayan.dividend.domain.Dividend@372c43d, com.hayan.dividend.domain.Dividend@19348afb, com.hayan.dividend.domain.Dividend@5f4e7cb9, com.hayan.dividend.domain.Dividend@438b4fea, com.hayan.dividend.domain.Dividend@56cd388a, com.hayan.dividend.domain.Dividend@6b1303fa, com.hayan.dividend.domain.Dividend@47140195, com.hayan.dividend.domain.Dividend@5ef9e282, com.hayan.dividend.domain.Dividend@61cf88bf, com.hayan.dividend.domain.Dividend@12b05baf, com.hayan.dividend.domain.Dividend@754fe8c5, com.hayan.dividend.domain.Dividend@6433e91c, com.hayan.dividend.domain.Dividend@79a41f55, com.hayan.dividend.domain.Dividend@69595eed, com.hayan.dividend.domain.Dividend@63da8ac3, com.hayan.dividend.domain.Dividend@185af4ad, com.hayan.dividend.domain.Dividend@415d0e44, com.hayan.dividend.domain.Dividend@62d08eb4, com.hayan.dividend.domain.Dividend@55eb8cbf, com.hayan.dividend.domain.Dividend@1a5be533, com.hayan.dividend.domain.Dividend@335de712, com.hayan.dividend.domain.Dividend@559e6ae3, com.hayan.dividend.domain.Dividend@5c199a9b, com.hayan.dividend.domain.Dividend@19ae9e56, com.hayan.dividend.domain.Dividend@45179f06, com.hayan.dividend.domain.Dividend@63782c35, com.hayan.dividend.domain.Dividend@7325bf83, com.hayan.dividend.domain.Dividend@1e94c39f, com.hayan.dividend.domain.Dividend@678290e4, com.hayan.dividend.domain.Dividend@45b901a5, com.hayan.dividend.domain.Dividend@1b3e7736, com.hayan.dividend.domain.Dividend@238ec7f5, com.hayan.dividend.domain.Dividend@50f876d0, com.hayan.dividend.domain.Dividend@5dc1e143, com.hayan.dividend.domain.Dividend@35aeba0a, com.hayan.dividend.domain.Dividend@604a6225, com.hayan.dividend.domain.Dividend@7397d60a, com.hayan.dividend.domain.Dividend@218efac2, com.hayan.dividend.domain.Dividend@61b06a13, com.hayan.dividend.domain.Dividend@52d8774a, com.hayan.dividend.domain.Dividend@1fb2dc9d, com.hayan.dividend.domain.Dividend@49bc6d43, com.hayan.dividend.domain.Dividend@2bbe7695, com.hayan.dividend.domain.Dividend@3a4d268f, com.hayan.dividend.domain.Dividend@3392436f, com.hayan.dividend.domain.Dividend@19eef62b, com.hayan.dividend.domain.Dividend@41bc215d, com.hayan.dividend.domain.Dividend@12960ebb, com.hayan.dividend.domain.Dividend@333ebebd, com.hayan.dividend.domain.Dividend@5d0f495f, com.hayan.dividend.domain.Dividend@7d193d6a, com.hayan.dividend.domain.Dividend@5f5817a4, com.hayan.dividend.domain.Dividend@195581a4, com.hayan.dividend.domain.Dividend@3e376660, com.hayan.dividend.domain.Dividend@af1eea1, com.hayan.dividend.domain.Dividend@158b2d6c, com.hayan.dividend.domain.Dividend@20e6d6d8, com.hayan.dividend.domain.Dividend@25e7b0c2]]
2024-09-04 08:12:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:12:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 7 ms
2024-09-04 08:12:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:12:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2645 ms
2024-09-04 08:12:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@5a6c54f7
2024-09-04 08:12:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2646 ms
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:12:18 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:12:18 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [c]
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [c]
2024-09-04 08:12:18 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:12:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [c]
2024-09-04 08:12:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@1217ff7e
2024-09-04 08:12:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1795 ms
2024-09-04 08:12:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@1217ff7e]
2024-09-04 08:12:21 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@2640ebca, com.hayan.dividend.domain.Dividend@b010c73, com.hayan.dividend.domain.Dividend@ec28f95, com.hayan.dividend.domain.Dividend@76aac730, com.hayan.dividend.domain.Dividend@57957c94, com.hayan.dividend.domain.Dividend@54749081, com.hayan.dividend.domain.Dividend@4e5003bd, com.hayan.dividend.domain.Dividend@6e63ce00, com.hayan.dividend.domain.Dividend@126e6e84, com.hayan.dividend.domain.Dividend@626e04d0, com.hayan.dividend.domain.Dividend@2c6dbecb, com.hayan.dividend.domain.Dividend@5c0e7688, com.hayan.dividend.domain.Dividend@3d7539c3, com.hayan.dividend.domain.Dividend@2fafe239, com.hayan.dividend.domain.Dividend@6ef59ae1, com.hayan.dividend.domain.Dividend@41e00b81, com.hayan.dividend.domain.Dividend@554f995f, com.hayan.dividend.domain.Dividend@5a107e5, com.hayan.dividend.domain.Dividend@47c1b722, com.hayan.dividend.domain.Dividend@63c0058, com.hayan.dividend.domain.Dividend@2f90e4a1, com.hayan.dividend.domain.Dividend@22035099, com.hayan.dividend.domain.Dividend@68318b5c, com.hayan.dividend.domain.Dividend@ee978c2, com.hayan.dividend.domain.Dividend@26f43052, com.hayan.dividend.domain.Dividend@1e4b2b8d, com.hayan.dividend.domain.Dividend@7ac42873, com.hayan.dividend.domain.Dividend@3f2e7081, com.hayan.dividend.domain.Dividend@38dfa196, com.hayan.dividend.domain.Dividend@7f8fe243, com.hayan.dividend.domain.Dividend@24d3ca71, com.hayan.dividend.domain.Dividend@68351c12, com.hayan.dividend.domain.Dividend@2da3d393, com.hayan.dividend.domain.Dividend@2dbeb19e, com.hayan.dividend.domain.Dividend@1784661a, com.hayan.dividend.domain.Dividend@57913d74, com.hayan.dividend.domain.Dividend@649d535e, com.hayan.dividend.domain.Dividend@3cf73c12, com.hayan.dividend.domain.Dividend@8772920, com.hayan.dividend.domain.Dividend@5653dfc7, com.hayan.dividend.domain.Dividend@585a61f0, com.hayan.dividend.domain.Dividend@5d48c145, com.hayan.dividend.domain.Dividend@6c47cde5, com.hayan.dividend.domain.Dividend@24a29a4d, com.hayan.dividend.domain.Dividend@2ffc3ac8, com.hayan.dividend.domain.Dividend@3425849b, com.hayan.dividend.domain.Dividend@66df4f1f, com.hayan.dividend.domain.Dividend@561fd17b, com.hayan.dividend.domain.Dividend@187b8b0a, com.hayan.dividend.domain.Dividend@62d5c2, com.hayan.dividend.domain.Dividend@1cd9c566, com.hayan.dividend.domain.Dividend@34e55b8f, com.hayan.dividend.domain.Dividend@7002b5c2, com.hayan.dividend.domain.Dividend@66d8b2c5, com.hayan.dividend.domain.Dividend@34f8b98d, com.hayan.dividend.domain.Dividend@2a5fb5be, com.hayan.dividend.domain.Dividend@4f96b992, com.hayan.dividend.domain.Dividend@6c7b643f, com.hayan.dividend.domain.Dividend@1d3e9cec, com.hayan.dividend.domain.Dividend@4a1b38b0, com.hayan.dividend.domain.Dividend@30bb4248, com.hayan.dividend.domain.Dividend@7d692fc, com.hayan.dividend.domain.Dividend@6e66a716, com.hayan.dividend.domain.Dividend@7d2bdcd2, com.hayan.dividend.domain.Dividend@17e8783d, com.hayan.dividend.domain.Dividend@249a494e, com.hayan.dividend.domain.Dividend@7f1f04dc, com.hayan.dividend.domain.Dividend@5cf19aa1, com.hayan.dividend.domain.Dividend@88c3892, com.hayan.dividend.domain.Dividend@7eaac0f4, com.hayan.dividend.domain.Dividend@79941219, com.hayan.dividend.domain.Dividend@29e0ab18, com.hayan.dividend.domain.Dividend@40414e1e, com.hayan.dividend.domain.Dividend@68c49b82, com.hayan.dividend.domain.Dividend@31195859, com.hayan.dividend.domain.Dividend@1d8d8d09, com.hayan.dividend.domain.Dividend@57760118, com.hayan.dividend.domain.Dividend@1ba288ff, com.hayan.dividend.domain.Dividend@6082c042, com.hayan.dividend.domain.Dividend@1116fc9e, com.hayan.dividend.domain.Dividend@760f5165, com.hayan.dividend.domain.Dividend@79e5da2b, com.hayan.dividend.domain.Dividend@f939585, com.hayan.dividend.domain.Dividend@29476ae5, com.hayan.dividend.domain.Dividend@254f92d1, com.hayan.dividend.domain.Dividend@72ac30d1, com.hayan.dividend.domain.Dividend@6100bcbc, com.hayan.dividend.domain.Dividend@7302f23b, com.hayan.dividend.domain.Dividend@2a022f90, com.hayan.dividend.domain.Dividend@393bb8b9, com.hayan.dividend.domain.Dividend@5d3a067e, com.hayan.dividend.domain.Dividend@394da4c8, com.hayan.dividend.domain.Dividend@20872de, com.hayan.dividend.domain.Dividend@6612fc56, com.hayan.dividend.domain.Dividend@6b161f1c, com.hayan.dividend.domain.Dividend@3f298d52, com.hayan.dividend.domain.Dividend@7ef686eb, com.hayan.dividend.domain.Dividend@f77252f, com.hayan.dividend.domain.Dividend@54c22522, com.hayan.dividend.domain.Dividend@277261f5, com.hayan.dividend.domain.Dividend@6df97a2e, com.hayan.dividend.domain.Dividend@5b9174e3, com.hayan.dividend.domain.Dividend@1ebfa186, com.hayan.dividend.domain.Dividend@2a76066d, com.hayan.dividend.domain.Dividend@cf82107, com.hayan.dividend.domain.Dividend@5c1e6a17, com.hayan.dividend.domain.Dividend@3fce4383, com.hayan.dividend.domain.Dividend@25116f79, com.hayan.dividend.domain.Dividend@68ac92c5, com.hayan.dividend.domain.Dividend@474d1315, com.hayan.dividend.domain.Dividend@ad29224, com.hayan.dividend.domain.Dividend@24965ea0, com.hayan.dividend.domain.Dividend@2820da4d, com.hayan.dividend.domain.Dividend@7daa1e7, com.hayan.dividend.domain.Dividend@1907408a, com.hayan.dividend.domain.Dividend@ff27e54, com.hayan.dividend.domain.Dividend@21ae2f55, com.hayan.dividend.domain.Dividend@7329671e, com.hayan.dividend.domain.Dividend@50097ae1, com.hayan.dividend.domain.Dividend@4c15ae6a, com.hayan.dividend.domain.Dividend@1c91f43a, com.hayan.dividend.domain.Dividend@24b87121, com.hayan.dividend.domain.Dividend@3f7dd925, com.hayan.dividend.domain.Dividend@5efa465e, com.hayan.dividend.domain.Dividend@4d59499f, com.hayan.dividend.domain.Dividend@2a8f086c, com.hayan.dividend.domain.Dividend@7bea58e9, com.hayan.dividend.domain.Dividend@772e297c, com.hayan.dividend.domain.Dividend@70bc83b7, com.hayan.dividend.domain.Dividend@22a239a4, com.hayan.dividend.domain.Dividend@ba60009, com.hayan.dividend.domain.Dividend@dc5adc8, com.hayan.dividend.domain.Dividend@197036fc, com.hayan.dividend.domain.Dividend@2a2c436f, com.hayan.dividend.domain.Dividend@11b1a86b, com.hayan.dividend.domain.Dividend@313aec78, com.hayan.dividend.domain.Dividend@2965fb75, com.hayan.dividend.domain.Dividend@611ae20d, com.hayan.dividend.domain.Dividend@7d74fcb5, com.hayan.dividend.domain.Dividend@1bcb864f, com.hayan.dividend.domain.Dividend@1df37810, com.hayan.dividend.domain.Dividend@2bcffb29, com.hayan.dividend.domain.Dividend@71843bb1]
2024-09-04 08:12:21 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1286 ms
2024-09-04 08:12:21 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:12:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@2640ebca, com.hayan.dividend.domain.Dividend@b010c73, com.hayan.dividend.domain.Dividend@ec28f95, com.hayan.dividend.domain.Dividend@76aac730, com.hayan.dividend.domain.Dividend@57957c94, com.hayan.dividend.domain.Dividend@54749081, com.hayan.dividend.domain.Dividend@4e5003bd, com.hayan.dividend.domain.Dividend@6e63ce00, com.hayan.dividend.domain.Dividend@126e6e84, com.hayan.dividend.domain.Dividend@626e04d0, com.hayan.dividend.domain.Dividend@2c6dbecb, com.hayan.dividend.domain.Dividend@5c0e7688, com.hayan.dividend.domain.Dividend@3d7539c3, com.hayan.dividend.domain.Dividend@2fafe239, com.hayan.dividend.domain.Dividend@6ef59ae1, com.hayan.dividend.domain.Dividend@41e00b81, com.hayan.dividend.domain.Dividend@554f995f, com.hayan.dividend.domain.Dividend@5a107e5, com.hayan.dividend.domain.Dividend@47c1b722, com.hayan.dividend.domain.Dividend@63c0058, com.hayan.dividend.domain.Dividend@2f90e4a1, com.hayan.dividend.domain.Dividend@22035099, com.hayan.dividend.domain.Dividend@68318b5c, com.hayan.dividend.domain.Dividend@ee978c2, com.hayan.dividend.domain.Dividend@26f43052, com.hayan.dividend.domain.Dividend@1e4b2b8d, com.hayan.dividend.domain.Dividend@7ac42873, com.hayan.dividend.domain.Dividend@3f2e7081, com.hayan.dividend.domain.Dividend@38dfa196, com.hayan.dividend.domain.Dividend@7f8fe243, com.hayan.dividend.domain.Dividend@24d3ca71, com.hayan.dividend.domain.Dividend@68351c12, com.hayan.dividend.domain.Dividend@2da3d393, com.hayan.dividend.domain.Dividend@2dbeb19e, com.hayan.dividend.domain.Dividend@1784661a, com.hayan.dividend.domain.Dividend@57913d74, com.hayan.dividend.domain.Dividend@649d535e, com.hayan.dividend.domain.Dividend@3cf73c12, com.hayan.dividend.domain.Dividend@8772920, com.hayan.dividend.domain.Dividend@5653dfc7, com.hayan.dividend.domain.Dividend@585a61f0, com.hayan.dividend.domain.Dividend@5d48c145, com.hayan.dividend.domain.Dividend@6c47cde5, com.hayan.dividend.domain.Dividend@24a29a4d, com.hayan.dividend.domain.Dividend@2ffc3ac8, com.hayan.dividend.domain.Dividend@3425849b, com.hayan.dividend.domain.Dividend@66df4f1f, com.hayan.dividend.domain.Dividend@561fd17b, com.hayan.dividend.domain.Dividend@187b8b0a, com.hayan.dividend.domain.Dividend@62d5c2, com.hayan.dividend.domain.Dividend@1cd9c566, com.hayan.dividend.domain.Dividend@34e55b8f, com.hayan.dividend.domain.Dividend@7002b5c2, com.hayan.dividend.domain.Dividend@66d8b2c5, com.hayan.dividend.domain.Dividend@34f8b98d, com.hayan.dividend.domain.Dividend@2a5fb5be, com.hayan.dividend.domain.Dividend@4f96b992, com.hayan.dividend.domain.Dividend@6c7b643f, com.hayan.dividend.domain.Dividend@1d3e9cec, com.hayan.dividend.domain.Dividend@4a1b38b0, com.hayan.dividend.domain.Dividend@30bb4248, com.hayan.dividend.domain.Dividend@7d692fc, com.hayan.dividend.domain.Dividend@6e66a716, com.hayan.dividend.domain.Dividend@7d2bdcd2, com.hayan.dividend.domain.Dividend@17e8783d, com.hayan.dividend.domain.Dividend@249a494e, com.hayan.dividend.domain.Dividend@7f1f04dc, com.hayan.dividend.domain.Dividend@5cf19aa1, com.hayan.dividend.domain.Dividend@88c3892, com.hayan.dividend.domain.Dividend@7eaac0f4, com.hayan.dividend.domain.Dividend@79941219, com.hayan.dividend.domain.Dividend@29e0ab18, com.hayan.dividend.domain.Dividend@40414e1e, com.hayan.dividend.domain.Dividend@68c49b82, com.hayan.dividend.domain.Dividend@31195859, com.hayan.dividend.domain.Dividend@1d8d8d09, com.hayan.dividend.domain.Dividend@57760118, com.hayan.dividend.domain.Dividend@1ba288ff, com.hayan.dividend.domain.Dividend@6082c042, com.hayan.dividend.domain.Dividend@1116fc9e, com.hayan.dividend.domain.Dividend@760f5165, com.hayan.dividend.domain.Dividend@79e5da2b, com.hayan.dividend.domain.Dividend@f939585, com.hayan.dividend.domain.Dividend@29476ae5, com.hayan.dividend.domain.Dividend@254f92d1, com.hayan.dividend.domain.Dividend@72ac30d1, com.hayan.dividend.domain.Dividend@6100bcbc, com.hayan.dividend.domain.Dividend@7302f23b, com.hayan.dividend.domain.Dividend@2a022f90, com.hayan.dividend.domain.Dividend@393bb8b9, com.hayan.dividend.domain.Dividend@5d3a067e, com.hayan.dividend.domain.Dividend@394da4c8, com.hayan.dividend.domain.Dividend@20872de, com.hayan.dividend.domain.Dividend@6612fc56, com.hayan.dividend.domain.Dividend@6b161f1c, com.hayan.dividend.domain.Dividend@3f298d52, com.hayan.dividend.domain.Dividend@7ef686eb, com.hayan.dividend.domain.Dividend@f77252f, com.hayan.dividend.domain.Dividend@54c22522, com.hayan.dividend.domain.Dividend@277261f5, com.hayan.dividend.domain.Dividend@6df97a2e, com.hayan.dividend.domain.Dividend@5b9174e3, com.hayan.dividend.domain.Dividend@1ebfa186, com.hayan.dividend.domain.Dividend@2a76066d, com.hayan.dividend.domain.Dividend@cf82107, com.hayan.dividend.domain.Dividend@5c1e6a17, com.hayan.dividend.domain.Dividend@3fce4383, com.hayan.dividend.domain.Dividend@25116f79, com.hayan.dividend.domain.Dividend@68ac92c5, com.hayan.dividend.domain.Dividend@474d1315, com.hayan.dividend.domain.Dividend@ad29224, com.hayan.dividend.domain.Dividend@24965ea0, com.hayan.dividend.domain.Dividend@2820da4d, com.hayan.dividend.domain.Dividend@7daa1e7, com.hayan.dividend.domain.Dividend@1907408a, com.hayan.dividend.domain.Dividend@ff27e54, com.hayan.dividend.domain.Dividend@21ae2f55, com.hayan.dividend.domain.Dividend@7329671e, com.hayan.dividend.domain.Dividend@50097ae1, com.hayan.dividend.domain.Dividend@4c15ae6a, com.hayan.dividend.domain.Dividend@1c91f43a, com.hayan.dividend.domain.Dividend@24b87121, com.hayan.dividend.domain.Dividend@3f7dd925, com.hayan.dividend.domain.Dividend@5efa465e, com.hayan.dividend.domain.Dividend@4d59499f, com.hayan.dividend.domain.Dividend@2a8f086c, com.hayan.dividend.domain.Dividend@7bea58e9, com.hayan.dividend.domain.Dividend@772e297c, com.hayan.dividend.domain.Dividend@70bc83b7, com.hayan.dividend.domain.Dividend@22a239a4, com.hayan.dividend.domain.Dividend@ba60009, com.hayan.dividend.domain.Dividend@dc5adc8, com.hayan.dividend.domain.Dividend@197036fc, com.hayan.dividend.domain.Dividend@2a2c436f, com.hayan.dividend.domain.Dividend@11b1a86b, com.hayan.dividend.domain.Dividend@313aec78, com.hayan.dividend.domain.Dividend@2965fb75, com.hayan.dividend.domain.Dividend@611ae20d, com.hayan.dividend.domain.Dividend@7d74fcb5, com.hayan.dividend.domain.Dividend@1bcb864f, com.hayan.dividend.domain.Dividend@1df37810, com.hayan.dividend.domain.Dividend@2bcffb29, com.hayan.dividend.domain.Dividend@71843bb1]]
2024-09-04 08:12:21 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:12:21 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 4 ms
2024-09-04 08:12:21 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:12:21 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3091 ms
2024-09-04 08:12:21 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@2180c575
2024-09-04 08:12:21 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3092 ms
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 6 ms
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:12:34 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:12:34 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 11 ms
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [soxl]
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [soxl]
2024-09-04 08:12:34 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:12:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [soxl]
2024-09-04 08:12:35 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@f5b4bfa
2024-09-04 08:12:35 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1248 ms
2024-09-04 08:12:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@f5b4bfa]
2024-09-04 08:12:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@2b0df0f2, com.hayan.dividend.domain.Dividend@7e5c6af2, com.hayan.dividend.domain.Dividend@2dac0009, com.hayan.dividend.domain.Dividend@4bc5cc81, com.hayan.dividend.domain.Dividend@f0b3f6b, com.hayan.dividend.domain.Dividend@129ddf82, com.hayan.dividend.domain.Dividend@5f7c3990, com.hayan.dividend.domain.Dividend@3a38573a, com.hayan.dividend.domain.Dividend@6c1ed771, com.hayan.dividend.domain.Dividend@108374bf, com.hayan.dividend.domain.Dividend@2e8d6f86, com.hayan.dividend.domain.Dividend@56746cea, com.hayan.dividend.domain.Dividend@4c4b9c0a, com.hayan.dividend.domain.Dividend@47e62fb0, com.hayan.dividend.domain.Dividend@2528995, com.hayan.dividend.domain.Dividend@77b4a609, com.hayan.dividend.domain.Dividend@678fdf39, com.hayan.dividend.domain.Dividend@1162e7d7, com.hayan.dividend.domain.Dividend@7eada4f, com.hayan.dividend.domain.Dividend@553ca055, com.hayan.dividend.domain.Dividend@4c53dbdc, com.hayan.dividend.domain.Dividend@4a09c1de, com.hayan.dividend.domain.Dividend@1be04272, com.hayan.dividend.domain.Dividend@2bee7753, com.hayan.dividend.domain.Dividend@7931c4c9, com.hayan.dividend.domain.Dividend@7db2fd00]
2024-09-04 08:12:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 935 ms
2024-09-04 08:12:36 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-04 08:12:36 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@2b0df0f2, com.hayan.dividend.domain.Dividend@7e5c6af2, com.hayan.dividend.domain.Dividend@2dac0009, com.hayan.dividend.domain.Dividend@4bc5cc81, com.hayan.dividend.domain.Dividend@f0b3f6b, com.hayan.dividend.domain.Dividend@129ddf82, com.hayan.dividend.domain.Dividend@5f7c3990, com.hayan.dividend.domain.Dividend@3a38573a, com.hayan.dividend.domain.Dividend@6c1ed771, com.hayan.dividend.domain.Dividend@108374bf, com.hayan.dividend.domain.Dividend@2e8d6f86, com.hayan.dividend.domain.Dividend@56746cea, com.hayan.dividend.domain.Dividend@4c4b9c0a, com.hayan.dividend.domain.Dividend@47e62fb0, com.hayan.dividend.domain.Dividend@2528995, com.hayan.dividend.domain.Dividend@77b4a609, com.hayan.dividend.domain.Dividend@678fdf39, com.hayan.dividend.domain.Dividend@1162e7d7, com.hayan.dividend.domain.Dividend@7eada4f, com.hayan.dividend.domain.Dividend@553ca055, com.hayan.dividend.domain.Dividend@4c53dbdc, com.hayan.dividend.domain.Dividend@4a09c1de, com.hayan.dividend.domain.Dividend@1be04272, com.hayan.dividend.domain.Dividend@2bee7753, com.hayan.dividend.domain.Dividend@7931c4c9, com.hayan.dividend.domain.Dividend@7db2fd00]]
2024-09-04 08:12:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-04 08:12:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 1 ms
2024-09-04 08:12:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-04 08:12:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2191 ms
2024-09-04 08:12:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@4378475a
2024-09-04 08:12:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2192 ms
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:12:39 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:12:39 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [z]
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [z]
2024-09-04 08:12:39 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-04 08:12:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [z]
2024-09-04 08:12:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@7a4d8ae2
2024-09-04 08:12:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1463 ms
2024-09-04 08:12:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@7a4d8ae2]
2024-09-04 08:12:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-04 08:12:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-04 08:12:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 1 ms
2024-09-04 08:12:42 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDU2LCJleHAiOjE3MjU0OTE0NTZ9.Sjw1LXbExGS_IhvlbGjzUfrfyfQsOrOA0Qf1fSF2ct39geNrf7AcoqB2UqHolH5PjHmowWIyYxJpKBrRHnryOQ]
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 5 ms
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDU2LCJleHAiOjE3MjU0OTE0NTZ9.Sjw1LXbExGS_IhvlbGjzUfrfyfQsOrOA0Qf1fSF2ct39geNrf7AcoqB2UqHolH5PjHmowWIyYxJpKBrRHnryOQ]
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:13:00 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:13:00 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.getAllCompanies with arguments: [0, 3]
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.loadAllCompanies with arguments: [0, 3]
2024-09-04 08:13:00 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-04 08:13:00 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        companies c1_0
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.loadAllCompanies with result: Page 1 of 3 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.loadAllCompanies in 17 ms
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@699d46fc
2024-09-04 08:13:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.getAllCompanies in 17 ms
2024-09-04 08:13:00 WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDU2LCJleHAiOjE3MjU0OTE0NTZ9.Sjw1LXbExGS_IhvlbGjzUfrfyfQsOrOA0Qf1fSF2ct39geNrf7AcoqB2UqHolH5PjHmowWIyYxJpKBrRHnryOQ]
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA1MDU2LCJleHAiOjE3MjU0OTE0NTZ9.Sjw1LXbExGS_IhvlbGjzUfrfyfQsOrOA0Qf1fSF2ct39geNrf7AcoqB2UqHolH5PjHmowWIyYxJpKBrRHnryOQ]
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-04 08:13:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-04 08:13:15 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [s]
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [s]
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@7eb02a83
2024-09-04 08:13:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-04 08:19:08 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-04 08:19:08 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-04 08:19:08 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-04 08:19:08 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
