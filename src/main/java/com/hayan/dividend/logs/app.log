2024-09-05 04:18:15 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 04:18:15 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 17739 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 04:18:15 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 04:18:15 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 04:18:15 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 04:18:15 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 04:18:16 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:18:16 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 04:18:16 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65 ms. Found 3 JPA repository interfaces.
2024-09-05 04:18:16 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:18:16 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 04:18:16 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:18:16 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:18:16 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:18:16 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-05 04:18:16 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 04:18:16 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 04:18:16 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 04:18:16 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 04:18:16 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 04:18:16 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 866 ms
2024-09-05 04:18:16 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 04:18:16 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 04:18:16 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 04:18:16 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 04:18:16 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 04:18:16 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 04:18:16 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 04:18:17 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 04:18:17 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 04:18:17 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:18:17 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 04:18:17 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 04:18:17 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:18:17 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 04:18:17 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 04:18:17 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 04:18:17 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 04:18:17 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:18:17 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2126af3
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 12 ms
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2126af3]
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@2999969e
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@2011a925
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@51221a32]
2024-09-05 04:18:17 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@51032bbb
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 04:18:17 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 04:18:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@2e08b548]
2024-09-05 04:18:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@4fcdb060, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@540b509f, org.springframework.security.web.context.SecurityContextHolderFilter@192fea9f, org.springframework.security.web.header.HeaderWriterFilter@549783b8, org.springframework.security.web.authentication.logout.LogoutFilter@39625a9c, com.hayan.dividend.jwt.JwtAuthenticationFilter@6b6715a2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@90d5f42, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3cf8a812, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5c2e20c7, org.springframework.security.web.session.SessionManagementFilter@3a2576f0, org.springframework.security.web.access.ExceptionTranslationFilter@4e29ee60, org.springframework.security.web.access.intercept.AuthorizationFilter@5ef8b4a2]]
2024-09-05 04:18:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 04:18:18 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 04:18:18 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 04:18:18 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 04:18:18 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.596 seconds (process running for 2.994)
2024-09-05 04:18:22 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 04:18:22 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 04:18:22 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 04:18:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-05 04:18:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:18:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 37 ms
2024-09-05 04:18:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDA0Njk1LCJleHAiOjE3MjU0OTEwOTV9.aMsjHewBemiY-X7NxtRCdt6n8NAJKFTA_2aMJkRV5G5jW8EFJNg7Sy95SdOoevnCHsMVVdsi4GELM4UhzlU1LA]
2024-09-05 04:18:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:18:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 0 ms
2024-09-05 04:18:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:18:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:18:22 ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
com.hayan.dividend.exception.CustomException: 존재하지 않는 회원입니다.
	at com.hayan.dividend.service.CustomUserDetailsService.lambda$loadUserByUsername$0(CustomUserDetailsService.java:25)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hayan.dividend.service.CustomUserDetailsService.loadUserByUsername(CustomUserDetailsService.java:25)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.service.CustomUserDetailsService$$SpringCGLIB$$0.loadUserByUsername(<generated>)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 04:18:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:18:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:18:26 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 04:18:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 04:18:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 117 ms
2024-09-05 04:18:26 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:18:26 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:18:27 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@3df8dd76
2024-09-05 04:18:27 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 125 ms
2024-09-05 04:18:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:18:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:18:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:18:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:18:28 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:18:28 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:18:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:18:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 9 ms
2024-09-05 04:18:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:18:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 190 ms
2024-09-05 04:18:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 04:18:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A
2024-09-05 04:18:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 7 ms
2024-09-05 04:18:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A
2024-09-05 04:18:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 198 ms
2024-09-05 04:18:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A"]>
2024-09-05 04:18:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 200 ms
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:18:38 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:18:38 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [z]
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [z]
2024-09-05 04:18:38 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:18:38 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [z]
2024-09-05 04:18:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@1edbee3c
2024-09-05 04:18:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1567 ms
2024-09-05 04:18:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@1edbee3c]
2024-09-05 04:18:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:18:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:18:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 2 ms
2024-09-05 04:18:40 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 9 ms
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:19:10 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:19:10 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 17 ms
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [mmm]
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [mmm]
2024-09-05 04:19:10 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:19:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [mmm]
2024-09-05 04:19:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@7fb73b91
2024-09-05 04:19:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1995 ms
2024-09-05 04:19:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@7fb73b91]
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@36f7f98c, com.hayan.dividend.domain.Dividend@58270b0e, com.hayan.dividend.domain.Dividend@4c0bca41, com.hayan.dividend.domain.Dividend@6d0de3f2, com.hayan.dividend.domain.Dividend@64bf5c46, com.hayan.dividend.domain.Dividend@42054a4, com.hayan.dividend.domain.Dividend@166bdfa3, com.hayan.dividend.domain.Dividend@14fbacef, com.hayan.dividend.domain.Dividend@a389f5a, com.hayan.dividend.domain.Dividend@c3b7fcd, com.hayan.dividend.domain.Dividend@44652f2e, com.hayan.dividend.domain.Dividend@d307f99, com.hayan.dividend.domain.Dividend@43bcf32a, com.hayan.dividend.domain.Dividend@14ae2987, com.hayan.dividend.domain.Dividend@795f7863, com.hayan.dividend.domain.Dividend@771d0c66, com.hayan.dividend.domain.Dividend@539c940c, com.hayan.dividend.domain.Dividend@369b6de9, com.hayan.dividend.domain.Dividend@34858739, com.hayan.dividend.domain.Dividend@2be4c3f3, com.hayan.dividend.domain.Dividend@1c6f0e77, com.hayan.dividend.domain.Dividend@71f6cc36, com.hayan.dividend.domain.Dividend@6952217e, com.hayan.dividend.domain.Dividend@64a49cfc, com.hayan.dividend.domain.Dividend@5c2aa9, com.hayan.dividend.domain.Dividend@478cc1e8, com.hayan.dividend.domain.Dividend@3fad41b6, com.hayan.dividend.domain.Dividend@7f2e79c3, com.hayan.dividend.domain.Dividend@1ec60ded, com.hayan.dividend.domain.Dividend@3f640c5c, com.hayan.dividend.domain.Dividend@6a915af7, com.hayan.dividend.domain.Dividend@66fdd607, com.hayan.dividend.domain.Dividend@487a0650, com.hayan.dividend.domain.Dividend@5763f5ef, com.hayan.dividend.domain.Dividend@37c54b16, com.hayan.dividend.domain.Dividend@3f80ee07, com.hayan.dividend.domain.Dividend@27d02721, com.hayan.dividend.domain.Dividend@6fd462b9, com.hayan.dividend.domain.Dividend@725419ae, com.hayan.dividend.domain.Dividend@4a9c2135, com.hayan.dividend.domain.Dividend@6cd3fe68, com.hayan.dividend.domain.Dividend@205e98e1, com.hayan.dividend.domain.Dividend@72956c2d, com.hayan.dividend.domain.Dividend@592b7ec3, com.hayan.dividend.domain.Dividend@2af8eb30, com.hayan.dividend.domain.Dividend@7eb5f71e, com.hayan.dividend.domain.Dividend@279808e1, com.hayan.dividend.domain.Dividend@2547a7b7, com.hayan.dividend.domain.Dividend@488b7944, com.hayan.dividend.domain.Dividend@19576a4c, com.hayan.dividend.domain.Dividend@7eefb687, com.hayan.dividend.domain.Dividend@660ddcf2, com.hayan.dividend.domain.Dividend@75dfd82e, com.hayan.dividend.domain.Dividend@5778d9d3, com.hayan.dividend.domain.Dividend@54201635, com.hayan.dividend.domain.Dividend@5c42aa0f, com.hayan.dividend.domain.Dividend@57d71701, com.hayan.dividend.domain.Dividend@4670fa69, com.hayan.dividend.domain.Dividend@1235cd2c, com.hayan.dividend.domain.Dividend@5b6e0fb7, com.hayan.dividend.domain.Dividend@346e74c4, com.hayan.dividend.domain.Dividend@758c6392, com.hayan.dividend.domain.Dividend@496c9ca2, com.hayan.dividend.domain.Dividend@6254218f, com.hayan.dividend.domain.Dividend@25dba155, com.hayan.dividend.domain.Dividend@335dd68f, com.hayan.dividend.domain.Dividend@1e79c5ca, com.hayan.dividend.domain.Dividend@5d62c7d3, com.hayan.dividend.domain.Dividend@25cb1423, com.hayan.dividend.domain.Dividend@787f57bb, com.hayan.dividend.domain.Dividend@28f89aeb, com.hayan.dividend.domain.Dividend@63ef8c78, com.hayan.dividend.domain.Dividend@1ef8f62a, com.hayan.dividend.domain.Dividend@1cb8a8c1, com.hayan.dividend.domain.Dividend@70fb467f, com.hayan.dividend.domain.Dividend@6fe88854, com.hayan.dividend.domain.Dividend@36f87a25, com.hayan.dividend.domain.Dividend@6fdf329b, com.hayan.dividend.domain.Dividend@45bd49a1, com.hayan.dividend.domain.Dividend@6ebcd36a, com.hayan.dividend.domain.Dividend@1be0a5ca, com.hayan.dividend.domain.Dividend@d3d07c7, com.hayan.dividend.domain.Dividend@22e2a780, com.hayan.dividend.domain.Dividend@2a4d1735, com.hayan.dividend.domain.Dividend@349d2943, com.hayan.dividend.domain.Dividend@51fb1328, com.hayan.dividend.domain.Dividend@66926030, com.hayan.dividend.domain.Dividend@24243768, com.hayan.dividend.domain.Dividend@792ec59e, com.hayan.dividend.domain.Dividend@70c5fbc0, com.hayan.dividend.domain.Dividend@5239608, com.hayan.dividend.domain.Dividend@396eb3, com.hayan.dividend.domain.Dividend@f34591f, com.hayan.dividend.domain.Dividend@50f0b8c2, com.hayan.dividend.domain.Dividend@49fae702, com.hayan.dividend.domain.Dividend@27d5478, com.hayan.dividend.domain.Dividend@2f2c1989, com.hayan.dividend.domain.Dividend@7a4f8206, com.hayan.dividend.domain.Dividend@6413b8ba, com.hayan.dividend.domain.Dividend@ca5eed4, com.hayan.dividend.domain.Dividend@430a4e98, com.hayan.dividend.domain.Dividend@4553bb4d, com.hayan.dividend.domain.Dividend@3cfc1d35, com.hayan.dividend.domain.Dividend@1f8c9730, com.hayan.dividend.domain.Dividend@e6364d7, com.hayan.dividend.domain.Dividend@56b22f85, com.hayan.dividend.domain.Dividend@afb95d3, com.hayan.dividend.domain.Dividend@71b5a6ab, com.hayan.dividend.domain.Dividend@64652196, com.hayan.dividend.domain.Dividend@23ece498, com.hayan.dividend.domain.Dividend@75efb83b, com.hayan.dividend.domain.Dividend@2933c8d3, com.hayan.dividend.domain.Dividend@641735f2, com.hayan.dividend.domain.Dividend@209bd5cc, com.hayan.dividend.domain.Dividend@28bd9f84, com.hayan.dividend.domain.Dividend@1f7fbf10, com.hayan.dividend.domain.Dividend@421ab1a8, com.hayan.dividend.domain.Dividend@3cd13992, com.hayan.dividend.domain.Dividend@7854d033, com.hayan.dividend.domain.Dividend@1ab16716, com.hayan.dividend.domain.Dividend@db10219, com.hayan.dividend.domain.Dividend@3899a794, com.hayan.dividend.domain.Dividend@66922dfc, com.hayan.dividend.domain.Dividend@778a7fef, com.hayan.dividend.domain.Dividend@722e0acd, com.hayan.dividend.domain.Dividend@7feb61b, com.hayan.dividend.domain.Dividend@70f496d5, com.hayan.dividend.domain.Dividend@5425ea23, com.hayan.dividend.domain.Dividend@56dfea08, com.hayan.dividend.domain.Dividend@24e3c0a6, com.hayan.dividend.domain.Dividend@7075b8d1, com.hayan.dividend.domain.Dividend@bfa200e, com.hayan.dividend.domain.Dividend@22dc04d3, com.hayan.dividend.domain.Dividend@180006de, com.hayan.dividend.domain.Dividend@45ee963f, com.hayan.dividend.domain.Dividend@1fce24dc, com.hayan.dividend.domain.Dividend@5d76416a, com.hayan.dividend.domain.Dividend@45d88aec, com.hayan.dividend.domain.Dividend@7436a306, com.hayan.dividend.domain.Dividend@1ab08198, com.hayan.dividend.domain.Dividend@7522eeb5, com.hayan.dividend.domain.Dividend@74ac9517, com.hayan.dividend.domain.Dividend@35433617, com.hayan.dividend.domain.Dividend@2b61cd66, com.hayan.dividend.domain.Dividend@49d4c9f9, com.hayan.dividend.domain.Dividend@5940e9f9, com.hayan.dividend.domain.Dividend@759f8f48, com.hayan.dividend.domain.Dividend@50306660, com.hayan.dividend.domain.Dividend@3f44f69e, com.hayan.dividend.domain.Dividend@6195cfae, com.hayan.dividend.domain.Dividend@6879e91b, com.hayan.dividend.domain.Dividend@3ba98112, com.hayan.dividend.domain.Dividend@23c160ff, com.hayan.dividend.domain.Dividend@6ce63396, com.hayan.dividend.domain.Dividend@4b702e20, com.hayan.dividend.domain.Dividend@3c26974d, com.hayan.dividend.domain.Dividend@14c8deae, com.hayan.dividend.domain.Dividend@496f3522, com.hayan.dividend.domain.Dividend@3a41301, com.hayan.dividend.domain.Dividend@bb060c7, com.hayan.dividend.domain.Dividend@595ff2b1, com.hayan.dividend.domain.Dividend@69a90a9d, com.hayan.dividend.domain.Dividend@4a3630b2, com.hayan.dividend.domain.Dividend@4208d76b, com.hayan.dividend.domain.Dividend@64e47fe1, com.hayan.dividend.domain.Dividend@45b87c02, com.hayan.dividend.domain.Dividend@3ef067a7, com.hayan.dividend.domain.Dividend@3ac74c9d, com.hayan.dividend.domain.Dividend@7d1b2753, com.hayan.dividend.domain.Dividend@7bc50c9e, com.hayan.dividend.domain.Dividend@4635911e, com.hayan.dividend.domain.Dividend@46969ee1, com.hayan.dividend.domain.Dividend@629308df, com.hayan.dividend.domain.Dividend@316159ef, com.hayan.dividend.domain.Dividend@5b3683bc, com.hayan.dividend.domain.Dividend@29a56fad, com.hayan.dividend.domain.Dividend@538a4fb6, com.hayan.dividend.domain.Dividend@681fda09, com.hayan.dividend.domain.Dividend@75b8fd5, com.hayan.dividend.domain.Dividend@5814094, com.hayan.dividend.domain.Dividend@4f7586d, com.hayan.dividend.domain.Dividend@122e0568, com.hayan.dividend.domain.Dividend@495005df, com.hayan.dividend.domain.Dividend@465a6981, com.hayan.dividend.domain.Dividend@78d07517, com.hayan.dividend.domain.Dividend@1ab73a20, com.hayan.dividend.domain.Dividend@5300ba54, com.hayan.dividend.domain.Dividend@4603d7d4, com.hayan.dividend.domain.Dividend@3d807ace, com.hayan.dividend.domain.Dividend@1e452164, com.hayan.dividend.domain.Dividend@4841fae2, com.hayan.dividend.domain.Dividend@10243949, com.hayan.dividend.domain.Dividend@2e4c7789, com.hayan.dividend.domain.Dividend@19b52d25, com.hayan.dividend.domain.Dividend@5e64521b, com.hayan.dividend.domain.Dividend@6f3bc6ef, com.hayan.dividend.domain.Dividend@220614be, com.hayan.dividend.domain.Dividend@126ac9de, com.hayan.dividend.domain.Dividend@6ee2a502, com.hayan.dividend.domain.Dividend@5fdf0a8f, com.hayan.dividend.domain.Dividend@4d6e562e, com.hayan.dividend.domain.Dividend@98e5264, com.hayan.dividend.domain.Dividend@72bf2ce2, com.hayan.dividend.domain.Dividend@5513cb48, com.hayan.dividend.domain.Dividend@6a7328e2, com.hayan.dividend.domain.Dividend@11154aba, com.hayan.dividend.domain.Dividend@1ac6ac46]
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1567 ms
2024-09-05 04:19:14 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@36f7f98c, com.hayan.dividend.domain.Dividend@58270b0e, com.hayan.dividend.domain.Dividend@4c0bca41, com.hayan.dividend.domain.Dividend@6d0de3f2, com.hayan.dividend.domain.Dividend@64bf5c46, com.hayan.dividend.domain.Dividend@42054a4, com.hayan.dividend.domain.Dividend@166bdfa3, com.hayan.dividend.domain.Dividend@14fbacef, com.hayan.dividend.domain.Dividend@a389f5a, com.hayan.dividend.domain.Dividend@c3b7fcd, com.hayan.dividend.domain.Dividend@44652f2e, com.hayan.dividend.domain.Dividend@d307f99, com.hayan.dividend.domain.Dividend@43bcf32a, com.hayan.dividend.domain.Dividend@14ae2987, com.hayan.dividend.domain.Dividend@795f7863, com.hayan.dividend.domain.Dividend@771d0c66, com.hayan.dividend.domain.Dividend@539c940c, com.hayan.dividend.domain.Dividend@369b6de9, com.hayan.dividend.domain.Dividend@34858739, com.hayan.dividend.domain.Dividend@2be4c3f3, com.hayan.dividend.domain.Dividend@1c6f0e77, com.hayan.dividend.domain.Dividend@71f6cc36, com.hayan.dividend.domain.Dividend@6952217e, com.hayan.dividend.domain.Dividend@64a49cfc, com.hayan.dividend.domain.Dividend@5c2aa9, com.hayan.dividend.domain.Dividend@478cc1e8, com.hayan.dividend.domain.Dividend@3fad41b6, com.hayan.dividend.domain.Dividend@7f2e79c3, com.hayan.dividend.domain.Dividend@1ec60ded, com.hayan.dividend.domain.Dividend@3f640c5c, com.hayan.dividend.domain.Dividend@6a915af7, com.hayan.dividend.domain.Dividend@66fdd607, com.hayan.dividend.domain.Dividend@487a0650, com.hayan.dividend.domain.Dividend@5763f5ef, com.hayan.dividend.domain.Dividend@37c54b16, com.hayan.dividend.domain.Dividend@3f80ee07, com.hayan.dividend.domain.Dividend@27d02721, com.hayan.dividend.domain.Dividend@6fd462b9, com.hayan.dividend.domain.Dividend@725419ae, com.hayan.dividend.domain.Dividend@4a9c2135, com.hayan.dividend.domain.Dividend@6cd3fe68, com.hayan.dividend.domain.Dividend@205e98e1, com.hayan.dividend.domain.Dividend@72956c2d, com.hayan.dividend.domain.Dividend@592b7ec3, com.hayan.dividend.domain.Dividend@2af8eb30, com.hayan.dividend.domain.Dividend@7eb5f71e, com.hayan.dividend.domain.Dividend@279808e1, com.hayan.dividend.domain.Dividend@2547a7b7, com.hayan.dividend.domain.Dividend@488b7944, com.hayan.dividend.domain.Dividend@19576a4c, com.hayan.dividend.domain.Dividend@7eefb687, com.hayan.dividend.domain.Dividend@660ddcf2, com.hayan.dividend.domain.Dividend@75dfd82e, com.hayan.dividend.domain.Dividend@5778d9d3, com.hayan.dividend.domain.Dividend@54201635, com.hayan.dividend.domain.Dividend@5c42aa0f, com.hayan.dividend.domain.Dividend@57d71701, com.hayan.dividend.domain.Dividend@4670fa69, com.hayan.dividend.domain.Dividend@1235cd2c, com.hayan.dividend.domain.Dividend@5b6e0fb7, com.hayan.dividend.domain.Dividend@346e74c4, com.hayan.dividend.domain.Dividend@758c6392, com.hayan.dividend.domain.Dividend@496c9ca2, com.hayan.dividend.domain.Dividend@6254218f, com.hayan.dividend.domain.Dividend@25dba155, com.hayan.dividend.domain.Dividend@335dd68f, com.hayan.dividend.domain.Dividend@1e79c5ca, com.hayan.dividend.domain.Dividend@5d62c7d3, com.hayan.dividend.domain.Dividend@25cb1423, com.hayan.dividend.domain.Dividend@787f57bb, com.hayan.dividend.domain.Dividend@28f89aeb, com.hayan.dividend.domain.Dividend@63ef8c78, com.hayan.dividend.domain.Dividend@1ef8f62a, com.hayan.dividend.domain.Dividend@1cb8a8c1, com.hayan.dividend.domain.Dividend@70fb467f, com.hayan.dividend.domain.Dividend@6fe88854, com.hayan.dividend.domain.Dividend@36f87a25, com.hayan.dividend.domain.Dividend@6fdf329b, com.hayan.dividend.domain.Dividend@45bd49a1, com.hayan.dividend.domain.Dividend@6ebcd36a, com.hayan.dividend.domain.Dividend@1be0a5ca, com.hayan.dividend.domain.Dividend@d3d07c7, com.hayan.dividend.domain.Dividend@22e2a780, com.hayan.dividend.domain.Dividend@2a4d1735, com.hayan.dividend.domain.Dividend@349d2943, com.hayan.dividend.domain.Dividend@51fb1328, com.hayan.dividend.domain.Dividend@66926030, com.hayan.dividend.domain.Dividend@24243768, com.hayan.dividend.domain.Dividend@792ec59e, com.hayan.dividend.domain.Dividend@70c5fbc0, com.hayan.dividend.domain.Dividend@5239608, com.hayan.dividend.domain.Dividend@396eb3, com.hayan.dividend.domain.Dividend@f34591f, com.hayan.dividend.domain.Dividend@50f0b8c2, com.hayan.dividend.domain.Dividend@49fae702, com.hayan.dividend.domain.Dividend@27d5478, com.hayan.dividend.domain.Dividend@2f2c1989, com.hayan.dividend.domain.Dividend@7a4f8206, com.hayan.dividend.domain.Dividend@6413b8ba, com.hayan.dividend.domain.Dividend@ca5eed4, com.hayan.dividend.domain.Dividend@430a4e98, com.hayan.dividend.domain.Dividend@4553bb4d, com.hayan.dividend.domain.Dividend@3cfc1d35, com.hayan.dividend.domain.Dividend@1f8c9730, com.hayan.dividend.domain.Dividend@e6364d7, com.hayan.dividend.domain.Dividend@56b22f85, com.hayan.dividend.domain.Dividend@afb95d3, com.hayan.dividend.domain.Dividend@71b5a6ab, com.hayan.dividend.domain.Dividend@64652196, com.hayan.dividend.domain.Dividend@23ece498, com.hayan.dividend.domain.Dividend@75efb83b, com.hayan.dividend.domain.Dividend@2933c8d3, com.hayan.dividend.domain.Dividend@641735f2, com.hayan.dividend.domain.Dividend@209bd5cc, com.hayan.dividend.domain.Dividend@28bd9f84, com.hayan.dividend.domain.Dividend@1f7fbf10, com.hayan.dividend.domain.Dividend@421ab1a8, com.hayan.dividend.domain.Dividend@3cd13992, com.hayan.dividend.domain.Dividend@7854d033, com.hayan.dividend.domain.Dividend@1ab16716, com.hayan.dividend.domain.Dividend@db10219, com.hayan.dividend.domain.Dividend@3899a794, com.hayan.dividend.domain.Dividend@66922dfc, com.hayan.dividend.domain.Dividend@778a7fef, com.hayan.dividend.domain.Dividend@722e0acd, com.hayan.dividend.domain.Dividend@7feb61b, com.hayan.dividend.domain.Dividend@70f496d5, com.hayan.dividend.domain.Dividend@5425ea23, com.hayan.dividend.domain.Dividend@56dfea08, com.hayan.dividend.domain.Dividend@24e3c0a6, com.hayan.dividend.domain.Dividend@7075b8d1, com.hayan.dividend.domain.Dividend@bfa200e, com.hayan.dividend.domain.Dividend@22dc04d3, com.hayan.dividend.domain.Dividend@180006de, com.hayan.dividend.domain.Dividend@45ee963f, com.hayan.dividend.domain.Dividend@1fce24dc, com.hayan.dividend.domain.Dividend@5d76416a, com.hayan.dividend.domain.Dividend@45d88aec, com.hayan.dividend.domain.Dividend@7436a306, com.hayan.dividend.domain.Dividend@1ab08198, com.hayan.dividend.domain.Dividend@7522eeb5, com.hayan.dividend.domain.Dividend@74ac9517, com.hayan.dividend.domain.Dividend@35433617, com.hayan.dividend.domain.Dividend@2b61cd66, com.hayan.dividend.domain.Dividend@49d4c9f9, com.hayan.dividend.domain.Dividend@5940e9f9, com.hayan.dividend.domain.Dividend@759f8f48, com.hayan.dividend.domain.Dividend@50306660, com.hayan.dividend.domain.Dividend@3f44f69e, com.hayan.dividend.domain.Dividend@6195cfae, com.hayan.dividend.domain.Dividend@6879e91b, com.hayan.dividend.domain.Dividend@3ba98112, com.hayan.dividend.domain.Dividend@23c160ff, com.hayan.dividend.domain.Dividend@6ce63396, com.hayan.dividend.domain.Dividend@4b702e20, com.hayan.dividend.domain.Dividend@3c26974d, com.hayan.dividend.domain.Dividend@14c8deae, com.hayan.dividend.domain.Dividend@496f3522, com.hayan.dividend.domain.Dividend@3a41301, com.hayan.dividend.domain.Dividend@bb060c7, com.hayan.dividend.domain.Dividend@595ff2b1, com.hayan.dividend.domain.Dividend@69a90a9d, com.hayan.dividend.domain.Dividend@4a3630b2, com.hayan.dividend.domain.Dividend@4208d76b, com.hayan.dividend.domain.Dividend@64e47fe1, com.hayan.dividend.domain.Dividend@45b87c02, com.hayan.dividend.domain.Dividend@3ef067a7, com.hayan.dividend.domain.Dividend@3ac74c9d, com.hayan.dividend.domain.Dividend@7d1b2753, com.hayan.dividend.domain.Dividend@7bc50c9e, com.hayan.dividend.domain.Dividend@4635911e, com.hayan.dividend.domain.Dividend@46969ee1, com.hayan.dividend.domain.Dividend@629308df, com.hayan.dividend.domain.Dividend@316159ef, com.hayan.dividend.domain.Dividend@5b3683bc, com.hayan.dividend.domain.Dividend@29a56fad, com.hayan.dividend.domain.Dividend@538a4fb6, com.hayan.dividend.domain.Dividend@681fda09, com.hayan.dividend.domain.Dividend@75b8fd5, com.hayan.dividend.domain.Dividend@5814094, com.hayan.dividend.domain.Dividend@4f7586d, com.hayan.dividend.domain.Dividend@122e0568, com.hayan.dividend.domain.Dividend@495005df, com.hayan.dividend.domain.Dividend@465a6981, com.hayan.dividend.domain.Dividend@78d07517, com.hayan.dividend.domain.Dividend@1ab73a20, com.hayan.dividend.domain.Dividend@5300ba54, com.hayan.dividend.domain.Dividend@4603d7d4, com.hayan.dividend.domain.Dividend@3d807ace, com.hayan.dividend.domain.Dividend@1e452164, com.hayan.dividend.domain.Dividend@4841fae2, com.hayan.dividend.domain.Dividend@10243949, com.hayan.dividend.domain.Dividend@2e4c7789, com.hayan.dividend.domain.Dividend@19b52d25, com.hayan.dividend.domain.Dividend@5e64521b, com.hayan.dividend.domain.Dividend@6f3bc6ef, com.hayan.dividend.domain.Dividend@220614be, com.hayan.dividend.domain.Dividend@126ac9de, com.hayan.dividend.domain.Dividend@6ee2a502, com.hayan.dividend.domain.Dividend@5fdf0a8f, com.hayan.dividend.domain.Dividend@4d6e562e, com.hayan.dividend.domain.Dividend@98e5264, com.hayan.dividend.domain.Dividend@72bf2ce2, com.hayan.dividend.domain.Dividend@5513cb48, com.hayan.dividend.domain.Dividend@6a7328e2, com.hayan.dividend.domain.Dividend@11154aba, com.hayan.dividend.domain.Dividend@1ac6ac46]]
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 27 ms
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [com.hayan.dividend.util.CompanyAddedEvent@5bfbad22]
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3623 ms
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@401b8105
2024-09-05 04:19:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3626 ms
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 7 ms
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:19:58 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:19:58 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 14 ms
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [coke]
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [coke]
2024-09-05 04:19:58 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:19:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [coke]
2024-09-05 04:20:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@75f9c27a
2024-09-05 04:20:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1676 ms
2024-09-05 04:20:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@75f9c27a]
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@1938258a, com.hayan.dividend.domain.Dividend@22e9dec5, com.hayan.dividend.domain.Dividend@72c65262, com.hayan.dividend.domain.Dividend@1344e3a5, com.hayan.dividend.domain.Dividend@4b889032, com.hayan.dividend.domain.Dividend@27fb7070, com.hayan.dividend.domain.Dividend@67ee63af, com.hayan.dividend.domain.Dividend@5303fd3c, com.hayan.dividend.domain.Dividend@5c05ee6e, com.hayan.dividend.domain.Dividend@20817d6e, com.hayan.dividend.domain.Dividend@346691ca, com.hayan.dividend.domain.Dividend@78406067, com.hayan.dividend.domain.Dividend@bc5979f, com.hayan.dividend.domain.Dividend@2084f184, com.hayan.dividend.domain.Dividend@206cdc9f, com.hayan.dividend.domain.Dividend@5bd4c3ad, com.hayan.dividend.domain.Dividend@7c8ace27, com.hayan.dividend.domain.Dividend@7b8508e3, com.hayan.dividend.domain.Dividend@3d4bbb28, com.hayan.dividend.domain.Dividend@40ffce87, com.hayan.dividend.domain.Dividend@6aaedb49, com.hayan.dividend.domain.Dividend@39bf04ef, com.hayan.dividend.domain.Dividend@59cd7a0b, com.hayan.dividend.domain.Dividend@67780c43, com.hayan.dividend.domain.Dividend@7b10e776, com.hayan.dividend.domain.Dividend@3ac90c87, com.hayan.dividend.domain.Dividend@8e634f7, com.hayan.dividend.domain.Dividend@2f5b3bbc, com.hayan.dividend.domain.Dividend@538c5276, com.hayan.dividend.domain.Dividend@2153c1b4, com.hayan.dividend.domain.Dividend@182b08e5, com.hayan.dividend.domain.Dividend@6edb5687, com.hayan.dividend.domain.Dividend@5ff5a6c8, com.hayan.dividend.domain.Dividend@601492e3, com.hayan.dividend.domain.Dividend@2038c224, com.hayan.dividend.domain.Dividend@14e3d7ca, com.hayan.dividend.domain.Dividend@66d2f078, com.hayan.dividend.domain.Dividend@2215e5cb, com.hayan.dividend.domain.Dividend@445a3a4f, com.hayan.dividend.domain.Dividend@4e0df889, com.hayan.dividend.domain.Dividend@3f2d8000, com.hayan.dividend.domain.Dividend@321b1193, com.hayan.dividend.domain.Dividend@2786cddd, com.hayan.dividend.domain.Dividend@6eea014, com.hayan.dividend.domain.Dividend@55100d49, com.hayan.dividend.domain.Dividend@3fed09f1, com.hayan.dividend.domain.Dividend@2e94d3f4, com.hayan.dividend.domain.Dividend@5d093832, com.hayan.dividend.domain.Dividend@8260c9f, com.hayan.dividend.domain.Dividend@5f532eeb, com.hayan.dividend.domain.Dividend@57d04d86, com.hayan.dividend.domain.Dividend@430c27e6, com.hayan.dividend.domain.Dividend@7b7699ec, com.hayan.dividend.domain.Dividend@3d14c41f, com.hayan.dividend.domain.Dividend@687d0246, com.hayan.dividend.domain.Dividend@4a6c3bb8, com.hayan.dividend.domain.Dividend@51a62e0, com.hayan.dividend.domain.Dividend@1eb56a60, com.hayan.dividend.domain.Dividend@1eda24c2, com.hayan.dividend.domain.Dividend@35c07d5a, com.hayan.dividend.domain.Dividend@631b1460, com.hayan.dividend.domain.Dividend@56c88409, com.hayan.dividend.domain.Dividend@197b5626, com.hayan.dividend.domain.Dividend@2f67c2fe, com.hayan.dividend.domain.Dividend@14e47b66, com.hayan.dividend.domain.Dividend@69e4d3f, com.hayan.dividend.domain.Dividend@4517e1ac, com.hayan.dividend.domain.Dividend@54f6abc2, com.hayan.dividend.domain.Dividend@637ec571, com.hayan.dividend.domain.Dividend@177d8b94, com.hayan.dividend.domain.Dividend@6d9d0256, com.hayan.dividend.domain.Dividend@c541c9c, com.hayan.dividend.domain.Dividend@1994052a, com.hayan.dividend.domain.Dividend@62ce1ca7, com.hayan.dividend.domain.Dividend@67c43d1a, com.hayan.dividend.domain.Dividend@4bd87d82, com.hayan.dividend.domain.Dividend@725c8c86, com.hayan.dividend.domain.Dividend@60e59d4e, com.hayan.dividend.domain.Dividend@268f50a5, com.hayan.dividend.domain.Dividend@2eb30d9b, com.hayan.dividend.domain.Dividend@389d8c77, com.hayan.dividend.domain.Dividend@74de69c7, com.hayan.dividend.domain.Dividend@28881581, com.hayan.dividend.domain.Dividend@1ee11ade, com.hayan.dividend.domain.Dividend@4acbc341, com.hayan.dividend.domain.Dividend@4ddc0b8e, com.hayan.dividend.domain.Dividend@25902ba9, com.hayan.dividend.domain.Dividend@3331e22f, com.hayan.dividend.domain.Dividend@27f4fec3, com.hayan.dividend.domain.Dividend@a5901c8, com.hayan.dividend.domain.Dividend@2eb0ae49, com.hayan.dividend.domain.Dividend@122c112a, com.hayan.dividend.domain.Dividend@12aee74a, com.hayan.dividend.domain.Dividend@503bf396, com.hayan.dividend.domain.Dividend@7b52cd3e, com.hayan.dividend.domain.Dividend@905263f, com.hayan.dividend.domain.Dividend@6cf414e2, com.hayan.dividend.domain.Dividend@635ceda9, com.hayan.dividend.domain.Dividend@e8af7c1, com.hayan.dividend.domain.Dividend@2e1e1cf1, com.hayan.dividend.domain.Dividend@62015ed4, com.hayan.dividend.domain.Dividend@6634d698, com.hayan.dividend.domain.Dividend@3f590160, com.hayan.dividend.domain.Dividend@61fe7bee, com.hayan.dividend.domain.Dividend@9e16efb, com.hayan.dividend.domain.Dividend@4921f949, com.hayan.dividend.domain.Dividend@3e04a30c, com.hayan.dividend.domain.Dividend@2c378e29, com.hayan.dividend.domain.Dividend@2ea3abe2, com.hayan.dividend.domain.Dividend@680ef4ce, com.hayan.dividend.domain.Dividend@73092600, com.hayan.dividend.domain.Dividend@63dfa88e, com.hayan.dividend.domain.Dividend@5010f3ac, com.hayan.dividend.domain.Dividend@4fa7c5e4, com.hayan.dividend.domain.Dividend@75a4c336, com.hayan.dividend.domain.Dividend@6b219ed4, com.hayan.dividend.domain.Dividend@3cfb9d8f, com.hayan.dividend.domain.Dividend@4d82e711, com.hayan.dividend.domain.Dividend@1eec20e4, com.hayan.dividend.domain.Dividend@79dcdad3, com.hayan.dividend.domain.Dividend@19ab2782, com.hayan.dividend.domain.Dividend@434bf1c9, com.hayan.dividend.domain.Dividend@3c5f1244, com.hayan.dividend.domain.Dividend@23ca4d5e, com.hayan.dividend.domain.Dividend@631de992, com.hayan.dividend.domain.Dividend@7fc49981, com.hayan.dividend.domain.Dividend@3b4d690f, com.hayan.dividend.domain.Dividend@4a9c7385, com.hayan.dividend.domain.Dividend@4641523d, com.hayan.dividend.domain.Dividend@1d12d3e5, com.hayan.dividend.domain.Dividend@4d47d459, com.hayan.dividend.domain.Dividend@64ee962f, com.hayan.dividend.domain.Dividend@28f2f035, com.hayan.dividend.domain.Dividend@23749335, com.hayan.dividend.domain.Dividend@50627e1e, com.hayan.dividend.domain.Dividend@402dc5d3, com.hayan.dividend.domain.Dividend@7f61e6bb, com.hayan.dividend.domain.Dividend@788b3f59, com.hayan.dividend.domain.Dividend@3b5a2cd8, com.hayan.dividend.domain.Dividend@1577753d, com.hayan.dividend.domain.Dividend@65531d16, com.hayan.dividend.domain.Dividend@44039712, com.hayan.dividend.domain.Dividend@2ed54fa6, com.hayan.dividend.domain.Dividend@a519dc, com.hayan.dividend.domain.Dividend@7de30f73, com.hayan.dividend.domain.Dividend@2500acda, com.hayan.dividend.domain.Dividend@21ac6fa3, com.hayan.dividend.domain.Dividend@9efe9b3, com.hayan.dividend.domain.Dividend@6c92f76a, com.hayan.dividend.domain.Dividend@4c54e05e, com.hayan.dividend.domain.Dividend@e475f00]
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1355 ms
2024-09-05 04:20:01 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@1938258a, com.hayan.dividend.domain.Dividend@22e9dec5, com.hayan.dividend.domain.Dividend@72c65262, com.hayan.dividend.domain.Dividend@1344e3a5, com.hayan.dividend.domain.Dividend@4b889032, com.hayan.dividend.domain.Dividend@27fb7070, com.hayan.dividend.domain.Dividend@67ee63af, com.hayan.dividend.domain.Dividend@5303fd3c, com.hayan.dividend.domain.Dividend@5c05ee6e, com.hayan.dividend.domain.Dividend@20817d6e, com.hayan.dividend.domain.Dividend@346691ca, com.hayan.dividend.domain.Dividend@78406067, com.hayan.dividend.domain.Dividend@bc5979f, com.hayan.dividend.domain.Dividend@2084f184, com.hayan.dividend.domain.Dividend@206cdc9f, com.hayan.dividend.domain.Dividend@5bd4c3ad, com.hayan.dividend.domain.Dividend@7c8ace27, com.hayan.dividend.domain.Dividend@7b8508e3, com.hayan.dividend.domain.Dividend@3d4bbb28, com.hayan.dividend.domain.Dividend@40ffce87, com.hayan.dividend.domain.Dividend@6aaedb49, com.hayan.dividend.domain.Dividend@39bf04ef, com.hayan.dividend.domain.Dividend@59cd7a0b, com.hayan.dividend.domain.Dividend@67780c43, com.hayan.dividend.domain.Dividend@7b10e776, com.hayan.dividend.domain.Dividend@3ac90c87, com.hayan.dividend.domain.Dividend@8e634f7, com.hayan.dividend.domain.Dividend@2f5b3bbc, com.hayan.dividend.domain.Dividend@538c5276, com.hayan.dividend.domain.Dividend@2153c1b4, com.hayan.dividend.domain.Dividend@182b08e5, com.hayan.dividend.domain.Dividend@6edb5687, com.hayan.dividend.domain.Dividend@5ff5a6c8, com.hayan.dividend.domain.Dividend@601492e3, com.hayan.dividend.domain.Dividend@2038c224, com.hayan.dividend.domain.Dividend@14e3d7ca, com.hayan.dividend.domain.Dividend@66d2f078, com.hayan.dividend.domain.Dividend@2215e5cb, com.hayan.dividend.domain.Dividend@445a3a4f, com.hayan.dividend.domain.Dividend@4e0df889, com.hayan.dividend.domain.Dividend@3f2d8000, com.hayan.dividend.domain.Dividend@321b1193, com.hayan.dividend.domain.Dividend@2786cddd, com.hayan.dividend.domain.Dividend@6eea014, com.hayan.dividend.domain.Dividend@55100d49, com.hayan.dividend.domain.Dividend@3fed09f1, com.hayan.dividend.domain.Dividend@2e94d3f4, com.hayan.dividend.domain.Dividend@5d093832, com.hayan.dividend.domain.Dividend@8260c9f, com.hayan.dividend.domain.Dividend@5f532eeb, com.hayan.dividend.domain.Dividend@57d04d86, com.hayan.dividend.domain.Dividend@430c27e6, com.hayan.dividend.domain.Dividend@7b7699ec, com.hayan.dividend.domain.Dividend@3d14c41f, com.hayan.dividend.domain.Dividend@687d0246, com.hayan.dividend.domain.Dividend@4a6c3bb8, com.hayan.dividend.domain.Dividend@51a62e0, com.hayan.dividend.domain.Dividend@1eb56a60, com.hayan.dividend.domain.Dividend@1eda24c2, com.hayan.dividend.domain.Dividend@35c07d5a, com.hayan.dividend.domain.Dividend@631b1460, com.hayan.dividend.domain.Dividend@56c88409, com.hayan.dividend.domain.Dividend@197b5626, com.hayan.dividend.domain.Dividend@2f67c2fe, com.hayan.dividend.domain.Dividend@14e47b66, com.hayan.dividend.domain.Dividend@69e4d3f, com.hayan.dividend.domain.Dividend@4517e1ac, com.hayan.dividend.domain.Dividend@54f6abc2, com.hayan.dividend.domain.Dividend@637ec571, com.hayan.dividend.domain.Dividend@177d8b94, com.hayan.dividend.domain.Dividend@6d9d0256, com.hayan.dividend.domain.Dividend@c541c9c, com.hayan.dividend.domain.Dividend@1994052a, com.hayan.dividend.domain.Dividend@62ce1ca7, com.hayan.dividend.domain.Dividend@67c43d1a, com.hayan.dividend.domain.Dividend@4bd87d82, com.hayan.dividend.domain.Dividend@725c8c86, com.hayan.dividend.domain.Dividend@60e59d4e, com.hayan.dividend.domain.Dividend@268f50a5, com.hayan.dividend.domain.Dividend@2eb30d9b, com.hayan.dividend.domain.Dividend@389d8c77, com.hayan.dividend.domain.Dividend@74de69c7, com.hayan.dividend.domain.Dividend@28881581, com.hayan.dividend.domain.Dividend@1ee11ade, com.hayan.dividend.domain.Dividend@4acbc341, com.hayan.dividend.domain.Dividend@4ddc0b8e, com.hayan.dividend.domain.Dividend@25902ba9, com.hayan.dividend.domain.Dividend@3331e22f, com.hayan.dividend.domain.Dividend@27f4fec3, com.hayan.dividend.domain.Dividend@a5901c8, com.hayan.dividend.domain.Dividend@2eb0ae49, com.hayan.dividend.domain.Dividend@122c112a, com.hayan.dividend.domain.Dividend@12aee74a, com.hayan.dividend.domain.Dividend@503bf396, com.hayan.dividend.domain.Dividend@7b52cd3e, com.hayan.dividend.domain.Dividend@905263f, com.hayan.dividend.domain.Dividend@6cf414e2, com.hayan.dividend.domain.Dividend@635ceda9, com.hayan.dividend.domain.Dividend@e8af7c1, com.hayan.dividend.domain.Dividend@2e1e1cf1, com.hayan.dividend.domain.Dividend@62015ed4, com.hayan.dividend.domain.Dividend@6634d698, com.hayan.dividend.domain.Dividend@3f590160, com.hayan.dividend.domain.Dividend@61fe7bee, com.hayan.dividend.domain.Dividend@9e16efb, com.hayan.dividend.domain.Dividend@4921f949, com.hayan.dividend.domain.Dividend@3e04a30c, com.hayan.dividend.domain.Dividend@2c378e29, com.hayan.dividend.domain.Dividend@2ea3abe2, com.hayan.dividend.domain.Dividend@680ef4ce, com.hayan.dividend.domain.Dividend@73092600, com.hayan.dividend.domain.Dividend@63dfa88e, com.hayan.dividend.domain.Dividend@5010f3ac, com.hayan.dividend.domain.Dividend@4fa7c5e4, com.hayan.dividend.domain.Dividend@75a4c336, com.hayan.dividend.domain.Dividend@6b219ed4, com.hayan.dividend.domain.Dividend@3cfb9d8f, com.hayan.dividend.domain.Dividend@4d82e711, com.hayan.dividend.domain.Dividend@1eec20e4, com.hayan.dividend.domain.Dividend@79dcdad3, com.hayan.dividend.domain.Dividend@19ab2782, com.hayan.dividend.domain.Dividend@434bf1c9, com.hayan.dividend.domain.Dividend@3c5f1244, com.hayan.dividend.domain.Dividend@23ca4d5e, com.hayan.dividend.domain.Dividend@631de992, com.hayan.dividend.domain.Dividend@7fc49981, com.hayan.dividend.domain.Dividend@3b4d690f, com.hayan.dividend.domain.Dividend@4a9c7385, com.hayan.dividend.domain.Dividend@4641523d, com.hayan.dividend.domain.Dividend@1d12d3e5, com.hayan.dividend.domain.Dividend@4d47d459, com.hayan.dividend.domain.Dividend@64ee962f, com.hayan.dividend.domain.Dividend@28f2f035, com.hayan.dividend.domain.Dividend@23749335, com.hayan.dividend.domain.Dividend@50627e1e, com.hayan.dividend.domain.Dividend@402dc5d3, com.hayan.dividend.domain.Dividend@7f61e6bb, com.hayan.dividend.domain.Dividend@788b3f59, com.hayan.dividend.domain.Dividend@3b5a2cd8, com.hayan.dividend.domain.Dividend@1577753d, com.hayan.dividend.domain.Dividend@65531d16, com.hayan.dividend.domain.Dividend@44039712, com.hayan.dividend.domain.Dividend@2ed54fa6, com.hayan.dividend.domain.Dividend@a519dc, com.hayan.dividend.domain.Dividend@7de30f73, com.hayan.dividend.domain.Dividend@2500acda, com.hayan.dividend.domain.Dividend@21ac6fa3, com.hayan.dividend.domain.Dividend@9efe9b3, com.hayan.dividend.domain.Dividend@6c92f76a, com.hayan.dividend.domain.Dividend@4c54e05e, com.hayan.dividend.domain.Dividend@e475f00]]
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 13 ms
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [com.hayan.dividend.util.CompanyAddedEvent@332e63ff]
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3053 ms
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@2557134c
2024-09-05 04:20:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3056 ms
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:20:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:20:05 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [co]
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [co]
2024-09-05 04:20:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:20:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [co]
2024-09-05 04:20:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleCustomException with arguments: [com.hayan.dividend.exception.CustomException: 존재하지 않는 회사입니다.]
2024-09-05 04:20:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleCustomException with result: <404 NOT_FOUND Not Found,ErrorResponse[status=404, name=COMPANY_NOT_FOUND, message=존재하지 않는 회사입니다.],[]>
2024-09-05 04:20:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleCustomException in 1 ms
2024-09-05 04:20:07 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [com.hayan.dividend.exception.CustomException: 존재하지 않는 회사입니다.]
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:20:10 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:20:10 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [c]
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [c]
2024-09-05 04:20:10 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:20:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [c]
2024-09-05 04:20:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@4951ce9
2024-09-05 04:20:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1699 ms
2024-09-05 04:20:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@4951ce9]
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@667948b5, com.hayan.dividend.domain.Dividend@4aa762c7, com.hayan.dividend.domain.Dividend@4bf732cd, com.hayan.dividend.domain.Dividend@3277e8aa, com.hayan.dividend.domain.Dividend@1ee732b1, com.hayan.dividend.domain.Dividend@6fa7caf0, com.hayan.dividend.domain.Dividend@1db4fc93, com.hayan.dividend.domain.Dividend@100b7537, com.hayan.dividend.domain.Dividend@37deaf3d, com.hayan.dividend.domain.Dividend@667f137c, com.hayan.dividend.domain.Dividend@5c952b44, com.hayan.dividend.domain.Dividend@17fc5f2c, com.hayan.dividend.domain.Dividend@5599bda9, com.hayan.dividend.domain.Dividend@4be3b095, com.hayan.dividend.domain.Dividend@3e597da6, com.hayan.dividend.domain.Dividend@4ba9407e, com.hayan.dividend.domain.Dividend@53c5d857, com.hayan.dividend.domain.Dividend@5f4bda2, com.hayan.dividend.domain.Dividend@70b554f7, com.hayan.dividend.domain.Dividend@719e402f, com.hayan.dividend.domain.Dividend@c64392b, com.hayan.dividend.domain.Dividend@2c5d8ca8, com.hayan.dividend.domain.Dividend@76957738, com.hayan.dividend.domain.Dividend@7509cefd, com.hayan.dividend.domain.Dividend@58891c16, com.hayan.dividend.domain.Dividend@1871f363, com.hayan.dividend.domain.Dividend@45006be2, com.hayan.dividend.domain.Dividend@7ec53b99, com.hayan.dividend.domain.Dividend@6e3ce1fb, com.hayan.dividend.domain.Dividend@7941edb4, com.hayan.dividend.domain.Dividend@3f58d605, com.hayan.dividend.domain.Dividend@68962b84, com.hayan.dividend.domain.Dividend@612c2c54, com.hayan.dividend.domain.Dividend@17f65188, com.hayan.dividend.domain.Dividend@6e67458d, com.hayan.dividend.domain.Dividend@377489ce, com.hayan.dividend.domain.Dividend@37ba5df8, com.hayan.dividend.domain.Dividend@12653096, com.hayan.dividend.domain.Dividend@467a447a, com.hayan.dividend.domain.Dividend@55539f82, com.hayan.dividend.domain.Dividend@30e34d4d, com.hayan.dividend.domain.Dividend@bb92a47, com.hayan.dividend.domain.Dividend@1ff4f6de, com.hayan.dividend.domain.Dividend@5612c52d, com.hayan.dividend.domain.Dividend@7cb17387, com.hayan.dividend.domain.Dividend@3e189544, com.hayan.dividend.domain.Dividend@662c65f, com.hayan.dividend.domain.Dividend@46194013, com.hayan.dividend.domain.Dividend@31433e1c, com.hayan.dividend.domain.Dividend@4b8b2fc5, com.hayan.dividend.domain.Dividend@5b4b58d5, com.hayan.dividend.domain.Dividend@575e9277, com.hayan.dividend.domain.Dividend@7f45f55e, com.hayan.dividend.domain.Dividend@6d221874, com.hayan.dividend.domain.Dividend@6cae68f5, com.hayan.dividend.domain.Dividend@4fc0823d, com.hayan.dividend.domain.Dividend@1fff719e, com.hayan.dividend.domain.Dividend@62632bad, com.hayan.dividend.domain.Dividend@7d950ed4, com.hayan.dividend.domain.Dividend@368fba31, com.hayan.dividend.domain.Dividend@52185eff, com.hayan.dividend.domain.Dividend@295d2952, com.hayan.dividend.domain.Dividend@7c6b6103, com.hayan.dividend.domain.Dividend@37fe128d, com.hayan.dividend.domain.Dividend@27815d2b, com.hayan.dividend.domain.Dividend@6756e730, com.hayan.dividend.domain.Dividend@4092f1a0, com.hayan.dividend.domain.Dividend@73ff945, com.hayan.dividend.domain.Dividend@2afa948c, com.hayan.dividend.domain.Dividend@7a458984, com.hayan.dividend.domain.Dividend@2d0d689d, com.hayan.dividend.domain.Dividend@550049a8, com.hayan.dividend.domain.Dividend@2b20f970, com.hayan.dividend.domain.Dividend@7d7f4c39, com.hayan.dividend.domain.Dividend@3b709a8b, com.hayan.dividend.domain.Dividend@6ceac944, com.hayan.dividend.domain.Dividend@40ad56d0, com.hayan.dividend.domain.Dividend@47b4d478, com.hayan.dividend.domain.Dividend@782faac7, com.hayan.dividend.domain.Dividend@42b5fc6f, com.hayan.dividend.domain.Dividend@6804293f, com.hayan.dividend.domain.Dividend@9722753, com.hayan.dividend.domain.Dividend@c8ecd28, com.hayan.dividend.domain.Dividend@61b50e52, com.hayan.dividend.domain.Dividend@28b18e8a, com.hayan.dividend.domain.Dividend@30616c70, com.hayan.dividend.domain.Dividend@4a7c00d9, com.hayan.dividend.domain.Dividend@3f2405a, com.hayan.dividend.domain.Dividend@27134b70, com.hayan.dividend.domain.Dividend@1c2ab10e, com.hayan.dividend.domain.Dividend@367a109a, com.hayan.dividend.domain.Dividend@279b669f, com.hayan.dividend.domain.Dividend@1aeef1d7, com.hayan.dividend.domain.Dividend@53858145, com.hayan.dividend.domain.Dividend@351db56f, com.hayan.dividend.domain.Dividend@49ce82cd, com.hayan.dividend.domain.Dividend@2443a26a, com.hayan.dividend.domain.Dividend@5bb3900e, com.hayan.dividend.domain.Dividend@3ddf0da, com.hayan.dividend.domain.Dividend@3e38c286, com.hayan.dividend.domain.Dividend@7d167d9, com.hayan.dividend.domain.Dividend@40a5a4cd, com.hayan.dividend.domain.Dividend@2c12c723, com.hayan.dividend.domain.Dividend@54c61cd5, com.hayan.dividend.domain.Dividend@5825463b, com.hayan.dividend.domain.Dividend@354b123e, com.hayan.dividend.domain.Dividend@fdae06b, com.hayan.dividend.domain.Dividend@6b1e65f1, com.hayan.dividend.domain.Dividend@19f8e237, com.hayan.dividend.domain.Dividend@744fc9d4, com.hayan.dividend.domain.Dividend@2cceb68e, com.hayan.dividend.domain.Dividend@34677f0b, com.hayan.dividend.domain.Dividend@6ad0caea, com.hayan.dividend.domain.Dividend@605baf0d, com.hayan.dividend.domain.Dividend@39f80f4e, com.hayan.dividend.domain.Dividend@3668b05d, com.hayan.dividend.domain.Dividend@5a03abe0, com.hayan.dividend.domain.Dividend@671d546a, com.hayan.dividend.domain.Dividend@1e66b5b8, com.hayan.dividend.domain.Dividend@6dff0471, com.hayan.dividend.domain.Dividend@2a64fe85, com.hayan.dividend.domain.Dividend@27d751a7, com.hayan.dividend.domain.Dividend@c37fb90, com.hayan.dividend.domain.Dividend@197ebaeb, com.hayan.dividend.domain.Dividend@1463ff97, com.hayan.dividend.domain.Dividend@924ded5, com.hayan.dividend.domain.Dividend@3afc5f1a, com.hayan.dividend.domain.Dividend@56b9034c, com.hayan.dividend.domain.Dividend@5dadd14b, com.hayan.dividend.domain.Dividend@72d06e5d, com.hayan.dividend.domain.Dividend@2a8ceb92, com.hayan.dividend.domain.Dividend@34b12eec, com.hayan.dividend.domain.Dividend@72596b8, com.hayan.dividend.domain.Dividend@7676b287, com.hayan.dividend.domain.Dividend@3beb07a0, com.hayan.dividend.domain.Dividend@610987f, com.hayan.dividend.domain.Dividend@2dab4e53, com.hayan.dividend.domain.Dividend@6e0a33eb, com.hayan.dividend.domain.Dividend@d3fff8d, com.hayan.dividend.domain.Dividend@fee4d35, com.hayan.dividend.domain.Dividend@78c0434d, com.hayan.dividend.domain.Dividend@47eaa2d5, com.hayan.dividend.domain.Dividend@35dbfe32]
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1204 ms
2024-09-05 04:20:13 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@667948b5, com.hayan.dividend.domain.Dividend@4aa762c7, com.hayan.dividend.domain.Dividend@4bf732cd, com.hayan.dividend.domain.Dividend@3277e8aa, com.hayan.dividend.domain.Dividend@1ee732b1, com.hayan.dividend.domain.Dividend@6fa7caf0, com.hayan.dividend.domain.Dividend@1db4fc93, com.hayan.dividend.domain.Dividend@100b7537, com.hayan.dividend.domain.Dividend@37deaf3d, com.hayan.dividend.domain.Dividend@667f137c, com.hayan.dividend.domain.Dividend@5c952b44, com.hayan.dividend.domain.Dividend@17fc5f2c, com.hayan.dividend.domain.Dividend@5599bda9, com.hayan.dividend.domain.Dividend@4be3b095, com.hayan.dividend.domain.Dividend@3e597da6, com.hayan.dividend.domain.Dividend@4ba9407e, com.hayan.dividend.domain.Dividend@53c5d857, com.hayan.dividend.domain.Dividend@5f4bda2, com.hayan.dividend.domain.Dividend@70b554f7, com.hayan.dividend.domain.Dividend@719e402f, com.hayan.dividend.domain.Dividend@c64392b, com.hayan.dividend.domain.Dividend@2c5d8ca8, com.hayan.dividend.domain.Dividend@76957738, com.hayan.dividend.domain.Dividend@7509cefd, com.hayan.dividend.domain.Dividend@58891c16, com.hayan.dividend.domain.Dividend@1871f363, com.hayan.dividend.domain.Dividend@45006be2, com.hayan.dividend.domain.Dividend@7ec53b99, com.hayan.dividend.domain.Dividend@6e3ce1fb, com.hayan.dividend.domain.Dividend@7941edb4, com.hayan.dividend.domain.Dividend@3f58d605, com.hayan.dividend.domain.Dividend@68962b84, com.hayan.dividend.domain.Dividend@612c2c54, com.hayan.dividend.domain.Dividend@17f65188, com.hayan.dividend.domain.Dividend@6e67458d, com.hayan.dividend.domain.Dividend@377489ce, com.hayan.dividend.domain.Dividend@37ba5df8, com.hayan.dividend.domain.Dividend@12653096, com.hayan.dividend.domain.Dividend@467a447a, com.hayan.dividend.domain.Dividend@55539f82, com.hayan.dividend.domain.Dividend@30e34d4d, com.hayan.dividend.domain.Dividend@bb92a47, com.hayan.dividend.domain.Dividend@1ff4f6de, com.hayan.dividend.domain.Dividend@5612c52d, com.hayan.dividend.domain.Dividend@7cb17387, com.hayan.dividend.domain.Dividend@3e189544, com.hayan.dividend.domain.Dividend@662c65f, com.hayan.dividend.domain.Dividend@46194013, com.hayan.dividend.domain.Dividend@31433e1c, com.hayan.dividend.domain.Dividend@4b8b2fc5, com.hayan.dividend.domain.Dividend@5b4b58d5, com.hayan.dividend.domain.Dividend@575e9277, com.hayan.dividend.domain.Dividend@7f45f55e, com.hayan.dividend.domain.Dividend@6d221874, com.hayan.dividend.domain.Dividend@6cae68f5, com.hayan.dividend.domain.Dividend@4fc0823d, com.hayan.dividend.domain.Dividend@1fff719e, com.hayan.dividend.domain.Dividend@62632bad, com.hayan.dividend.domain.Dividend@7d950ed4, com.hayan.dividend.domain.Dividend@368fba31, com.hayan.dividend.domain.Dividend@52185eff, com.hayan.dividend.domain.Dividend@295d2952, com.hayan.dividend.domain.Dividend@7c6b6103, com.hayan.dividend.domain.Dividend@37fe128d, com.hayan.dividend.domain.Dividend@27815d2b, com.hayan.dividend.domain.Dividend@6756e730, com.hayan.dividend.domain.Dividend@4092f1a0, com.hayan.dividend.domain.Dividend@73ff945, com.hayan.dividend.domain.Dividend@2afa948c, com.hayan.dividend.domain.Dividend@7a458984, com.hayan.dividend.domain.Dividend@2d0d689d, com.hayan.dividend.domain.Dividend@550049a8, com.hayan.dividend.domain.Dividend@2b20f970, com.hayan.dividend.domain.Dividend@7d7f4c39, com.hayan.dividend.domain.Dividend@3b709a8b, com.hayan.dividend.domain.Dividend@6ceac944, com.hayan.dividend.domain.Dividend@40ad56d0, com.hayan.dividend.domain.Dividend@47b4d478, com.hayan.dividend.domain.Dividend@782faac7, com.hayan.dividend.domain.Dividend@42b5fc6f, com.hayan.dividend.domain.Dividend@6804293f, com.hayan.dividend.domain.Dividend@9722753, com.hayan.dividend.domain.Dividend@c8ecd28, com.hayan.dividend.domain.Dividend@61b50e52, com.hayan.dividend.domain.Dividend@28b18e8a, com.hayan.dividend.domain.Dividend@30616c70, com.hayan.dividend.domain.Dividend@4a7c00d9, com.hayan.dividend.domain.Dividend@3f2405a, com.hayan.dividend.domain.Dividend@27134b70, com.hayan.dividend.domain.Dividend@1c2ab10e, com.hayan.dividend.domain.Dividend@367a109a, com.hayan.dividend.domain.Dividend@279b669f, com.hayan.dividend.domain.Dividend@1aeef1d7, com.hayan.dividend.domain.Dividend@53858145, com.hayan.dividend.domain.Dividend@351db56f, com.hayan.dividend.domain.Dividend@49ce82cd, com.hayan.dividend.domain.Dividend@2443a26a, com.hayan.dividend.domain.Dividend@5bb3900e, com.hayan.dividend.domain.Dividend@3ddf0da, com.hayan.dividend.domain.Dividend@3e38c286, com.hayan.dividend.domain.Dividend@7d167d9, com.hayan.dividend.domain.Dividend@40a5a4cd, com.hayan.dividend.domain.Dividend@2c12c723, com.hayan.dividend.domain.Dividend@54c61cd5, com.hayan.dividend.domain.Dividend@5825463b, com.hayan.dividend.domain.Dividend@354b123e, com.hayan.dividend.domain.Dividend@fdae06b, com.hayan.dividend.domain.Dividend@6b1e65f1, com.hayan.dividend.domain.Dividend@19f8e237, com.hayan.dividend.domain.Dividend@744fc9d4, com.hayan.dividend.domain.Dividend@2cceb68e, com.hayan.dividend.domain.Dividend@34677f0b, com.hayan.dividend.domain.Dividend@6ad0caea, com.hayan.dividend.domain.Dividend@605baf0d, com.hayan.dividend.domain.Dividend@39f80f4e, com.hayan.dividend.domain.Dividend@3668b05d, com.hayan.dividend.domain.Dividend@5a03abe0, com.hayan.dividend.domain.Dividend@671d546a, com.hayan.dividend.domain.Dividend@1e66b5b8, com.hayan.dividend.domain.Dividend@6dff0471, com.hayan.dividend.domain.Dividend@2a64fe85, com.hayan.dividend.domain.Dividend@27d751a7, com.hayan.dividend.domain.Dividend@c37fb90, com.hayan.dividend.domain.Dividend@197ebaeb, com.hayan.dividend.domain.Dividend@1463ff97, com.hayan.dividend.domain.Dividend@924ded5, com.hayan.dividend.domain.Dividend@3afc5f1a, com.hayan.dividend.domain.Dividend@56b9034c, com.hayan.dividend.domain.Dividend@5dadd14b, com.hayan.dividend.domain.Dividend@72d06e5d, com.hayan.dividend.domain.Dividend@2a8ceb92, com.hayan.dividend.domain.Dividend@34b12eec, com.hayan.dividend.domain.Dividend@72596b8, com.hayan.dividend.domain.Dividend@7676b287, com.hayan.dividend.domain.Dividend@3beb07a0, com.hayan.dividend.domain.Dividend@610987f, com.hayan.dividend.domain.Dividend@2dab4e53, com.hayan.dividend.domain.Dividend@6e0a33eb, com.hayan.dividend.domain.Dividend@d3fff8d, com.hayan.dividend.domain.Dividend@fee4d35, com.hayan.dividend.domain.Dividend@78c0434d, com.hayan.dividend.domain.Dividend@47eaa2d5, com.hayan.dividend.domain.Dividend@35dbfe32]]
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 6 ms
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [com.hayan.dividend.util.CompanyAddedEvent@2b9c01ad]
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2915 ms
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@7ca43c80
2024-09-05 04:20:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2915 ms
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 0 ms
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:20:20 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:20:20 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [aaa]
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [aaa]
2024-09-05 04:20:20 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:20:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [aaa]
2024-09-05 04:20:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@12528fb7
2024-09-05 04:20:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 2247 ms
2024-09-05 04:20:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@12528fb7]
2024-09-05 04:20:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@67dbd493, com.hayan.dividend.domain.Dividend@6172c0e8, com.hayan.dividend.domain.Dividend@eb8219c, com.hayan.dividend.domain.Dividend@14fab64f, com.hayan.dividend.domain.Dividend@2d3c970f, com.hayan.dividend.domain.Dividend@5a3e67c0, com.hayan.dividend.domain.Dividend@154519da, com.hayan.dividend.domain.Dividend@544c8df3, com.hayan.dividend.domain.Dividend@1d01fc9a, com.hayan.dividend.domain.Dividend@34a8989d, com.hayan.dividend.domain.Dividend@99ecc1b, com.hayan.dividend.domain.Dividend@390dfbce, com.hayan.dividend.domain.Dividend@2bfa2559, com.hayan.dividend.domain.Dividend@5b662ccb, com.hayan.dividend.domain.Dividend@2467cda8, com.hayan.dividend.domain.Dividend@72628161, com.hayan.dividend.domain.Dividend@8c8b299, com.hayan.dividend.domain.Dividend@62a2c73f, com.hayan.dividend.domain.Dividend@78324c4e, com.hayan.dividend.domain.Dividend@1e3db3a0, com.hayan.dividend.domain.Dividend@532c8684, com.hayan.dividend.domain.Dividend@27c338e1, com.hayan.dividend.domain.Dividend@4df9406b, com.hayan.dividend.domain.Dividend@3e2a4ac7, com.hayan.dividend.domain.Dividend@985e320, com.hayan.dividend.domain.Dividend@373fd6c1, com.hayan.dividend.domain.Dividend@30c22255, com.hayan.dividend.domain.Dividend@5c523af8, com.hayan.dividend.domain.Dividend@7ae84eb1, com.hayan.dividend.domain.Dividend@332816f3, com.hayan.dividend.domain.Dividend@12594a49, com.hayan.dividend.domain.Dividend@5f112700, com.hayan.dividend.domain.Dividend@67b47795, com.hayan.dividend.domain.Dividend@14586a1e, com.hayan.dividend.domain.Dividend@4c0b61de, com.hayan.dividend.domain.Dividend@1af46678, com.hayan.dividend.domain.Dividend@5e38a26c, com.hayan.dividend.domain.Dividend@9e73b2f, com.hayan.dividend.domain.Dividend@1ef5be5c, com.hayan.dividend.domain.Dividend@270bcc5c, com.hayan.dividend.domain.Dividend@3cbb3113, com.hayan.dividend.domain.Dividend@c354be8, com.hayan.dividend.domain.Dividend@3f01036c, com.hayan.dividend.domain.Dividend@469151fc, com.hayan.dividend.domain.Dividend@2347c394, com.hayan.dividend.domain.Dividend@50bb61f, com.hayan.dividend.domain.Dividend@32a6dfb1]
2024-09-05 04:20:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1215 ms
2024-09-05 04:20:23 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:20:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@67dbd493, com.hayan.dividend.domain.Dividend@6172c0e8, com.hayan.dividend.domain.Dividend@eb8219c, com.hayan.dividend.domain.Dividend@14fab64f, com.hayan.dividend.domain.Dividend@2d3c970f, com.hayan.dividend.domain.Dividend@5a3e67c0, com.hayan.dividend.domain.Dividend@154519da, com.hayan.dividend.domain.Dividend@544c8df3, com.hayan.dividend.domain.Dividend@1d01fc9a, com.hayan.dividend.domain.Dividend@34a8989d, com.hayan.dividend.domain.Dividend@99ecc1b, com.hayan.dividend.domain.Dividend@390dfbce, com.hayan.dividend.domain.Dividend@2bfa2559, com.hayan.dividend.domain.Dividend@5b662ccb, com.hayan.dividend.domain.Dividend@2467cda8, com.hayan.dividend.domain.Dividend@72628161, com.hayan.dividend.domain.Dividend@8c8b299, com.hayan.dividend.domain.Dividend@62a2c73f, com.hayan.dividend.domain.Dividend@78324c4e, com.hayan.dividend.domain.Dividend@1e3db3a0, com.hayan.dividend.domain.Dividend@532c8684, com.hayan.dividend.domain.Dividend@27c338e1, com.hayan.dividend.domain.Dividend@4df9406b, com.hayan.dividend.domain.Dividend@3e2a4ac7, com.hayan.dividend.domain.Dividend@985e320, com.hayan.dividend.domain.Dividend@373fd6c1, com.hayan.dividend.domain.Dividend@30c22255, com.hayan.dividend.domain.Dividend@5c523af8, com.hayan.dividend.domain.Dividend@7ae84eb1, com.hayan.dividend.domain.Dividend@332816f3, com.hayan.dividend.domain.Dividend@12594a49, com.hayan.dividend.domain.Dividend@5f112700, com.hayan.dividend.domain.Dividend@67b47795, com.hayan.dividend.domain.Dividend@14586a1e, com.hayan.dividend.domain.Dividend@4c0b61de, com.hayan.dividend.domain.Dividend@1af46678, com.hayan.dividend.domain.Dividend@5e38a26c, com.hayan.dividend.domain.Dividend@9e73b2f, com.hayan.dividend.domain.Dividend@1ef5be5c, com.hayan.dividend.domain.Dividend@270bcc5c, com.hayan.dividend.domain.Dividend@3cbb3113, com.hayan.dividend.domain.Dividend@c354be8, com.hayan.dividend.domain.Dividend@3f01036c, com.hayan.dividend.domain.Dividend@469151fc, com.hayan.dividend.domain.Dividend@2347c394, com.hayan.dividend.domain.Dividend@50bb61f, com.hayan.dividend.domain.Dividend@32a6dfb1]]
2024-09-05 04:20:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:20:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 2 ms
2024-09-05 04:20:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [com.hayan.dividend.util.CompanyAddedEvent@613b6442]
2024-09-05 04:20:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:20:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 04:20:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:20:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3469 ms
2024-09-05 04:20:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@3dacd509
2024-09-05 04:20:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3470 ms
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 3 ms
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:20:25 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:20:25 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 3 ms
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-05 04:20:25 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:20:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-05 04:20:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@418d3266
2024-09-05 04:20:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1345 ms
2024-09-05 04:20:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@418d3266]
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@55753d8b, com.hayan.dividend.domain.Dividend@7d432b41, com.hayan.dividend.domain.Dividend@26d02f1f, com.hayan.dividend.domain.Dividend@69ba5616, com.hayan.dividend.domain.Dividend@15dfb7cf, com.hayan.dividend.domain.Dividend@71a28f16, com.hayan.dividend.domain.Dividend@56adfeea, com.hayan.dividend.domain.Dividend@6d9c08cf, com.hayan.dividend.domain.Dividend@515bb7c, com.hayan.dividend.domain.Dividend@60aa5ef7, com.hayan.dividend.domain.Dividend@5949a6a6, com.hayan.dividend.domain.Dividend@549e1730, com.hayan.dividend.domain.Dividend@7cf89884, com.hayan.dividend.domain.Dividend@4e972c0a, com.hayan.dividend.domain.Dividend@5a7fcfe8, com.hayan.dividend.domain.Dividend@7e7c6400, com.hayan.dividend.domain.Dividend@46f8fff3, com.hayan.dividend.domain.Dividend@31f87c5a, com.hayan.dividend.domain.Dividend@15dce502, com.hayan.dividend.domain.Dividend@89dcfdd, com.hayan.dividend.domain.Dividend@91bbe5a, com.hayan.dividend.domain.Dividend@7b73098f, com.hayan.dividend.domain.Dividend@9f50716, com.hayan.dividend.domain.Dividend@6f70c2d2, com.hayan.dividend.domain.Dividend@3b4d4808, com.hayan.dividend.domain.Dividend@5891119f, com.hayan.dividend.domain.Dividend@79fd602c, com.hayan.dividend.domain.Dividend@10724b93, com.hayan.dividend.domain.Dividend@41ae4c9d, com.hayan.dividend.domain.Dividend@1163a0de, com.hayan.dividend.domain.Dividend@38d5ede, com.hayan.dividend.domain.Dividend@121a3ef, com.hayan.dividend.domain.Dividend@3258ddf2, com.hayan.dividend.domain.Dividend@3e31ee37, com.hayan.dividend.domain.Dividend@57233c81, com.hayan.dividend.domain.Dividend@5b91d351, com.hayan.dividend.domain.Dividend@2fd2329c, com.hayan.dividend.domain.Dividend@1e232107, com.hayan.dividend.domain.Dividend@50aac176, com.hayan.dividend.domain.Dividend@5f48b69, com.hayan.dividend.domain.Dividend@3b0c0f99, com.hayan.dividend.domain.Dividend@3ca03ae6, com.hayan.dividend.domain.Dividend@3a87fd75, com.hayan.dividend.domain.Dividend@1b09968f, com.hayan.dividend.domain.Dividend@402222b0, com.hayan.dividend.domain.Dividend@7de85758, com.hayan.dividend.domain.Dividend@788171c5, com.hayan.dividend.domain.Dividend@2f6b3db4, com.hayan.dividend.domain.Dividend@7e0dbd4b, com.hayan.dividend.domain.Dividend@41e06745, com.hayan.dividend.domain.Dividend@321c39e5]
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1264 ms
2024-09-05 04:20:27 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@55753d8b, com.hayan.dividend.domain.Dividend@7d432b41, com.hayan.dividend.domain.Dividend@26d02f1f, com.hayan.dividend.domain.Dividend@69ba5616, com.hayan.dividend.domain.Dividend@15dfb7cf, com.hayan.dividend.domain.Dividend@71a28f16, com.hayan.dividend.domain.Dividend@56adfeea, com.hayan.dividend.domain.Dividend@6d9c08cf, com.hayan.dividend.domain.Dividend@515bb7c, com.hayan.dividend.domain.Dividend@60aa5ef7, com.hayan.dividend.domain.Dividend@5949a6a6, com.hayan.dividend.domain.Dividend@549e1730, com.hayan.dividend.domain.Dividend@7cf89884, com.hayan.dividend.domain.Dividend@4e972c0a, com.hayan.dividend.domain.Dividend@5a7fcfe8, com.hayan.dividend.domain.Dividend@7e7c6400, com.hayan.dividend.domain.Dividend@46f8fff3, com.hayan.dividend.domain.Dividend@31f87c5a, com.hayan.dividend.domain.Dividend@15dce502, com.hayan.dividend.domain.Dividend@89dcfdd, com.hayan.dividend.domain.Dividend@91bbe5a, com.hayan.dividend.domain.Dividend@7b73098f, com.hayan.dividend.domain.Dividend@9f50716, com.hayan.dividend.domain.Dividend@6f70c2d2, com.hayan.dividend.domain.Dividend@3b4d4808, com.hayan.dividend.domain.Dividend@5891119f, com.hayan.dividend.domain.Dividend@79fd602c, com.hayan.dividend.domain.Dividend@10724b93, com.hayan.dividend.domain.Dividend@41ae4c9d, com.hayan.dividend.domain.Dividend@1163a0de, com.hayan.dividend.domain.Dividend@38d5ede, com.hayan.dividend.domain.Dividend@121a3ef, com.hayan.dividend.domain.Dividend@3258ddf2, com.hayan.dividend.domain.Dividend@3e31ee37, com.hayan.dividend.domain.Dividend@57233c81, com.hayan.dividend.domain.Dividend@5b91d351, com.hayan.dividend.domain.Dividend@2fd2329c, com.hayan.dividend.domain.Dividend@1e232107, com.hayan.dividend.domain.Dividend@50aac176, com.hayan.dividend.domain.Dividend@5f48b69, com.hayan.dividend.domain.Dividend@3b0c0f99, com.hayan.dividend.domain.Dividend@3ca03ae6, com.hayan.dividend.domain.Dividend@3a87fd75, com.hayan.dividend.domain.Dividend@1b09968f, com.hayan.dividend.domain.Dividend@402222b0, com.hayan.dividend.domain.Dividend@7de85758, com.hayan.dividend.domain.Dividend@788171c5, com.hayan.dividend.domain.Dividend@2f6b3db4, com.hayan.dividend.domain.Dividend@7e0dbd4b, com.hayan.dividend.domain.Dividend@41e06745, com.hayan.dividend.domain.Dividend@321c39e5]]
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 3 ms
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [com.hayan.dividend.util.CompanyAddedEvent@6b0df3e3]
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2616 ms
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@687dca36
2024-09-05 04:20:27 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2618 ms
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 2 ms
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:20:30 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:20:30 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 3 ms
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [tslr]
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [tslr]
2024-09-05 04:20:30 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:20:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [tslr]
2024-09-05 04:20:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@1a84680c
2024-09-05 04:20:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1220 ms
2024-09-05 04:20:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@1a84680c]
2024-09-05 04:20:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:20:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:20:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 1 ms
2024-09-05 04:20:33 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 0 ms
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:20:39 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:20:39 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [tsr]
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [tsr]
2024-09-05 04:20:39 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:20:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [tsr]
2024-09-05 04:20:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@2f456a2e
2024-09-05 04:20:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1352 ms
2024-09-05 04:20:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@2f456a2e]
2024-09-05 04:20:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:20:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:20:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 1 ms
2024-09-05 04:20:42 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 16 ms
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:21:02 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:21:02 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 15 ms
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [soxl]
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [soxl]
2024-09-05 04:21:02 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:21:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [soxl]
2024-09-05 04:21:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@5a278816
2024-09-05 04:21:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1402 ms
2024-09-05 04:21:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@5a278816]
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@19f63b42, com.hayan.dividend.domain.Dividend@7f777752, com.hayan.dividend.domain.Dividend@5639e48, com.hayan.dividend.domain.Dividend@bd383ea, com.hayan.dividend.domain.Dividend@23d785f9, com.hayan.dividend.domain.Dividend@67deab36, com.hayan.dividend.domain.Dividend@7ed6f85b, com.hayan.dividend.domain.Dividend@698de8b8, com.hayan.dividend.domain.Dividend@76ea403d, com.hayan.dividend.domain.Dividend@647fd2cd, com.hayan.dividend.domain.Dividend@2da2ea39, com.hayan.dividend.domain.Dividend@2bec1f1d, com.hayan.dividend.domain.Dividend@f2359f5, com.hayan.dividend.domain.Dividend@15500b66, com.hayan.dividend.domain.Dividend@2f19c8d7, com.hayan.dividend.domain.Dividend@64462ede, com.hayan.dividend.domain.Dividend@71bf3f52, com.hayan.dividend.domain.Dividend@64a10138, com.hayan.dividend.domain.Dividend@51f220b, com.hayan.dividend.domain.Dividend@507adca8, com.hayan.dividend.domain.Dividend@58b72c5a, com.hayan.dividend.domain.Dividend@34734eb5, com.hayan.dividend.domain.Dividend@48003d4a, com.hayan.dividend.domain.Dividend@4e99377e, com.hayan.dividend.domain.Dividend@2fad170b, com.hayan.dividend.domain.Dividend@105e2ad]
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1087 ms
2024-09-05 04:21:04 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@19f63b42, com.hayan.dividend.domain.Dividend@7f777752, com.hayan.dividend.domain.Dividend@5639e48, com.hayan.dividend.domain.Dividend@bd383ea, com.hayan.dividend.domain.Dividend@23d785f9, com.hayan.dividend.domain.Dividend@67deab36, com.hayan.dividend.domain.Dividend@7ed6f85b, com.hayan.dividend.domain.Dividend@698de8b8, com.hayan.dividend.domain.Dividend@76ea403d, com.hayan.dividend.domain.Dividend@647fd2cd, com.hayan.dividend.domain.Dividend@2da2ea39, com.hayan.dividend.domain.Dividend@2bec1f1d, com.hayan.dividend.domain.Dividend@f2359f5, com.hayan.dividend.domain.Dividend@15500b66, com.hayan.dividend.domain.Dividend@2f19c8d7, com.hayan.dividend.domain.Dividend@64462ede, com.hayan.dividend.domain.Dividend@71bf3f52, com.hayan.dividend.domain.Dividend@64a10138, com.hayan.dividend.domain.Dividend@51f220b, com.hayan.dividend.domain.Dividend@507adca8, com.hayan.dividend.domain.Dividend@58b72c5a, com.hayan.dividend.domain.Dividend@34734eb5, com.hayan.dividend.domain.Dividend@48003d4a, com.hayan.dividend.domain.Dividend@4e99377e, com.hayan.dividend.domain.Dividend@2fad170b, com.hayan.dividend.domain.Dividend@105e2ad]]
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 2 ms
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [com.hayan.dividend.util.CompanyAddedEvent@40bec357]
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2496 ms
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@62f2b835
2024-09-05 04:21:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2498 ms
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:21:12 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:21:12 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [zs]
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [zs]
2024-09-05 04:21:12 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:21:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [zs]
2024-09-05 04:21:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleCustomException with arguments: [com.hayan.dividend.exception.CustomException: 존재하지 않는 회사입니다.]
2024-09-05 04:21:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleCustomException with result: <404 NOT_FOUND Not Found,ErrorResponse[status=404, name=COMPANY_NOT_FOUND, message=존재하지 않는 회사입니다.],[]>
2024-09-05 04:21:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleCustomException in 0 ms
2024-09-05 04:21:14 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [com.hayan.dividend.exception.CustomException: 존재하지 않는 회사입니다.]
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:21:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:21:22 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 6 ms
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [amd]
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [amd]
2024-09-05 04:21:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:21:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [amd]
2024-09-05 04:21:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@6e2d1808
2024-09-05 04:21:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1455 ms
2024-09-05 04:21:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@6e2d1808]
2024-09-05 04:21:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:21:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:21:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 0 ms
2024-09-05 04:21:25 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 0 ms
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:21:37 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:21:37 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [s]
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [s]
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@3374bb3e
2024-09-05 04:21:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 0 ms
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:21:50 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:21:50 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.getAllCompanies with arguments: [0, 3]
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.loadAllCompanies with arguments: [0, 3]
2024-09-05 04:21:50 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-05 04:21:50 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        count(c1_0.id) 
    from
        companies c1_0
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.loadAllCompanies with result: Page 1 of 2 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.loadAllCompanies in 19 ms
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@5b9737cc
2024-09-05 04:21:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.getAllCompanies in 21 ms
2024-09-05 04:21:50 WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:22:04 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:22:04 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.getAllCompanies with arguments: [0, 10]
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.loadAllCompanies with arguments: [0, 10]
2024-09-05 04:22:04 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.loadAllCompanies with result: Page 1 of 1 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.loadAllCompanies in 3 ms
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@72fa2126
2024-09-05 04:22:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.getAllCompanies in 3 ms
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 12 ms
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:22:24 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:22:24 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 11 ms
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [s]
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [s]
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@5f696efa
2024-09-05 04:22:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 7 ms
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:23:57 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:23:57 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 15 ms
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [s]
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [s]
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@5b2e68cd
2024-09-05 04:23:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc3NTA5LCJleHAiOjE3MjU1NjM5MDl9.k2grn29WL-8nSBr4aBKInww7-_cByDdFPpEram1zjZttXnU2VHtR1irJ5oTsim2snK6j-24tYhgVLkl8AHol8A]
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:24:13 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:24:13 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [a]
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [a]
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@29e89cc3
2024-09-05 04:24:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-05 04:26:27 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:26:27 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 04:26:27 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 04:26:27 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 04:26:29 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 04:26:29 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 18351 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 04:26:29 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 04:26:29 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 04:26:29 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 04:26:29 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 04:26:29 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:26:29 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 04:26:29 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 67 ms. Found 3 JPA repository interfaces.
2024-09-05 04:26:29 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:26:29 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 04:26:29 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:26:29 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:26:29 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:26:29 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 04:26:30 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 04:26:30 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 04:26:30 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 04:26:30 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 04:26:30 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 04:26:30 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 823 ms
2024-09-05 04:26:30 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 04:26:30 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 04:26:30 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 04:26:30 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 04:26:30 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 04:26:30 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 04:26:30 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 04:26:30 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 04:26:30 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 04:26:30 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:26:30 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 04:26:30 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 04:26:30 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:26:30 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 04:26:30 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 04:26:30 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 04:26:30 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 04:26:30 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:26:31 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@77efa50b
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 10 ms
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@77efa50b]
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@43b03edb
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@370b05a0
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@2d516d22]
2024-09-05 04:26:31 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@525d38d
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 14 ms
2024-09-05 04:26:31 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@291e8f22]
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@6b5999c8, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@99f0db1, org.springframework.security.web.context.SecurityContextHolderFilter@6091cb88, org.springframework.security.web.header.HeaderWriterFilter@45b57531, org.springframework.security.web.authentication.logout.LogoutFilter@33848d6f, com.hayan.dividend.jwt.JwtAuthenticationFilter@64011b93, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@48ab7769, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3a66eee6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4790b3f9, org.springframework.security.web.session.SessionManagementFilter@15b209d9, org.springframework.security.web.access.ExceptionTranslationFilter@18da4018, org.springframework.security.web.access.intercept.AuthorizationFilter@2c09c5af]]
2024-09-05 04:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-05 04:26:31 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 04:26:31 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 04:26:31 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 04:26:31 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.591 seconds (process running for 2.944)
2024-09-05 04:26:38 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 04:26:38 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 04:26:38 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-05 04:26:38 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:26:38 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:26:38 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 04:26:38 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 04:26:38 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 107 ms
2024-09-05 04:26:38 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:26:38 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:26:38 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@5404734c
2024-09-05 04:26:38 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 114 ms
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:26:40 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:26:40 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 195 ms
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MDAwLCJleHAiOjE3MjU1NjQ0MDB9.uWgeYqaz4LtGaee5QGA2zxN2KA8oyHmblfSwKWop8ZuuDY1_hDNm30I1VJBnH_Y6btbFBMj7TVc1DPomzr3BTw
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 23 ms
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MDAwLCJleHAiOjE3MjU1NjQ0MDB9.uWgeYqaz4LtGaee5QGA2zxN2KA8oyHmblfSwKWop8ZuuDY1_hDNm30I1VJBnH_Y6btbFBMj7TVc1DPomzr3BTw
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 219 ms
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MDAwLCJleHAiOjE3MjU1NjQ0MDB9.uWgeYqaz4LtGaee5QGA2zxN2KA8oyHmblfSwKWop8ZuuDY1_hDNm30I1VJBnH_Y6btbFBMj7TVc1DPomzr3BTw"]>
2024-09-05 04:26:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 220 ms
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MDAwLCJleHAiOjE3MjU1NjQ0MDB9.uWgeYqaz4LtGaee5QGA2zxN2KA8oyHmblfSwKWop8ZuuDY1_hDNm30I1VJBnH_Y6btbFBMj7TVc1DPomzr3BTw]
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 34 ms
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MDAwLCJleHAiOjE3MjU1NjQ0MDB9.uWgeYqaz4LtGaee5QGA2zxN2KA8oyHmblfSwKWop8ZuuDY1_hDNm30I1VJBnH_Y6btbFBMj7TVc1DPomzr3BTw]
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:26:47 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:26:47 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [amd]
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [amd]
2024-09-05 04:26:47 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [amd]
2024-09-05 04:26:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@2101cb2c
2024-09-05 04:26:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1935 ms
2024-09-05 04:26:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@2101cb2c]
2024-09-05 04:26:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:26:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:26:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 3 ms
2024-09-05 04:26:50 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MDAwLCJleHAiOjE3MjU1NjQ0MDB9.uWgeYqaz4LtGaee5QGA2zxN2KA8oyHmblfSwKWop8ZuuDY1_hDNm30I1VJBnH_Y6btbFBMj7TVc1DPomzr3BTw]
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 6 ms
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MDAwLCJleHAiOjE3MjU1NjQ0MDB9.uWgeYqaz4LtGaee5QGA2zxN2KA8oyHmblfSwKWop8ZuuDY1_hDNm30I1VJBnH_Y6btbFBMj7TVc1DPomzr3BTw]
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:26:58 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:26:58 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 8 ms
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-05 04:26:58 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:26:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-05 04:26:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@3323cd0a
2024-09-05 04:26:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1526 ms
2024-09-05 04:26:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@3323cd0a]
2024-09-05 04:27:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@195bad00, com.hayan.dividend.domain.Dividend@4e0930d9, com.hayan.dividend.domain.Dividend@13df6e93, com.hayan.dividend.domain.Dividend@4c55c485, com.hayan.dividend.domain.Dividend@8a243a2, com.hayan.dividend.domain.Dividend@faa3597, com.hayan.dividend.domain.Dividend@67697907, com.hayan.dividend.domain.Dividend@57af883, com.hayan.dividend.domain.Dividend@1fdf04dd, com.hayan.dividend.domain.Dividend@41079c3c, com.hayan.dividend.domain.Dividend@6d0a745a, com.hayan.dividend.domain.Dividend@3fe63798, com.hayan.dividend.domain.Dividend@58783555, com.hayan.dividend.domain.Dividend@25e3b41a, com.hayan.dividend.domain.Dividend@1bf5ac58, com.hayan.dividend.domain.Dividend@15210249, com.hayan.dividend.domain.Dividend@cea5f25, com.hayan.dividend.domain.Dividend@341169c6, com.hayan.dividend.domain.Dividend@2309470, com.hayan.dividend.domain.Dividend@1f9efd35, com.hayan.dividend.domain.Dividend@41539a94, com.hayan.dividend.domain.Dividend@7eb38421, com.hayan.dividend.domain.Dividend@78260c93, com.hayan.dividend.domain.Dividend@10b921f7, com.hayan.dividend.domain.Dividend@4d638e4e, com.hayan.dividend.domain.Dividend@2f13894f, com.hayan.dividend.domain.Dividend@67195aaa, com.hayan.dividend.domain.Dividend@3ef67927, com.hayan.dividend.domain.Dividend@6f369149, com.hayan.dividend.domain.Dividend@5cdc2411, com.hayan.dividend.domain.Dividend@71bde92a, com.hayan.dividend.domain.Dividend@7c0f897b, com.hayan.dividend.domain.Dividend@27e8e36a, com.hayan.dividend.domain.Dividend@1aa9b72a, com.hayan.dividend.domain.Dividend@443e9ec, com.hayan.dividend.domain.Dividend@407ec4e, com.hayan.dividend.domain.Dividend@6494bc17, com.hayan.dividend.domain.Dividend@33535748, com.hayan.dividend.domain.Dividend@28c4d447, com.hayan.dividend.domain.Dividend@131a388d, com.hayan.dividend.domain.Dividend@522f4afd, com.hayan.dividend.domain.Dividend@7b6fbee7, com.hayan.dividend.domain.Dividend@75872b21, com.hayan.dividend.domain.Dividend@379bab4c, com.hayan.dividend.domain.Dividend@1fcb67e0, com.hayan.dividend.domain.Dividend@19d56a78, com.hayan.dividend.domain.Dividend@55479440, com.hayan.dividend.domain.Dividend@3fec946f, com.hayan.dividend.domain.Dividend@7bdc0015, com.hayan.dividend.domain.Dividend@49e833bc, com.hayan.dividend.domain.Dividend@20644b55]
2024-09-05 04:27:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1182 ms
2024-09-05 04:27:00 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:27:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@195bad00, com.hayan.dividend.domain.Dividend@4e0930d9, com.hayan.dividend.domain.Dividend@13df6e93, com.hayan.dividend.domain.Dividend@4c55c485, com.hayan.dividend.domain.Dividend@8a243a2, com.hayan.dividend.domain.Dividend@faa3597, com.hayan.dividend.domain.Dividend@67697907, com.hayan.dividend.domain.Dividend@57af883, com.hayan.dividend.domain.Dividend@1fdf04dd, com.hayan.dividend.domain.Dividend@41079c3c, com.hayan.dividend.domain.Dividend@6d0a745a, com.hayan.dividend.domain.Dividend@3fe63798, com.hayan.dividend.domain.Dividend@58783555, com.hayan.dividend.domain.Dividend@25e3b41a, com.hayan.dividend.domain.Dividend@1bf5ac58, com.hayan.dividend.domain.Dividend@15210249, com.hayan.dividend.domain.Dividend@cea5f25, com.hayan.dividend.domain.Dividend@341169c6, com.hayan.dividend.domain.Dividend@2309470, com.hayan.dividend.domain.Dividend@1f9efd35, com.hayan.dividend.domain.Dividend@41539a94, com.hayan.dividend.domain.Dividend@7eb38421, com.hayan.dividend.domain.Dividend@78260c93, com.hayan.dividend.domain.Dividend@10b921f7, com.hayan.dividend.domain.Dividend@4d638e4e, com.hayan.dividend.domain.Dividend@2f13894f, com.hayan.dividend.domain.Dividend@67195aaa, com.hayan.dividend.domain.Dividend@3ef67927, com.hayan.dividend.domain.Dividend@6f369149, com.hayan.dividend.domain.Dividend@5cdc2411, com.hayan.dividend.domain.Dividend@71bde92a, com.hayan.dividend.domain.Dividend@7c0f897b, com.hayan.dividend.domain.Dividend@27e8e36a, com.hayan.dividend.domain.Dividend@1aa9b72a, com.hayan.dividend.domain.Dividend@443e9ec, com.hayan.dividend.domain.Dividend@407ec4e, com.hayan.dividend.domain.Dividend@6494bc17, com.hayan.dividend.domain.Dividend@33535748, com.hayan.dividend.domain.Dividend@28c4d447, com.hayan.dividend.domain.Dividend@131a388d, com.hayan.dividend.domain.Dividend@522f4afd, com.hayan.dividend.domain.Dividend@7b6fbee7, com.hayan.dividend.domain.Dividend@75872b21, com.hayan.dividend.domain.Dividend@379bab4c, com.hayan.dividend.domain.Dividend@1fcb67e0, com.hayan.dividend.domain.Dividend@19d56a78, com.hayan.dividend.domain.Dividend@55479440, com.hayan.dividend.domain.Dividend@3fec946f, com.hayan.dividend.domain.Dividend@7bdc0015, com.hayan.dividend.domain.Dividend@49e833bc, com.hayan.dividend.domain.Dividend@20644b55]]
2024-09-05 04:27:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:27:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 9 ms
2024-09-05 04:27:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Agilent Technologies, Inc.]]
2024-09-05 04:27:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:27:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 22054 ms
2024-09-05 04:29:40 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m4s465ms).
2024-09-05 04:29:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:29:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 162162 ms
2024-09-05 04:29:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@582657bb
2024-09-05 04:29:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 162168 ms
2024-09-05 04:29:40 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:29:40 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 04:29:40 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 04:29:40 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 04:29:41 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 04:29:41 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 18560 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 04:29:41 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 04:29:41 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 04:29:41 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 04:29:41 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 04:29:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:29:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 04:29:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 68 ms. Found 3 JPA repository interfaces.
2024-09-05 04:29:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:29:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 04:29:42 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:29:42 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:29:42 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:29:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 04:29:42 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 04:29:42 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 04:29:42 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 04:29:42 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 04:29:42 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 04:29:42 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 811 ms
2024-09-05 04:29:42 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 04:29:42 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 04:29:42 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 04:29:42 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 04:29:42 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 04:29:42 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 04:29:42 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 04:29:43 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 04:29:43 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 04:29:43 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:29:43 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 04:29:43 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 04:29:43 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:29:43 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 04:29:43 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 04:29:43 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 04:29:43 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 04:29:43 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:29:43 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@65575485
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 9 ms
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@65575485]
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@4d3ecb2d
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@25de4ce4
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@37e7da1]
2024-09-05 04:29:43 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@3c7b63ab
2024-09-05 04:29:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 13 ms
2024-09-05 04:29:43 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 04:29:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@64097c77]
2024-09-05 04:29:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@625e391e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2036be85, org.springframework.security.web.context.SecurityContextHolderFilter@45b57531, org.springframework.security.web.header.HeaderWriterFilter@5f0b27d4, org.springframework.security.web.authentication.logout.LogoutFilter@686714c6, com.hayan.dividend.jwt.JwtAuthenticationFilter@480170bc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@95b8c47, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@73b8df72, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4f1cde24, org.springframework.security.web.session.SessionManagementFilter@3e270bfa, org.springframework.security.web.access.ExceptionTranslationFilter@3834acad, org.springframework.security.web.access.intercept.AuthorizationFilter@4b612971]]
2024-09-05 04:29:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-05 04:29:44 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 04:29:44 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 04:29:44 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 04:29:44 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.56 seconds (process running for 2.91)
2024-09-05 04:29:49 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 04:29:49 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 04:29:49 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 04:29:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:29:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:29:49 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 04:29:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 04:29:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 106 ms
2024-09-05 04:29:49 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:29:49 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:29:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@6f1ee373
2024-09-05 04:29:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 113 ms
2024-09-05 04:29:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:29:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:29:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:29:52 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:29:52 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 202 ms
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MTkyLCJleHAiOjE3MjU1NjQ1OTJ9.ZQ3-TSzqfsAUQEUHHxfHXF7XFgpbQU8-JQKphlb3Tf1ReexMZwqHd2DiGnAnxyXL1JkmRkvSeyrVTgkahoCfkQ
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 22 ms
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MTkyLCJleHAiOjE3MjU1NjQ1OTJ9.ZQ3-TSzqfsAUQEUHHxfHXF7XFgpbQU8-JQKphlb3Tf1ReexMZwqHd2DiGnAnxyXL1JkmRkvSeyrVTgkahoCfkQ
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 225 ms
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MTkyLCJleHAiOjE3MjU1NjQ1OTJ9.ZQ3-TSzqfsAUQEUHHxfHXF7XFgpbQU8-JQKphlb3Tf1ReexMZwqHd2DiGnAnxyXL1JkmRkvSeyrVTgkahoCfkQ"]>
2024-09-05 04:29:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 228 ms
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MTkyLCJleHAiOjE3MjU1NjQ1OTJ9.ZQ3-TSzqfsAUQEUHHxfHXF7XFgpbQU8-JQKphlb3Tf1ReexMZwqHd2DiGnAnxyXL1JkmRkvSeyrVTgkahoCfkQ]
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 26 ms
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MTkyLCJleHAiOjE3MjU1NjQ1OTJ9.ZQ3-TSzqfsAUQEUHHxfHXF7XFgpbQU8-JQKphlb3Tf1ReexMZwqHd2DiGnAnxyXL1JkmRkvSeyrVTgkahoCfkQ]
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:30:01 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:30:01 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-05 04:30:01 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:30:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-05 04:30:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@7112597d
2024-09-05 04:30:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1810 ms
2024-09-05 04:30:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@7112597d]
2024-09-05 04:30:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@5fe910ed, com.hayan.dividend.domain.Dividend@3b067831, com.hayan.dividend.domain.Dividend@45193b25, com.hayan.dividend.domain.Dividend@425a1560, com.hayan.dividend.domain.Dividend@55231bbe, com.hayan.dividend.domain.Dividend@5d6c36db, com.hayan.dividend.domain.Dividend@5120ee40, com.hayan.dividend.domain.Dividend@43c31011, com.hayan.dividend.domain.Dividend@ef01d3c, com.hayan.dividend.domain.Dividend@321628d7, com.hayan.dividend.domain.Dividend@6492923b, com.hayan.dividend.domain.Dividend@3f0a5520, com.hayan.dividend.domain.Dividend@319db600, com.hayan.dividend.domain.Dividend@324e6074, com.hayan.dividend.domain.Dividend@423d2f4c, com.hayan.dividend.domain.Dividend@2ff3d17e, com.hayan.dividend.domain.Dividend@73824f36, com.hayan.dividend.domain.Dividend@328eccf2, com.hayan.dividend.domain.Dividend@1962c2a0, com.hayan.dividend.domain.Dividend@28ab88d3, com.hayan.dividend.domain.Dividend@4931890f, com.hayan.dividend.domain.Dividend@d9c3587, com.hayan.dividend.domain.Dividend@2648156, com.hayan.dividend.domain.Dividend@76fd6cd9, com.hayan.dividend.domain.Dividend@3341faf8, com.hayan.dividend.domain.Dividend@5f9dc11a, com.hayan.dividend.domain.Dividend@7955858e, com.hayan.dividend.domain.Dividend@64d3b5d9, com.hayan.dividend.domain.Dividend@58791581, com.hayan.dividend.domain.Dividend@69dd9a85, com.hayan.dividend.domain.Dividend@3c711bc5, com.hayan.dividend.domain.Dividend@45f50cef, com.hayan.dividend.domain.Dividend@55b0cccd, com.hayan.dividend.domain.Dividend@503c6d4c, com.hayan.dividend.domain.Dividend@64a7fbbd, com.hayan.dividend.domain.Dividend@9d811b2, com.hayan.dividend.domain.Dividend@5a5d72e0, com.hayan.dividend.domain.Dividend@69b832ea, com.hayan.dividend.domain.Dividend@32995673, com.hayan.dividend.domain.Dividend@7b858413, com.hayan.dividend.domain.Dividend@4a7e33f1, com.hayan.dividend.domain.Dividend@62f97736, com.hayan.dividend.domain.Dividend@1a2b8fd4, com.hayan.dividend.domain.Dividend@4dd9359e, com.hayan.dividend.domain.Dividend@7683666f, com.hayan.dividend.domain.Dividend@5feaff4e, com.hayan.dividend.domain.Dividend@19f99e48, com.hayan.dividend.domain.Dividend@1d083d2c, com.hayan.dividend.domain.Dividend@705590fc, com.hayan.dividend.domain.Dividend@78cd1137, com.hayan.dividend.domain.Dividend@2d93cbb8]
2024-09-05 04:30:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 790 ms
2024-09-05 04:30:03 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:30:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@5fe910ed, com.hayan.dividend.domain.Dividend@3b067831, com.hayan.dividend.domain.Dividend@45193b25, com.hayan.dividend.domain.Dividend@425a1560, com.hayan.dividend.domain.Dividend@55231bbe, com.hayan.dividend.domain.Dividend@5d6c36db, com.hayan.dividend.domain.Dividend@5120ee40, com.hayan.dividend.domain.Dividend@43c31011, com.hayan.dividend.domain.Dividend@ef01d3c, com.hayan.dividend.domain.Dividend@321628d7, com.hayan.dividend.domain.Dividend@6492923b, com.hayan.dividend.domain.Dividend@3f0a5520, com.hayan.dividend.domain.Dividend@319db600, com.hayan.dividend.domain.Dividend@324e6074, com.hayan.dividend.domain.Dividend@423d2f4c, com.hayan.dividend.domain.Dividend@2ff3d17e, com.hayan.dividend.domain.Dividend@73824f36, com.hayan.dividend.domain.Dividend@328eccf2, com.hayan.dividend.domain.Dividend@1962c2a0, com.hayan.dividend.domain.Dividend@28ab88d3, com.hayan.dividend.domain.Dividend@4931890f, com.hayan.dividend.domain.Dividend@d9c3587, com.hayan.dividend.domain.Dividend@2648156, com.hayan.dividend.domain.Dividend@76fd6cd9, com.hayan.dividend.domain.Dividend@3341faf8, com.hayan.dividend.domain.Dividend@5f9dc11a, com.hayan.dividend.domain.Dividend@7955858e, com.hayan.dividend.domain.Dividend@64d3b5d9, com.hayan.dividend.domain.Dividend@58791581, com.hayan.dividend.domain.Dividend@69dd9a85, com.hayan.dividend.domain.Dividend@3c711bc5, com.hayan.dividend.domain.Dividend@45f50cef, com.hayan.dividend.domain.Dividend@55b0cccd, com.hayan.dividend.domain.Dividend@503c6d4c, com.hayan.dividend.domain.Dividend@64a7fbbd, com.hayan.dividend.domain.Dividend@9d811b2, com.hayan.dividend.domain.Dividend@5a5d72e0, com.hayan.dividend.domain.Dividend@69b832ea, com.hayan.dividend.domain.Dividend@32995673, com.hayan.dividend.domain.Dividend@7b858413, com.hayan.dividend.domain.Dividend@4a7e33f1, com.hayan.dividend.domain.Dividend@62f97736, com.hayan.dividend.domain.Dividend@1a2b8fd4, com.hayan.dividend.domain.Dividend@4dd9359e, com.hayan.dividend.domain.Dividend@7683666f, com.hayan.dividend.domain.Dividend@5feaff4e, com.hayan.dividend.domain.Dividend@19f99e48, com.hayan.dividend.domain.Dividend@1d083d2c, com.hayan.dividend.domain.Dividend@705590fc, com.hayan.dividend.domain.Dividend@78cd1137, com.hayan.dividend.domain.Dividend@2d93cbb8]]
2024-09-05 04:30:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:30:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 13 ms
2024-09-05 04:30:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Agilent Technologies, Inc.]]
2024-09-05 04:30:38 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:30:38 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 34579 ms
2024-09-05 04:30:38 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:30:38 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 37213 ms
2024-09-05 04:30:38 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@2a3388a6
2024-09-05 04:30:38 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 37218 ms
2024-09-05 04:30:38 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:30:38 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 04:30:38 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 04:30:38 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 04:32:39 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 04:32:39 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 18792 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 04:32:39 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 04:32:39 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 04:32:39 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 04:32:39 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 04:32:39 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:32:39 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 04:32:39 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 62 ms. Found 3 JPA repository interfaces.
2024-09-05 04:32:39 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:32:39 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 04:32:39 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:32:39 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:32:39 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:32:39 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-05 04:32:39 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 04:32:39 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 04:32:39 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 04:32:39 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 04:32:39 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 04:32:39 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 737 ms
2024-09-05 04:32:39 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 04:32:39 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 04:32:39 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 04:32:39 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 04:32:39 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 04:32:39 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 04:32:39 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 04:32:40 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 04:32:40 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 04:32:40 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:32:40 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 04:32:40 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 04:32:40 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:32:40 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 04:32:40 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 04:32:40 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 04:32:40 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 04:32:40 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:32:40 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@60938b8b
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 7 ms
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@60938b8b]
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@bb8c7a6
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 10 ms
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@60b1133e
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@3876878]
2024-09-05 04:32:40 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@1d89e0d6
2024-09-05 04:32:40 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-05 04:32:40 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 04:32:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@50b3786b]
2024-09-05 04:32:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@71a59849, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7a186c92, org.springframework.security.web.context.SecurityContextHolderFilter@609d24ec, org.springframework.security.web.header.HeaderWriterFilter@7b44f5e6, org.springframework.security.web.authentication.logout.LogoutFilter@30369734, com.hayan.dividend.jwt.JwtAuthenticationFilter@5ef8b4a2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3a2576f0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@14287ca2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2b329c20, org.springframework.security.web.session.SessionManagementFilter@5dfe89b5, org.springframework.security.web.access.ExceptionTranslationFilter@64575c91, org.springframework.security.web.access.intercept.AuthorizationFilter@1593c4b3]]
2024-09-05 04:32:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 04:32:41 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 04:32:41 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 04:32:41 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 04:32:41 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.431 seconds (process running for 2.764)
2024-09-05 04:32:46 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 04:32:46 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 04:32:46 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 04:32:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 04:32:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 04:32:46 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 04:32:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 04:32:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 104 ms
2024-09-05 04:32:46 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:32:46 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:32:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@7f0a6ae8
2024-09-05 04:32:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 111 ms
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:32:49 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:32:49 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 203 ms
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 23 ms
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 228 ms
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg"]>
2024-09-05 04:32:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 231 ms
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg]
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 29 ms
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg]
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 0 ms
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:32:56 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:32:56 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 32 ms
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-05 04:32:56 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:32:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-05 04:32:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@395ce0b0
2024-09-05 04:32:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1877 ms
2024-09-05 04:32:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@395ce0b0]
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1466 ms
2024-09-05 04:32:59 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 6 ms
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Agilent Technologies, Inc.]]
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3378 ms
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@7e5ccd58
2024-09-05 04:32:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3379 ms
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg]
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 5 ms
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg]
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:33:06 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:33:06 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 6 ms
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [a]
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [a]
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@2df35d9
2024-09-05 04:33:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg]
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 6 ms
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg]
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:33:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:33:15 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.getAllCompanies with arguments: [0, 10]
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.loadAllCompanies with arguments: [0, 10]
2024-09-05 04:33:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.loadAllCompanies with result: Page 1 of 1 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.loadAllCompanies in 29 ms
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@478cc1e8
2024-09-05 04:33:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.getAllCompanies in 30 ms
2024-09-05 04:33:15 WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg]
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 9 ms
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc4MzY5LCJleHAiOjE3MjU1NjQ3Njl9.Eq-Lc7tWteN1pPBFOK3wmnoTXkJ5wfy6R_Do1o8t7FBt0yTH1GTE8eCAlOMAH-7xPTl7USHnSdKV8nP8aBiJgg]
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:33:25 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:33:25 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 8 ms
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [A]
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [A]
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: [Agilent Technologies, Inc.]
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@17e41765
2024-09-05 04:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 1 ms
2024-09-05 04:44:54 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:44:54 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 04:44:54 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 04:44:54 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 04:44:56 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 04:44:56 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 19593 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 04:44:56 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 04:44:56 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 04:44:56 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 04:44:56 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 04:44:56 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:44:56 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 04:44:57 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71 ms. Found 3 JPA repository interfaces.
2024-09-05 04:44:57 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:44:57 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 04:44:57 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:44:57 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:44:57 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:44:57 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 04:44:57 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 04:44:57 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 04:44:57 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 04:44:57 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 04:44:57 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 04:44:57 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 781 ms
2024-09-05 04:44:57 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 04:44:57 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 04:44:57 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 04:44:57 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 04:44:57 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 04:44:57 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 04:44:57 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 04:44:57 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 04:44:58 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 04:44:58 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:44:58 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 04:44:58 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 04:44:58 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:44:58 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 04:44:58 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 04:44:58 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 04:44:58 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 04:44:58 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:44:58 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@7e577fd
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@7e577fd]
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@4c1e355
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3e31962a
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@96dfe75]
2024-09-05 04:44:58 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@348fbfc9
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 04:44:58 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@1289a839]
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@143a37a5, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3e8ecf44, org.springframework.security.web.context.SecurityContextHolderFilter@1dcc255d, org.springframework.security.web.header.HeaderWriterFilter@7771ded6, org.springframework.security.web.authentication.logout.LogoutFilter@7b4e5011, com.hayan.dividend.jwt.JwtAuthenticationFilter@1593c4b3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5dfe89b5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@192fea9f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7c5b03f0, org.springframework.security.web.session.SessionManagementFilter@3fd8498e, org.springframework.security.web.access.ExceptionTranslationFilter@365a1176, org.springframework.security.web.access.intercept.AuthorizationFilter@593e7402]]
2024-09-05 04:44:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 04:44:58 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 04:44:58 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 04:44:58 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 04:44:58 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.432 seconds (process running for 2.783)
2024-09-05 04:45:04 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 04:45:04 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 04:45:04 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-05 04:45:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 04:45:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 04:45:04 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 04:45:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 04:45:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 104 ms
2024-09-05 04:45:04 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:45:04 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:45:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@ae5f977
2024-09-05 04:45:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 111 ms
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:45:06 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:45:06 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 198 ms
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 22 ms
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 220 ms
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ"]>
2024-09-05 04:45:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 222 ms
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 26 ms
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:45:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:45:15 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-05 04:45:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:45:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-05 04:45:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@21c7f0e1
2024-09-05 04:45:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1824 ms
2024-09-05 04:45:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@21c7f0e1]
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@6a4170a2, com.hayan.dividend.domain.Dividend@42c11cfd, com.hayan.dividend.domain.Dividend@6000f55c, com.hayan.dividend.domain.Dividend@32cc3ee9, com.hayan.dividend.domain.Dividend@53e99c72, com.hayan.dividend.domain.Dividend@19855406, com.hayan.dividend.domain.Dividend@7e48f87f, com.hayan.dividend.domain.Dividend@2d20aa29, com.hayan.dividend.domain.Dividend@32b5b9f3, com.hayan.dividend.domain.Dividend@123fec7, com.hayan.dividend.domain.Dividend@3811659c, com.hayan.dividend.domain.Dividend@10c8f155, com.hayan.dividend.domain.Dividend@f2db89e, com.hayan.dividend.domain.Dividend@1166aa7a, com.hayan.dividend.domain.Dividend@22e8004f, com.hayan.dividend.domain.Dividend@757d1f1e, com.hayan.dividend.domain.Dividend@17f6a067, com.hayan.dividend.domain.Dividend@3367fd99, com.hayan.dividend.domain.Dividend@51ef69c2, com.hayan.dividend.domain.Dividend@4c77090e, com.hayan.dividend.domain.Dividend@6ea06d7f, com.hayan.dividend.domain.Dividend@6227de07, com.hayan.dividend.domain.Dividend@48ac0af8, com.hayan.dividend.domain.Dividend@3c67459a, com.hayan.dividend.domain.Dividend@51c10cfc, com.hayan.dividend.domain.Dividend@d4a2725, com.hayan.dividend.domain.Dividend@259907be, com.hayan.dividend.domain.Dividend@2354cd02, com.hayan.dividend.domain.Dividend@7a2b8378, com.hayan.dividend.domain.Dividend@2684e017, com.hayan.dividend.domain.Dividend@4b4db78e, com.hayan.dividend.domain.Dividend@4ef45f38, com.hayan.dividend.domain.Dividend@686235dd, com.hayan.dividend.domain.Dividend@69e7e49e, com.hayan.dividend.domain.Dividend@4f30dfeb, com.hayan.dividend.domain.Dividend@235144aa, com.hayan.dividend.domain.Dividend@5ae451c0, com.hayan.dividend.domain.Dividend@c718d16, com.hayan.dividend.domain.Dividend@4577c4f4, com.hayan.dividend.domain.Dividend@6caabce4, com.hayan.dividend.domain.Dividend@14b88ae0, com.hayan.dividend.domain.Dividend@1421ac5c, com.hayan.dividend.domain.Dividend@6f0a8a48, com.hayan.dividend.domain.Dividend@567e46d1, com.hayan.dividend.domain.Dividend@6413974, com.hayan.dividend.domain.Dividend@1f9b36ac, com.hayan.dividend.domain.Dividend@2478b7dd, com.hayan.dividend.domain.Dividend@14354d, com.hayan.dividend.domain.Dividend@f9126a2, com.hayan.dividend.domain.Dividend@49f95faa, com.hayan.dividend.domain.Dividend@28decf17]
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 937 ms
2024-09-05 04:45:18 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@6a4170a2, com.hayan.dividend.domain.Dividend@42c11cfd, com.hayan.dividend.domain.Dividend@6000f55c, com.hayan.dividend.domain.Dividend@32cc3ee9, com.hayan.dividend.domain.Dividend@53e99c72, com.hayan.dividend.domain.Dividend@19855406, com.hayan.dividend.domain.Dividend@7e48f87f, com.hayan.dividend.domain.Dividend@2d20aa29, com.hayan.dividend.domain.Dividend@32b5b9f3, com.hayan.dividend.domain.Dividend@123fec7, com.hayan.dividend.domain.Dividend@3811659c, com.hayan.dividend.domain.Dividend@10c8f155, com.hayan.dividend.domain.Dividend@f2db89e, com.hayan.dividend.domain.Dividend@1166aa7a, com.hayan.dividend.domain.Dividend@22e8004f, com.hayan.dividend.domain.Dividend@757d1f1e, com.hayan.dividend.domain.Dividend@17f6a067, com.hayan.dividend.domain.Dividend@3367fd99, com.hayan.dividend.domain.Dividend@51ef69c2, com.hayan.dividend.domain.Dividend@4c77090e, com.hayan.dividend.domain.Dividend@6ea06d7f, com.hayan.dividend.domain.Dividend@6227de07, com.hayan.dividend.domain.Dividend@48ac0af8, com.hayan.dividend.domain.Dividend@3c67459a, com.hayan.dividend.domain.Dividend@51c10cfc, com.hayan.dividend.domain.Dividend@d4a2725, com.hayan.dividend.domain.Dividend@259907be, com.hayan.dividend.domain.Dividend@2354cd02, com.hayan.dividend.domain.Dividend@7a2b8378, com.hayan.dividend.domain.Dividend@2684e017, com.hayan.dividend.domain.Dividend@4b4db78e, com.hayan.dividend.domain.Dividend@4ef45f38, com.hayan.dividend.domain.Dividend@686235dd, com.hayan.dividend.domain.Dividend@69e7e49e, com.hayan.dividend.domain.Dividend@4f30dfeb, com.hayan.dividend.domain.Dividend@235144aa, com.hayan.dividend.domain.Dividend@5ae451c0, com.hayan.dividend.domain.Dividend@c718d16, com.hayan.dividend.domain.Dividend@4577c4f4, com.hayan.dividend.domain.Dividend@6caabce4, com.hayan.dividend.domain.Dividend@14b88ae0, com.hayan.dividend.domain.Dividend@1421ac5c, com.hayan.dividend.domain.Dividend@6f0a8a48, com.hayan.dividend.domain.Dividend@567e46d1, com.hayan.dividend.domain.Dividend@6413974, com.hayan.dividend.domain.Dividend@1f9b36ac, com.hayan.dividend.domain.Dividend@2478b7dd, com.hayan.dividend.domain.Dividend@14354d, com.hayan.dividend.domain.Dividend@f9126a2, com.hayan.dividend.domain.Dividend@49f95faa, com.hayan.dividend.domain.Dividend@28decf17]]
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 12 ms
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Agilent Technologies, Inc.]]
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2792 ms
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@543133e
2024-09-05 04:45:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2793 ms
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 6 ms
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 3 ms
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:45:23 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:45:23 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [coke]
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [coke]
2024-09-05 04:45:23 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:45:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [coke]
2024-09-05 04:45:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@25331da2
2024-09-05 04:45:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1738 ms
2024-09-05 04:45:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@25331da2]
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@2136f34a, com.hayan.dividend.domain.Dividend@1c5534c3, com.hayan.dividend.domain.Dividend@7c1a872a, com.hayan.dividend.domain.Dividend@3bbeaf85, com.hayan.dividend.domain.Dividend@2d04a71b, com.hayan.dividend.domain.Dividend@18427d54, com.hayan.dividend.domain.Dividend@30c99aa1, com.hayan.dividend.domain.Dividend@7ec5d9ba, com.hayan.dividend.domain.Dividend@76f18506, com.hayan.dividend.domain.Dividend@7dd2ee51, com.hayan.dividend.domain.Dividend@1b26fd8, com.hayan.dividend.domain.Dividend@516a6e5d, com.hayan.dividend.domain.Dividend@2bc918c3, com.hayan.dividend.domain.Dividend@4183cb8d, com.hayan.dividend.domain.Dividend@53dda0ca, com.hayan.dividend.domain.Dividend@5147246a, com.hayan.dividend.domain.Dividend@32ab2181, com.hayan.dividend.domain.Dividend@6d2b4bfa, com.hayan.dividend.domain.Dividend@53ce7d65, com.hayan.dividend.domain.Dividend@3bc27702, com.hayan.dividend.domain.Dividend@508eeed2, com.hayan.dividend.domain.Dividend@674d0ba2, com.hayan.dividend.domain.Dividend@47c8677b, com.hayan.dividend.domain.Dividend@6f1a72e7, com.hayan.dividend.domain.Dividend@48c5e9a8, com.hayan.dividend.domain.Dividend@475afb09, com.hayan.dividend.domain.Dividend@43adbf26, com.hayan.dividend.domain.Dividend@7f1c70fe, com.hayan.dividend.domain.Dividend@18735e1c, com.hayan.dividend.domain.Dividend@8617ca8, com.hayan.dividend.domain.Dividend@261ba60d, com.hayan.dividend.domain.Dividend@3a1cb9b0, com.hayan.dividend.domain.Dividend@389d9351, com.hayan.dividend.domain.Dividend@3b1a3cd6, com.hayan.dividend.domain.Dividend@40cace76, com.hayan.dividend.domain.Dividend@1f442ee6, com.hayan.dividend.domain.Dividend@4b173144, com.hayan.dividend.domain.Dividend@2181487c, com.hayan.dividend.domain.Dividend@372e8b44, com.hayan.dividend.domain.Dividend@923a059, com.hayan.dividend.domain.Dividend@7b4c2d28, com.hayan.dividend.domain.Dividend@50a55895, com.hayan.dividend.domain.Dividend@13929d6e, com.hayan.dividend.domain.Dividend@7a7c62d, com.hayan.dividend.domain.Dividend@1d189e9c, com.hayan.dividend.domain.Dividend@67830c5a, com.hayan.dividend.domain.Dividend@60fd8429, com.hayan.dividend.domain.Dividend@59d2a0b5, com.hayan.dividend.domain.Dividend@e7396d, com.hayan.dividend.domain.Dividend@7ff914f7, com.hayan.dividend.domain.Dividend@73290bed, com.hayan.dividend.domain.Dividend@3f32da35, com.hayan.dividend.domain.Dividend@6a7b0ef, com.hayan.dividend.domain.Dividend@314e4260, com.hayan.dividend.domain.Dividend@a0341c7, com.hayan.dividend.domain.Dividend@23c9c1c0, com.hayan.dividend.domain.Dividend@18d23d9e, com.hayan.dividend.domain.Dividend@5b4c31a6, com.hayan.dividend.domain.Dividend@4bd14e71, com.hayan.dividend.domain.Dividend@26fb510a, com.hayan.dividend.domain.Dividend@2fcca686, com.hayan.dividend.domain.Dividend@153763d8, com.hayan.dividend.domain.Dividend@54d405c9, com.hayan.dividend.domain.Dividend@285b7d58, com.hayan.dividend.domain.Dividend@62e90643, com.hayan.dividend.domain.Dividend@4c6e9065, com.hayan.dividend.domain.Dividend@38602e6c, com.hayan.dividend.domain.Dividend@4ba23585, com.hayan.dividend.domain.Dividend@61d3e9ac, com.hayan.dividend.domain.Dividend@5906b04b, com.hayan.dividend.domain.Dividend@60ace649, com.hayan.dividend.domain.Dividend@3a78e9c4, com.hayan.dividend.domain.Dividend@4418f9ae, com.hayan.dividend.domain.Dividend@28f08d8e, com.hayan.dividend.domain.Dividend@2fe9a877, com.hayan.dividend.domain.Dividend@52225287, com.hayan.dividend.domain.Dividend@51f414e4, com.hayan.dividend.domain.Dividend@7d446fa9, com.hayan.dividend.domain.Dividend@1f8cca66, com.hayan.dividend.domain.Dividend@5ffa057a, com.hayan.dividend.domain.Dividend@2ed86955, com.hayan.dividend.domain.Dividend@703f7200, com.hayan.dividend.domain.Dividend@919499b, com.hayan.dividend.domain.Dividend@6474c17, com.hayan.dividend.domain.Dividend@6b380f4b, com.hayan.dividend.domain.Dividend@609cdf5e, com.hayan.dividend.domain.Dividend@230a1747, com.hayan.dividend.domain.Dividend@1f91d0c5, com.hayan.dividend.domain.Dividend@3478c62b, com.hayan.dividend.domain.Dividend@329899d5, com.hayan.dividend.domain.Dividend@41db00ee, com.hayan.dividend.domain.Dividend@505df7e8, com.hayan.dividend.domain.Dividend@22662a56, com.hayan.dividend.domain.Dividend@54c649fe, com.hayan.dividend.domain.Dividend@4d03fff8, com.hayan.dividend.domain.Dividend@725eb307, com.hayan.dividend.domain.Dividend@61791380, com.hayan.dividend.domain.Dividend@7162fe8, com.hayan.dividend.domain.Dividend@5538fccd, com.hayan.dividend.domain.Dividend@5279bbe6, com.hayan.dividend.domain.Dividend@7b35573a, com.hayan.dividend.domain.Dividend@4d6a5edb, com.hayan.dividend.domain.Dividend@5f261d2f, com.hayan.dividend.domain.Dividend@409f2ba6, com.hayan.dividend.domain.Dividend@11c23808, com.hayan.dividend.domain.Dividend@e41206d, com.hayan.dividend.domain.Dividend@61618bef, com.hayan.dividend.domain.Dividend@589a4e7e, com.hayan.dividend.domain.Dividend@58982f1d, com.hayan.dividend.domain.Dividend@5fdd3e2b, com.hayan.dividend.domain.Dividend@320ee8cc, com.hayan.dividend.domain.Dividend@38edb94d, com.hayan.dividend.domain.Dividend@2114998a, com.hayan.dividend.domain.Dividend@170ed7e5, com.hayan.dividend.domain.Dividend@52031540, com.hayan.dividend.domain.Dividend@771e99c, com.hayan.dividend.domain.Dividend@22cf831, com.hayan.dividend.domain.Dividend@63fca66e, com.hayan.dividend.domain.Dividend@291f0644, com.hayan.dividend.domain.Dividend@21aa27f2, com.hayan.dividend.domain.Dividend@44a2be86, com.hayan.dividend.domain.Dividend@426bbfaa, com.hayan.dividend.domain.Dividend@1317ac85, com.hayan.dividend.domain.Dividend@63f29ca2, com.hayan.dividend.domain.Dividend@327558d4, com.hayan.dividend.domain.Dividend@2d7c27df, com.hayan.dividend.domain.Dividend@321c571, com.hayan.dividend.domain.Dividend@74414e3b, com.hayan.dividend.domain.Dividend@6c6a1b9f, com.hayan.dividend.domain.Dividend@20648b12, com.hayan.dividend.domain.Dividend@2de3c822, com.hayan.dividend.domain.Dividend@532d7b33, com.hayan.dividend.domain.Dividend@6fa7242a, com.hayan.dividend.domain.Dividend@6b9f0ed7, com.hayan.dividend.domain.Dividend@588e795e, com.hayan.dividend.domain.Dividend@6042759f, com.hayan.dividend.domain.Dividend@36929bc9, com.hayan.dividend.domain.Dividend@25e8d27a, com.hayan.dividend.domain.Dividend@e071b10, com.hayan.dividend.domain.Dividend@7d1a69c2, com.hayan.dividend.domain.Dividend@5f74f97b, com.hayan.dividend.domain.Dividend@3c6c8bed, com.hayan.dividend.domain.Dividend@a05c8eb, com.hayan.dividend.domain.Dividend@24fff410, com.hayan.dividend.domain.Dividend@5cb86ed5, com.hayan.dividend.domain.Dividend@4d3a54c, com.hayan.dividend.domain.Dividend@203567ad, com.hayan.dividend.domain.Dividend@7bb148cf, com.hayan.dividend.domain.Dividend@64605faa, com.hayan.dividend.domain.Dividend@7d807faf, com.hayan.dividend.domain.Dividend@760367bd]
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1293 ms
2024-09-05 04:45:26 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@2136f34a, com.hayan.dividend.domain.Dividend@1c5534c3, com.hayan.dividend.domain.Dividend@7c1a872a, com.hayan.dividend.domain.Dividend@3bbeaf85, com.hayan.dividend.domain.Dividend@2d04a71b, com.hayan.dividend.domain.Dividend@18427d54, com.hayan.dividend.domain.Dividend@30c99aa1, com.hayan.dividend.domain.Dividend@7ec5d9ba, com.hayan.dividend.domain.Dividend@76f18506, com.hayan.dividend.domain.Dividend@7dd2ee51, com.hayan.dividend.domain.Dividend@1b26fd8, com.hayan.dividend.domain.Dividend@516a6e5d, com.hayan.dividend.domain.Dividend@2bc918c3, com.hayan.dividend.domain.Dividend@4183cb8d, com.hayan.dividend.domain.Dividend@53dda0ca, com.hayan.dividend.domain.Dividend@5147246a, com.hayan.dividend.domain.Dividend@32ab2181, com.hayan.dividend.domain.Dividend@6d2b4bfa, com.hayan.dividend.domain.Dividend@53ce7d65, com.hayan.dividend.domain.Dividend@3bc27702, com.hayan.dividend.domain.Dividend@508eeed2, com.hayan.dividend.domain.Dividend@674d0ba2, com.hayan.dividend.domain.Dividend@47c8677b, com.hayan.dividend.domain.Dividend@6f1a72e7, com.hayan.dividend.domain.Dividend@48c5e9a8, com.hayan.dividend.domain.Dividend@475afb09, com.hayan.dividend.domain.Dividend@43adbf26, com.hayan.dividend.domain.Dividend@7f1c70fe, com.hayan.dividend.domain.Dividend@18735e1c, com.hayan.dividend.domain.Dividend@8617ca8, com.hayan.dividend.domain.Dividend@261ba60d, com.hayan.dividend.domain.Dividend@3a1cb9b0, com.hayan.dividend.domain.Dividend@389d9351, com.hayan.dividend.domain.Dividend@3b1a3cd6, com.hayan.dividend.domain.Dividend@40cace76, com.hayan.dividend.domain.Dividend@1f442ee6, com.hayan.dividend.domain.Dividend@4b173144, com.hayan.dividend.domain.Dividend@2181487c, com.hayan.dividend.domain.Dividend@372e8b44, com.hayan.dividend.domain.Dividend@923a059, com.hayan.dividend.domain.Dividend@7b4c2d28, com.hayan.dividend.domain.Dividend@50a55895, com.hayan.dividend.domain.Dividend@13929d6e, com.hayan.dividend.domain.Dividend@7a7c62d, com.hayan.dividend.domain.Dividend@1d189e9c, com.hayan.dividend.domain.Dividend@67830c5a, com.hayan.dividend.domain.Dividend@60fd8429, com.hayan.dividend.domain.Dividend@59d2a0b5, com.hayan.dividend.domain.Dividend@e7396d, com.hayan.dividend.domain.Dividend@7ff914f7, com.hayan.dividend.domain.Dividend@73290bed, com.hayan.dividend.domain.Dividend@3f32da35, com.hayan.dividend.domain.Dividend@6a7b0ef, com.hayan.dividend.domain.Dividend@314e4260, com.hayan.dividend.domain.Dividend@a0341c7, com.hayan.dividend.domain.Dividend@23c9c1c0, com.hayan.dividend.domain.Dividend@18d23d9e, com.hayan.dividend.domain.Dividend@5b4c31a6, com.hayan.dividend.domain.Dividend@4bd14e71, com.hayan.dividend.domain.Dividend@26fb510a, com.hayan.dividend.domain.Dividend@2fcca686, com.hayan.dividend.domain.Dividend@153763d8, com.hayan.dividend.domain.Dividend@54d405c9, com.hayan.dividend.domain.Dividend@285b7d58, com.hayan.dividend.domain.Dividend@62e90643, com.hayan.dividend.domain.Dividend@4c6e9065, com.hayan.dividend.domain.Dividend@38602e6c, com.hayan.dividend.domain.Dividend@4ba23585, com.hayan.dividend.domain.Dividend@61d3e9ac, com.hayan.dividend.domain.Dividend@5906b04b, com.hayan.dividend.domain.Dividend@60ace649, com.hayan.dividend.domain.Dividend@3a78e9c4, com.hayan.dividend.domain.Dividend@4418f9ae, com.hayan.dividend.domain.Dividend@28f08d8e, com.hayan.dividend.domain.Dividend@2fe9a877, com.hayan.dividend.domain.Dividend@52225287, com.hayan.dividend.domain.Dividend@51f414e4, com.hayan.dividend.domain.Dividend@7d446fa9, com.hayan.dividend.domain.Dividend@1f8cca66, com.hayan.dividend.domain.Dividend@5ffa057a, com.hayan.dividend.domain.Dividend@2ed86955, com.hayan.dividend.domain.Dividend@703f7200, com.hayan.dividend.domain.Dividend@919499b, com.hayan.dividend.domain.Dividend@6474c17, com.hayan.dividend.domain.Dividend@6b380f4b, com.hayan.dividend.domain.Dividend@609cdf5e, com.hayan.dividend.domain.Dividend@230a1747, com.hayan.dividend.domain.Dividend@1f91d0c5, com.hayan.dividend.domain.Dividend@3478c62b, com.hayan.dividend.domain.Dividend@329899d5, com.hayan.dividend.domain.Dividend@41db00ee, com.hayan.dividend.domain.Dividend@505df7e8, com.hayan.dividend.domain.Dividend@22662a56, com.hayan.dividend.domain.Dividend@54c649fe, com.hayan.dividend.domain.Dividend@4d03fff8, com.hayan.dividend.domain.Dividend@725eb307, com.hayan.dividend.domain.Dividend@61791380, com.hayan.dividend.domain.Dividend@7162fe8, com.hayan.dividend.domain.Dividend@5538fccd, com.hayan.dividend.domain.Dividend@5279bbe6, com.hayan.dividend.domain.Dividend@7b35573a, com.hayan.dividend.domain.Dividend@4d6a5edb, com.hayan.dividend.domain.Dividend@5f261d2f, com.hayan.dividend.domain.Dividend@409f2ba6, com.hayan.dividend.domain.Dividend@11c23808, com.hayan.dividend.domain.Dividend@e41206d, com.hayan.dividend.domain.Dividend@61618bef, com.hayan.dividend.domain.Dividend@589a4e7e, com.hayan.dividend.domain.Dividend@58982f1d, com.hayan.dividend.domain.Dividend@5fdd3e2b, com.hayan.dividend.domain.Dividend@320ee8cc, com.hayan.dividend.domain.Dividend@38edb94d, com.hayan.dividend.domain.Dividend@2114998a, com.hayan.dividend.domain.Dividend@170ed7e5, com.hayan.dividend.domain.Dividend@52031540, com.hayan.dividend.domain.Dividend@771e99c, com.hayan.dividend.domain.Dividend@22cf831, com.hayan.dividend.domain.Dividend@63fca66e, com.hayan.dividend.domain.Dividend@291f0644, com.hayan.dividend.domain.Dividend@21aa27f2, com.hayan.dividend.domain.Dividend@44a2be86, com.hayan.dividend.domain.Dividend@426bbfaa, com.hayan.dividend.domain.Dividend@1317ac85, com.hayan.dividend.domain.Dividend@63f29ca2, com.hayan.dividend.domain.Dividend@327558d4, com.hayan.dividend.domain.Dividend@2d7c27df, com.hayan.dividend.domain.Dividend@321c571, com.hayan.dividend.domain.Dividend@74414e3b, com.hayan.dividend.domain.Dividend@6c6a1b9f, com.hayan.dividend.domain.Dividend@20648b12, com.hayan.dividend.domain.Dividend@2de3c822, com.hayan.dividend.domain.Dividend@532d7b33, com.hayan.dividend.domain.Dividend@6fa7242a, com.hayan.dividend.domain.Dividend@6b9f0ed7, com.hayan.dividend.domain.Dividend@588e795e, com.hayan.dividend.domain.Dividend@6042759f, com.hayan.dividend.domain.Dividend@36929bc9, com.hayan.dividend.domain.Dividend@25e8d27a, com.hayan.dividend.domain.Dividend@e071b10, com.hayan.dividend.domain.Dividend@7d1a69c2, com.hayan.dividend.domain.Dividend@5f74f97b, com.hayan.dividend.domain.Dividend@3c6c8bed, com.hayan.dividend.domain.Dividend@a05c8eb, com.hayan.dividend.domain.Dividend@24fff410, com.hayan.dividend.domain.Dividend@5cb86ed5, com.hayan.dividend.domain.Dividend@4d3a54c, com.hayan.dividend.domain.Dividend@203567ad, com.hayan.dividend.domain.Dividend@7bb148cf, com.hayan.dividend.domain.Dividend@64605faa, com.hayan.dividend.domain.Dividend@7d807faf, com.hayan.dividend.domain.Dividend@760367bd]]
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 15 ms
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Coca-Cola Consolidated, Inc.]]
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3052 ms
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@6c2eec9e
2024-09-05 04:45:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3055 ms
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 7 ms
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:46:16 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:46:16 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 10 ms
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [clov]
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [clov]
2024-09-05 04:46:16 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [clov]
2024-09-05 04:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@5130450c
2024-09-05 04:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1266 ms
2024-09-05 04:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@5130450c]
2024-09-05 04:46:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:46:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:46:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 4 ms
2024-09-05 04:46:18 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 3 ms
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:46:26 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:46:26 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 6 ms
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [clov]
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [clov]
2024-09-05 04:46:26 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:46:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [clov]
2024-09-05 04:46:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@4918ff54
2024-09-05 04:46:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1586 ms
2024-09-05 04:46:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@4918ff54]
2024-09-05 04:46:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:46:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:46:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 0 ms
2024-09-05 04:46:29 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 5 ms
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5MTA2LCJleHAiOjE3MjU1NjU1MDZ9.ZcU9oRg_nZLaXedmT68MphjKUeBO2Z1_peLWvcuQUBl1-t2_3wNJwmOBG8mOM2Sfg352a2ARg4-J-NpvthHfYQ]
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:46:34 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:46:34 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 6 ms
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [CLOV]
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [CLOV]
2024-09-05 04:46:34 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [CLOV]
2024-09-05 04:46:35 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@589b7bcd
2024-09-05 04:46:35 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1531 ms
2024-09-05 04:46:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@589b7bcd]
2024-09-05 04:46:36 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:46:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:46:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 1 ms
2024-09-05 04:46:36 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:51:43 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:51:43 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 04:51:43 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 04:51:43 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 04:51:44 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 04:51:44 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 20130 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 04:51:44 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 04:51:44 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 04:51:44 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 04:51:44 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 04:51:45 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:51:45 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 04:51:45 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 77 ms. Found 3 JPA repository interfaces.
2024-09-05 04:51:45 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:51:45 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 04:51:45 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:51:45 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:51:45 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:51:45 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 04:51:45 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 04:51:45 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 04:51:45 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 04:51:45 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 04:51:45 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 04:51:45 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 815 ms
2024-09-05 04:51:45 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 04:51:45 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 04:51:45 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 04:51:45 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 04:51:45 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 04:51:45 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 04:51:45 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 04:51:45 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 04:51:46 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 04:51:46 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:51:46 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 04:51:46 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 04:51:46 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:51:46 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 04:51:46 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 04:51:46 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 04:51:46 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 04:51:46 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:51:46 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@62a2ae6f
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 9 ms
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@62a2ae6f]
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@480284d0
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@523b89cc
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@47949b9]
2024-09-05 04:51:46 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@38006595
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 12 ms
2024-09-05 04:51:46 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@7826edc3]
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@6c7189b0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3dba4d9, org.springframework.security.web.context.SecurityContextHolderFilter@2ab3af50, org.springframework.security.web.header.HeaderWriterFilter@4da78796, org.springframework.security.web.authentication.logout.LogoutFilter@61fa93c6, com.hayan.dividend.jwt.JwtAuthenticationFilter@5d35c7a7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@763717cf, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2cae4d29, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@593e7402, org.springframework.security.web.session.SessionManagementFilter@273cf13b, org.springframework.security.web.access.ExceptionTranslationFilter@163752c9, org.springframework.security.web.access.intercept.AuthorizationFilter@4ed6512]]
2024-09-05 04:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 04:51:47 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 04:51:47 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 04:51:47 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 04:51:47 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.475 seconds (process running for 2.769)
2024-09-05 04:51:52 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 04:51:52 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 04:51:52 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 04:51:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 04:51:52 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 04:51:52 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 04:51:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 04:51:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 105 ms
2024-09-05 04:51:52 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:51:52 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:51:52 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@4cacb44e
2024-09-05 04:51:52 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 112 ms
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:51:54 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:51:54 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 17 ms
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 192 ms
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTE0LCJleHAiOjE3MjU1NjU5MTR9.32026eFEFNVQPwUjkBA8xSTaag56lPjDXsu7qPwnEmb-J6NdQtqZPJ8ExEXucYxuHSFipky2FAMV0v7ahWYsLA
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 20 ms
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTE0LCJleHAiOjE3MjU1NjU5MTR9.32026eFEFNVQPwUjkBA8xSTaag56lPjDXsu7qPwnEmb-J6NdQtqZPJ8ExEXucYxuHSFipky2FAMV0v7ahWYsLA
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 214 ms
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTE0LCJleHAiOjE3MjU1NjU5MTR9.32026eFEFNVQPwUjkBA8xSTaag56lPjDXsu7qPwnEmb-J6NdQtqZPJ8ExEXucYxuHSFipky2FAMV0v7ahWYsLA"]>
2024-09-05 04:51:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 215 ms
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTE0LCJleHAiOjE3MjU1NjU5MTR9.32026eFEFNVQPwUjkBA8xSTaag56lPjDXsu7qPwnEmb-J6NdQtqZPJ8ExEXucYxuHSFipky2FAMV0v7ahWYsLA]
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 28 ms
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTE0LCJleHAiOjE3MjU1NjU5MTR9.32026eFEFNVQPwUjkBA8xSTaag56lPjDXsu7qPwnEmb-J6NdQtqZPJ8ExEXucYxuHSFipky2FAMV0v7ahWYsLA]
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:52:01 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:52:01 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [CLOV]
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [CLOV]
2024-09-05 04:52:01 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:52:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [CLOV]
2024-09-05 04:52:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@5c88671c
2024-09-05 04:52:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 2507 ms
2024-09-05 04:52:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@5c88671c]
2024-09-05 04:52:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:52:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:52:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 3 ms
2024-09-05 04:52:04 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:52:58 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:52:58 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 04:52:58 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 04:52:58 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 04:52:59 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 04:52:59 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 20283 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 04:52:59 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 04:52:59 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 04:52:59 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 04:52:59 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 04:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 04:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 64 ms. Found 3 JPA repository interfaces.
2024-09-05 04:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 04:53:00 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:53:00 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:53:00 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 04:53:00 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 04:53:00 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 04:53:00 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 04:53:00 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 04:53:00 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 04:53:00 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 774 ms
2024-09-05 04:53:00 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 04:53:00 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 04:53:00 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 04:53:00 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 04:53:00 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 04:53:00 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 04:53:00 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 04:53:00 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 04:53:01 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 04:53:01 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:53:01 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 04:53:01 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 04:53:01 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:53:01 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 04:53:01 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 04:53:01 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 04:53:01 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 04:53:01 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:53:01 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@3397d3ba
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@3397d3ba]
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@467ffc3b
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3e6f623c
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@6bd8fa59]
2024-09-05 04:53:01 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@632c5316
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-05 04:53:01 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@6a12815d]
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@23cdc80e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@33848d6f, org.springframework.security.web.context.SecurityContextHolderFilter@2bff40c6, org.springframework.security.web.header.HeaderWriterFilter@36f57085, org.springframework.security.web.authentication.logout.LogoutFilter@2879bbaa, com.hayan.dividend.jwt.JwtAuthenticationFilter@cc92e58, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2c2a31e5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@15b209d9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@48d090b6, org.springframework.security.web.session.SessionManagementFilter@73b3583b, org.springframework.security.web.access.ExceptionTranslationFilter@4e4a6ccd, org.springframework.security.web.access.intercept.AuthorizationFilter@5c198810]]
2024-09-05 04:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 19 ms
2024-09-05 04:53:02 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 04:53:02 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 04:53:02 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 04:53:02 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.532 seconds (process running for 2.88)
2024-09-05 04:53:06 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 04:53:06 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 04:53:06 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-05 04:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:53:06 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 04:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 04:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 107 ms
2024-09-05 04:53:06 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:53:06 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@f3b4aa0
2024-09-05 04:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 116 ms
2024-09-05 04:53:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:53:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:53:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:53:08 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:53:08 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 200 ms
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTg4LCJleHAiOjE3MjU1NjU5ODh9.GteRrgpeI-3SkC4hXRDxajOlMF7c3_DfHQt6E-rN8FJ6ASTvPzLOAIcMvsqzJn0WhmdIZZtkfCPrwW5bwlYxkw
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 24 ms
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTg4LCJleHAiOjE3MjU1NjU5ODh9.GteRrgpeI-3SkC4hXRDxajOlMF7c3_DfHQt6E-rN8FJ6ASTvPzLOAIcMvsqzJn0WhmdIZZtkfCPrwW5bwlYxkw
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 225 ms
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTg4LCJleHAiOjE3MjU1NjU5ODh9.GteRrgpeI-3SkC4hXRDxajOlMF7c3_DfHQt6E-rN8FJ6ASTvPzLOAIcMvsqzJn0WhmdIZZtkfCPrwW5bwlYxkw"]>
2024-09-05 04:53:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 227 ms
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTg4LCJleHAiOjE3MjU1NjU5ODh9.GteRrgpeI-3SkC4hXRDxajOlMF7c3_DfHQt6E-rN8FJ6ASTvPzLOAIcMvsqzJn0WhmdIZZtkfCPrwW5bwlYxkw]
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 29 ms
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTg4LCJleHAiOjE3MjU1NjU5ODh9.GteRrgpeI-3SkC4hXRDxajOlMF7c3_DfHQt6E-rN8FJ6ASTvPzLOAIcMvsqzJn0WhmdIZZtkfCPrwW5bwlYxkw]
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:53:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:53:15 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 27 ms
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [CLOV]
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [CLOV]
2024-09-05 04:53:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [CLOV]
2024-09-05 04:53:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@543a9101
2024-09-05 04:53:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1351 ms
2024-09-05 04:53:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@543a9101]
2024-09-05 04:56:09 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m9s68ms).
2024-09-05 04:56:59 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=49s411ms).
2024-09-05 04:57:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:57:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:57:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 4 ms
2024-09-05 04:57:12 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:57:12 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:57:12 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 04:57:12 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 04:57:12 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 04:57:13 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 04:57:13 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 20637 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 04:57:13 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 04:57:13 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 04:57:13 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 04:57:13 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 04:57:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:57:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 04:57:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 66 ms. Found 3 JPA repository interfaces.
2024-09-05 04:57:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 04:57:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 04:57:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:57:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:57:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 04:57:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 04:57:14 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 04:57:14 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 04:57:14 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 04:57:14 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 04:57:14 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 04:57:14 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 843 ms
2024-09-05 04:57:14 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 04:57:14 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 04:57:14 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 04:57:14 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 04:57:15 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 04:57:15 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 04:57:15 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 04:57:15 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 04:57:15 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 04:57:15 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:57:15 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 04:57:15 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 04:57:15 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 04:57:15 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 04:57:15 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 04:57:15 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 04:57:15 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 04:57:15 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:57:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 04:57:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 04:57:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@63df6917
2024-09-05 04:57:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@63df6917]
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@65f45342
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 10 ms
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3a5fa59a
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@4a3ccb4b]
2024-09-05 04:57:16 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@66679b75
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-05 04:57:16 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@6867a4ed]
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@64011b93, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4790b3f9, org.springframework.security.web.context.SecurityContextHolderFilter@48ab7769, org.springframework.security.web.header.HeaderWriterFilter@95b8c47, org.springframework.security.web.authentication.logout.LogoutFilter@48d090b6, com.hayan.dividend.jwt.JwtAuthenticationFilter@60a0f51a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7523d1b7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7f837ebe, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@11239e3a, org.springframework.security.web.session.SessionManagementFilter@1de9d22a, org.springframework.security.web.access.ExceptionTranslationFilter@45b57531, org.springframework.security.web.access.intercept.AuthorizationFilter@2c01e66c]]
2024-09-05 04:57:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-05 04:57:16 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 04:57:16 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 04:57:16 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 04:57:16 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.66 seconds (process running for 3.025)
2024-09-05 04:57:28 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 04:57:28 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 04:57:28 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-05 04:57:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTg4LCJleHAiOjE3MjU1NjU5ODh9.GteRrgpeI-3SkC4hXRDxajOlMF7c3_DfHQt6E-rN8FJ6ASTvPzLOAIcMvsqzJn0WhmdIZZtkfCPrwW5bwlYxkw]
2024-09-05 04:57:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:57:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 36 ms
2024-09-05 04:57:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5NTg4LCJleHAiOjE3MjU1NjU5ODh9.GteRrgpeI-3SkC4hXRDxajOlMF7c3_DfHQt6E-rN8FJ6ASTvPzLOAIcMvsqzJn0WhmdIZZtkfCPrwW5bwlYxkw]
2024-09-05 04:57:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:57:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 04:57:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:57:28 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:57:28 ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
com.hayan.dividend.exception.CustomException: 존재하지 않는 회원입니다.
	at com.hayan.dividend.service.CustomUserDetailsService.lambda$loadUserByUsername$0(CustomUserDetailsService.java:25)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hayan.dividend.service.CustomUserDetailsService.loadUserByUsername(CustomUserDetailsService.java:25)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.service.CustomUserDetailsService$$SpringCGLIB$$0.loadUserByUsername(<generated>)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:27)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 04:57:32 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:57:32 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 04:57:32 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 04:57:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 04:57:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 111 ms
2024-09-05 04:57:32 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:57:32 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 04:57:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@223edbe0
2024-09-05 04:57:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 119 ms
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:57:34 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:57:34 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 10 ms
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 194 ms
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5ODU0LCJleHAiOjE3MjU1NjYyNTR9.4Kkc86D6gvLf9UNVIid1fo5Q7nrqyOAFSYoRqSD-ObYrUOX9nGLBOaXAIT9NMgZOsu1NlLZGpgFojTlEJ-Ktxw
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 7 ms
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5ODU0LCJleHAiOjE3MjU1NjYyNTR9.4Kkc86D6gvLf9UNVIid1fo5Q7nrqyOAFSYoRqSD-ObYrUOX9nGLBOaXAIT9NMgZOsu1NlLZGpgFojTlEJ-Ktxw
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 201 ms
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5ODU0LCJleHAiOjE3MjU1NjYyNTR9.4Kkc86D6gvLf9UNVIid1fo5Q7nrqyOAFSYoRqSD-ObYrUOX9nGLBOaXAIT9NMgZOsu1NlLZGpgFojTlEJ-Ktxw"]>
2024-09-05 04:57:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 204 ms
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5ODU0LCJleHAiOjE3MjU1NjYyNTR9.4Kkc86D6gvLf9UNVIid1fo5Q7nrqyOAFSYoRqSD-ObYrUOX9nGLBOaXAIT9NMgZOsu1NlLZGpgFojTlEJ-Ktxw]
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDc5ODU0LCJleHAiOjE3MjU1NjYyNTR9.4Kkc86D6gvLf9UNVIid1fo5Q7nrqyOAFSYoRqSD-ObYrUOX9nGLBOaXAIT9NMgZOsu1NlLZGpgFojTlEJ-Ktxw]
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 04:57:41 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 04:57:41 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [CLOV]
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [CLOV]
2024-09-05 04:57:41 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 04:57:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [CLOV]
2024-09-05 04:57:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@f959726
2024-09-05 04:57:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1355 ms
2024-09-05 04:57:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@f959726]
2024-09-05 04:58:00 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=45s160ms).
2024-09-05 04:59:10 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m9s869ms).
2024-09-05 04:59:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:59:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 04:59:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 8 ms
2024-09-05 04:59:28 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 04:59:28 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 04:59:28 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 04:59:28 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 04:59:28 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 05:00:55 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 05:00:55 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 20917 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 05:00:55 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 05:00:55 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 05:00:55 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 05:00:55 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 05:00:55 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 05:00:55 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 05:00:55 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63 ms. Found 3 JPA repository interfaces.
2024-09-05 05:00:55 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 05:00:55 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 05:00:55 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 05:00:55 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 05:00:55 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 05:00:55 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-05 05:00:55 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 05:00:55 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 05:00:55 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 05:00:55 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 05:00:55 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 05:00:55 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 738 ms
2024-09-05 05:00:55 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 05:00:55 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 05:00:55 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 05:00:55 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 05:00:56 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 05:00:56 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 05:00:56 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 05:00:56 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 05:00:56 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 05:00:56 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 05:00:56 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 05:00:56 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 05:00:56 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 05:00:56 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 05:00:56 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 05:00:56 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 05:00:56 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 05:00:56 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 05:00:56 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 05:00:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 05:00:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@42f44a1d
2024-09-05 05:00:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 7 ms
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@42f44a1d]
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@194d448a
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@2c97048e
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@7ada442f]
2024-09-05 05:00:57 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@66695506
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 9 ms
2024-09-05 05:00:57 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@389c9c3]
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@266275e6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4dfb8bac, org.springframework.security.web.context.SecurityContextHolderFilter@447792e, org.springframework.security.web.header.HeaderWriterFilter@643cb398, org.springframework.security.web.authentication.logout.LogoutFilter@235a3cd2, com.hayan.dividend.jwt.JwtAuthenticationFilter@7553aed0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6a9c854b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@11caa417, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@29b57d0d, org.springframework.security.web.session.SessionManagementFilter@6b9b2793, org.springframework.security.web.access.ExceptionTranslationFilter@4907aa6b, org.springframework.security.web.access.intercept.AuthorizationFilter@7cb2f80e]]
2024-09-05 05:00:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-05 05:00:57 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 05:00:57 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 05:00:57 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 05:00:57 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.413 seconds (process running for 2.705)
2024-09-05 05:01:03 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 05:01:03 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 05:01:03 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 05:01:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 05:01:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 05:01:04 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 05:01:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 05:01:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 105 ms
2024-09-05 05:01:04 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 05:01:04 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 05:01:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@5202f69c
2024-09-05 05:01:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 112 ms
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 05:01:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 05:01:05 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 198 ms
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 21 ms
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 221 ms
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw"]>
2024-09-05 05:01:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 222 ms
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 24 ms
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 05:01:12 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 05:01:12 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [CLOV]
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [CLOV]
2024-09-05 05:01:12 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 05:01:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [CLOV]
2024-09-05 05:01:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@4e24e021
2024-09-05 05:01:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1811 ms
2024-09-05 05:01:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@4e24e021]
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 729 ms
2024-09-05 05:01:15 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 5 ms
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Clover Health Investments, Corp.]]
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2567 ms
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@66f86c3
2024-09-05 05:01:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2569 ms
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 14 ms
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 05:02:00 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 05:02:00 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 11 ms
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [cpng]
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [cpng]
2024-09-05 05:02:00 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 05:02:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [cpng]
2024-09-05 05:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@29dff911
2024-09-05 05:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1444 ms
2024-09-05 05:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@29dff911]
2024-09-05 05:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-05 05:02:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 942 ms
2024-09-05 05:02:03 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 1 ms
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Coupang, Inc.]]
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2397 ms
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@5f532e36
2024-09-05 05:02:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2398 ms
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 5 ms
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 05:02:14 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 05:02:14 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 6 ms
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [celh]
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [celh]
2024-09-05 05:02:14 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 05:02:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [celh]
2024-09-05 05:02:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@3dcd9c62
2024-09-05 05:02:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1459 ms
2024-09-05 05:02:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@3dcd9c62]
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 918 ms
2024-09-05 05:02:17 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 1 ms
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Celsius Holdings, Inc.]]
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2385 ms
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@208f7eac
2024-09-05 05:02:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2386 ms
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 5 ms
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 05:02:33 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 05:02:33 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [c]
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [c]
2024-09-05 05:02:33 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 05:02:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [c]
2024-09-05 05:02:35 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@195faf9d
2024-09-05 05:02:35 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1653 ms
2024-09-05 05:02:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@195faf9d]
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@2ea99280, com.hayan.dividend.domain.Dividend@77bbfadd, com.hayan.dividend.domain.Dividend@1346a87a, com.hayan.dividend.domain.Dividend@2eedfb52, com.hayan.dividend.domain.Dividend@4cb2519d, com.hayan.dividend.domain.Dividend@647727c4, com.hayan.dividend.domain.Dividend@42d44648, com.hayan.dividend.domain.Dividend@3a2122b, com.hayan.dividend.domain.Dividend@5d42957b, com.hayan.dividend.domain.Dividend@56c010, com.hayan.dividend.domain.Dividend@60503054, com.hayan.dividend.domain.Dividend@7370453f, com.hayan.dividend.domain.Dividend@3a50ef67, com.hayan.dividend.domain.Dividend@c30ee7d, com.hayan.dividend.domain.Dividend@6d03bd3f, com.hayan.dividend.domain.Dividend@1cab541d, com.hayan.dividend.domain.Dividend@21bdbb38, com.hayan.dividend.domain.Dividend@2af5ea74, com.hayan.dividend.domain.Dividend@5a6f5050, com.hayan.dividend.domain.Dividend@1ca2fcbc, com.hayan.dividend.domain.Dividend@508ae06b, com.hayan.dividend.domain.Dividend@55290644, com.hayan.dividend.domain.Dividend@75643161, com.hayan.dividend.domain.Dividend@7e28746d, com.hayan.dividend.domain.Dividend@79a65a7b, com.hayan.dividend.domain.Dividend@64a0782d, com.hayan.dividend.domain.Dividend@309bb2e1, com.hayan.dividend.domain.Dividend@dad2383, com.hayan.dividend.domain.Dividend@4613c5cf, com.hayan.dividend.domain.Dividend@2195bc30, com.hayan.dividend.domain.Dividend@4c741e59, com.hayan.dividend.domain.Dividend@28219d6f, com.hayan.dividend.domain.Dividend@70c40819, com.hayan.dividend.domain.Dividend@7cbc4e0d, com.hayan.dividend.domain.Dividend@10d61115, com.hayan.dividend.domain.Dividend@34b82c85, com.hayan.dividend.domain.Dividend@646c6ecb, com.hayan.dividend.domain.Dividend@7a3e886d, com.hayan.dividend.domain.Dividend@5a407086, com.hayan.dividend.domain.Dividend@2f69b34f, com.hayan.dividend.domain.Dividend@28749a5f, com.hayan.dividend.domain.Dividend@260702dc, com.hayan.dividend.domain.Dividend@7f1a82da, com.hayan.dividend.domain.Dividend@1d8ba5bd, com.hayan.dividend.domain.Dividend@11a17231, com.hayan.dividend.domain.Dividend@fae833b, com.hayan.dividend.domain.Dividend@2489dc46, com.hayan.dividend.domain.Dividend@64ef3327, com.hayan.dividend.domain.Dividend@7ec5e571, com.hayan.dividend.domain.Dividend@50916c9, com.hayan.dividend.domain.Dividend@6f0881c2, com.hayan.dividend.domain.Dividend@72e3e10f, com.hayan.dividend.domain.Dividend@23dc6c4f, com.hayan.dividend.domain.Dividend@6eae99a3, com.hayan.dividend.domain.Dividend@45030325, com.hayan.dividend.domain.Dividend@28856913, com.hayan.dividend.domain.Dividend@687bd658, com.hayan.dividend.domain.Dividend@72022975, com.hayan.dividend.domain.Dividend@2fc5063b, com.hayan.dividend.domain.Dividend@2c8b3f21, com.hayan.dividend.domain.Dividend@1a74f5fe, com.hayan.dividend.domain.Dividend@79de2e44, com.hayan.dividend.domain.Dividend@7e2d0b9a, com.hayan.dividend.domain.Dividend@baa4149, com.hayan.dividend.domain.Dividend@364c8ec7, com.hayan.dividend.domain.Dividend@3e683a44, com.hayan.dividend.domain.Dividend@280f97c8, com.hayan.dividend.domain.Dividend@71763b89, com.hayan.dividend.domain.Dividend@239ea9d6, com.hayan.dividend.domain.Dividend@5c5b0dfb, com.hayan.dividend.domain.Dividend@8be606f, com.hayan.dividend.domain.Dividend@4854b882, com.hayan.dividend.domain.Dividend@1e527847, com.hayan.dividend.domain.Dividend@1ae28aa3, com.hayan.dividend.domain.Dividend@61a42c88, com.hayan.dividend.domain.Dividend@cd90896, com.hayan.dividend.domain.Dividend@144d90a, com.hayan.dividend.domain.Dividend@ffdfc13, com.hayan.dividend.domain.Dividend@4ffd5108, com.hayan.dividend.domain.Dividend@ba46dd9, com.hayan.dividend.domain.Dividend@2c0f692e, com.hayan.dividend.domain.Dividend@4cf215d8, com.hayan.dividend.domain.Dividend@69a2685f, com.hayan.dividend.domain.Dividend@41401a17, com.hayan.dividend.domain.Dividend@16515d08, com.hayan.dividend.domain.Dividend@4a51c6cf, com.hayan.dividend.domain.Dividend@304baf4a, com.hayan.dividend.domain.Dividend@711a9bf6, com.hayan.dividend.domain.Dividend@6dbf21c0, com.hayan.dividend.domain.Dividend@299ce506, com.hayan.dividend.domain.Dividend@44c03e80, com.hayan.dividend.domain.Dividend@6120c8c5, com.hayan.dividend.domain.Dividend@75854400, com.hayan.dividend.domain.Dividend@3b7f3b63, com.hayan.dividend.domain.Dividend@7e8e26b2, com.hayan.dividend.domain.Dividend@190faf46, com.hayan.dividend.domain.Dividend@46755d23, com.hayan.dividend.domain.Dividend@493d2ad, com.hayan.dividend.domain.Dividend@b27df3b, com.hayan.dividend.domain.Dividend@6fb63486, com.hayan.dividend.domain.Dividend@3c6f016, com.hayan.dividend.domain.Dividend@195a4c79, com.hayan.dividend.domain.Dividend@2cb1866e, com.hayan.dividend.domain.Dividend@72fd857a, com.hayan.dividend.domain.Dividend@468f9d73, com.hayan.dividend.domain.Dividend@dfd385f, com.hayan.dividend.domain.Dividend@2d5f5d78, com.hayan.dividend.domain.Dividend@3397cbfc, com.hayan.dividend.domain.Dividend@949bcf8, com.hayan.dividend.domain.Dividend@6d12424e, com.hayan.dividend.domain.Dividend@3af16609, com.hayan.dividend.domain.Dividend@37348280, com.hayan.dividend.domain.Dividend@73de56e2, com.hayan.dividend.domain.Dividend@c216ae5, com.hayan.dividend.domain.Dividend@3d519446, com.hayan.dividend.domain.Dividend@2ee231ee, com.hayan.dividend.domain.Dividend@2f0a0b96, com.hayan.dividend.domain.Dividend@28fb3ad0, com.hayan.dividend.domain.Dividend@19b9782d, com.hayan.dividend.domain.Dividend@266b57b5, com.hayan.dividend.domain.Dividend@5942ae55, com.hayan.dividend.domain.Dividend@281e2217, com.hayan.dividend.domain.Dividend@7ab45f29, com.hayan.dividend.domain.Dividend@69e7935, com.hayan.dividend.domain.Dividend@4a625fb5, com.hayan.dividend.domain.Dividend@1335c274, com.hayan.dividend.domain.Dividend@4ba09a2c, com.hayan.dividend.domain.Dividend@3e8205bc, com.hayan.dividend.domain.Dividend@66457a2e, com.hayan.dividend.domain.Dividend@5bde22f0, com.hayan.dividend.domain.Dividend@1460a25d, com.hayan.dividend.domain.Dividend@3a61fa88, com.hayan.dividend.domain.Dividend@773863e0, com.hayan.dividend.domain.Dividend@5d5b1655, com.hayan.dividend.domain.Dividend@4cb825e9, com.hayan.dividend.domain.Dividend@7938334c, com.hayan.dividend.domain.Dividend@4d2b68e8, com.hayan.dividend.domain.Dividend@484726a6, com.hayan.dividend.domain.Dividend@45ddd52a, com.hayan.dividend.domain.Dividend@7d472c8e, com.hayan.dividend.domain.Dividend@6bbd67e6, com.hayan.dividend.domain.Dividend@1abe1e21, com.hayan.dividend.domain.Dividend@3161fcd9]
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1115 ms
2024-09-05 05:02:36 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@2ea99280, com.hayan.dividend.domain.Dividend@77bbfadd, com.hayan.dividend.domain.Dividend@1346a87a, com.hayan.dividend.domain.Dividend@2eedfb52, com.hayan.dividend.domain.Dividend@4cb2519d, com.hayan.dividend.domain.Dividend@647727c4, com.hayan.dividend.domain.Dividend@42d44648, com.hayan.dividend.domain.Dividend@3a2122b, com.hayan.dividend.domain.Dividend@5d42957b, com.hayan.dividend.domain.Dividend@56c010, com.hayan.dividend.domain.Dividend@60503054, com.hayan.dividend.domain.Dividend@7370453f, com.hayan.dividend.domain.Dividend@3a50ef67, com.hayan.dividend.domain.Dividend@c30ee7d, com.hayan.dividend.domain.Dividend@6d03bd3f, com.hayan.dividend.domain.Dividend@1cab541d, com.hayan.dividend.domain.Dividend@21bdbb38, com.hayan.dividend.domain.Dividend@2af5ea74, com.hayan.dividend.domain.Dividend@5a6f5050, com.hayan.dividend.domain.Dividend@1ca2fcbc, com.hayan.dividend.domain.Dividend@508ae06b, com.hayan.dividend.domain.Dividend@55290644, com.hayan.dividend.domain.Dividend@75643161, com.hayan.dividend.domain.Dividend@7e28746d, com.hayan.dividend.domain.Dividend@79a65a7b, com.hayan.dividend.domain.Dividend@64a0782d, com.hayan.dividend.domain.Dividend@309bb2e1, com.hayan.dividend.domain.Dividend@dad2383, com.hayan.dividend.domain.Dividend@4613c5cf, com.hayan.dividend.domain.Dividend@2195bc30, com.hayan.dividend.domain.Dividend@4c741e59, com.hayan.dividend.domain.Dividend@28219d6f, com.hayan.dividend.domain.Dividend@70c40819, com.hayan.dividend.domain.Dividend@7cbc4e0d, com.hayan.dividend.domain.Dividend@10d61115, com.hayan.dividend.domain.Dividend@34b82c85, com.hayan.dividend.domain.Dividend@646c6ecb, com.hayan.dividend.domain.Dividend@7a3e886d, com.hayan.dividend.domain.Dividend@5a407086, com.hayan.dividend.domain.Dividend@2f69b34f, com.hayan.dividend.domain.Dividend@28749a5f, com.hayan.dividend.domain.Dividend@260702dc, com.hayan.dividend.domain.Dividend@7f1a82da, com.hayan.dividend.domain.Dividend@1d8ba5bd, com.hayan.dividend.domain.Dividend@11a17231, com.hayan.dividend.domain.Dividend@fae833b, com.hayan.dividend.domain.Dividend@2489dc46, com.hayan.dividend.domain.Dividend@64ef3327, com.hayan.dividend.domain.Dividend@7ec5e571, com.hayan.dividend.domain.Dividend@50916c9, com.hayan.dividend.domain.Dividend@6f0881c2, com.hayan.dividend.domain.Dividend@72e3e10f, com.hayan.dividend.domain.Dividend@23dc6c4f, com.hayan.dividend.domain.Dividend@6eae99a3, com.hayan.dividend.domain.Dividend@45030325, com.hayan.dividend.domain.Dividend@28856913, com.hayan.dividend.domain.Dividend@687bd658, com.hayan.dividend.domain.Dividend@72022975, com.hayan.dividend.domain.Dividend@2fc5063b, com.hayan.dividend.domain.Dividend@2c8b3f21, com.hayan.dividend.domain.Dividend@1a74f5fe, com.hayan.dividend.domain.Dividend@79de2e44, com.hayan.dividend.domain.Dividend@7e2d0b9a, com.hayan.dividend.domain.Dividend@baa4149, com.hayan.dividend.domain.Dividend@364c8ec7, com.hayan.dividend.domain.Dividend@3e683a44, com.hayan.dividend.domain.Dividend@280f97c8, com.hayan.dividend.domain.Dividend@71763b89, com.hayan.dividend.domain.Dividend@239ea9d6, com.hayan.dividend.domain.Dividend@5c5b0dfb, com.hayan.dividend.domain.Dividend@8be606f, com.hayan.dividend.domain.Dividend@4854b882, com.hayan.dividend.domain.Dividend@1e527847, com.hayan.dividend.domain.Dividend@1ae28aa3, com.hayan.dividend.domain.Dividend@61a42c88, com.hayan.dividend.domain.Dividend@cd90896, com.hayan.dividend.domain.Dividend@144d90a, com.hayan.dividend.domain.Dividend@ffdfc13, com.hayan.dividend.domain.Dividend@4ffd5108, com.hayan.dividend.domain.Dividend@ba46dd9, com.hayan.dividend.domain.Dividend@2c0f692e, com.hayan.dividend.domain.Dividend@4cf215d8, com.hayan.dividend.domain.Dividend@69a2685f, com.hayan.dividend.domain.Dividend@41401a17, com.hayan.dividend.domain.Dividend@16515d08, com.hayan.dividend.domain.Dividend@4a51c6cf, com.hayan.dividend.domain.Dividend@304baf4a, com.hayan.dividend.domain.Dividend@711a9bf6, com.hayan.dividend.domain.Dividend@6dbf21c0, com.hayan.dividend.domain.Dividend@299ce506, com.hayan.dividend.domain.Dividend@44c03e80, com.hayan.dividend.domain.Dividend@6120c8c5, com.hayan.dividend.domain.Dividend@75854400, com.hayan.dividend.domain.Dividend@3b7f3b63, com.hayan.dividend.domain.Dividend@7e8e26b2, com.hayan.dividend.domain.Dividend@190faf46, com.hayan.dividend.domain.Dividend@46755d23, com.hayan.dividend.domain.Dividend@493d2ad, com.hayan.dividend.domain.Dividend@b27df3b, com.hayan.dividend.domain.Dividend@6fb63486, com.hayan.dividend.domain.Dividend@3c6f016, com.hayan.dividend.domain.Dividend@195a4c79, com.hayan.dividend.domain.Dividend@2cb1866e, com.hayan.dividend.domain.Dividend@72fd857a, com.hayan.dividend.domain.Dividend@468f9d73, com.hayan.dividend.domain.Dividend@dfd385f, com.hayan.dividend.domain.Dividend@2d5f5d78, com.hayan.dividend.domain.Dividend@3397cbfc, com.hayan.dividend.domain.Dividend@949bcf8, com.hayan.dividend.domain.Dividend@6d12424e, com.hayan.dividend.domain.Dividend@3af16609, com.hayan.dividend.domain.Dividend@37348280, com.hayan.dividend.domain.Dividend@73de56e2, com.hayan.dividend.domain.Dividend@c216ae5, com.hayan.dividend.domain.Dividend@3d519446, com.hayan.dividend.domain.Dividend@2ee231ee, com.hayan.dividend.domain.Dividend@2f0a0b96, com.hayan.dividend.domain.Dividend@28fb3ad0, com.hayan.dividend.domain.Dividend@19b9782d, com.hayan.dividend.domain.Dividend@266b57b5, com.hayan.dividend.domain.Dividend@5942ae55, com.hayan.dividend.domain.Dividend@281e2217, com.hayan.dividend.domain.Dividend@7ab45f29, com.hayan.dividend.domain.Dividend@69e7935, com.hayan.dividend.domain.Dividend@4a625fb5, com.hayan.dividend.domain.Dividend@1335c274, com.hayan.dividend.domain.Dividend@4ba09a2c, com.hayan.dividend.domain.Dividend@3e8205bc, com.hayan.dividend.domain.Dividend@66457a2e, com.hayan.dividend.domain.Dividend@5bde22f0, com.hayan.dividend.domain.Dividend@1460a25d, com.hayan.dividend.domain.Dividend@3a61fa88, com.hayan.dividend.domain.Dividend@773863e0, com.hayan.dividend.domain.Dividend@5d5b1655, com.hayan.dividend.domain.Dividend@4cb825e9, com.hayan.dividend.domain.Dividend@7938334c, com.hayan.dividend.domain.Dividend@4d2b68e8, com.hayan.dividend.domain.Dividend@484726a6, com.hayan.dividend.domain.Dividend@45ddd52a, com.hayan.dividend.domain.Dividend@7d472c8e, com.hayan.dividend.domain.Dividend@6bbd67e6, com.hayan.dividend.domain.Dividend@1abe1e21, com.hayan.dividend.domain.Dividend@3161fcd9]]
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 24 ms
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Citigroup Inc.]]
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2799 ms
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@496b7aff
2024-09-05 05:02:36 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2801 ms
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 05:02:51 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 05:02:51 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [c]
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [c]
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 1 ms
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@351fc2e4
2024-09-05 05:02:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 1 ms
2024-09-05 05:02:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: true
2024-09-05 05:02:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 2 ms
2024-09-05 05:02:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDgwMDY1LCJleHAiOjE3MjU1NjY0NjV9.5RHFejpPHVJb4hbAOKWmq3Lpkjez919BxKixGyV87KRH8N5v_oMJ_nTVJLkGYQ8032gY_wEdwxabSxn9odzjTw]
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 05:02:57 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 05:02:57 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [C]
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [C]
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: [Celsius Holdings, Inc., Citigroup Inc., Clover Health Investments, Corp., Coupang, Inc.]
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 1 ms
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@241dfe17
2024-09-05 05:02:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 1 ms
2024-09-05 07:33:55 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 07:33:55 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 07:33:55 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 07:33:55 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 07:33:58 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 07:33:58 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 31464 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 07:33:58 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 07:33:58 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 07:33:58 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 07:33:58 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 07:33:58 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 07:33:58 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 07:33:58 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81 ms. Found 3 JPA repository interfaces.
2024-09-05 07:33:58 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 07:33:58 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 07:33:59 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:33:59 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:33:59 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:33:59 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2024-09-05 07:33:59 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 07:33:59 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 07:33:59 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 07:33:59 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 07:33:59 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 07:33:59 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 871 ms
2024-09-05 07:33:59 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 07:33:59 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 07:33:59 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 07:33:59 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 07:33:59 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 07:33:59 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 07:33:59 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 07:33:59 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 07:34:00 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 07:34:00 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 07:34:00 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 07:34:00 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 07:34:00 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 07:34:00 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 07:34:00 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 07:34:00 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 07:34:00 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 07:34:00 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 07:34:00 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@78624128
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 9 ms
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@78624128]
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@3e7dc4fc
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@38a49d9e
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@e129b39]
2024-09-05 07:34:00 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@376c90cb
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 07:34:00 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@48750c1e]
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@7c5b03f0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@391994c1, org.springframework.security.web.context.SecurityContextHolderFilter@50b46caf, org.springframework.security.web.header.HeaderWriterFilter@64575c91, org.springframework.security.web.authentication.logout.LogoutFilter@4ed6512, com.hayan.dividend.jwt.JwtAuthenticationFilter@71a59849, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@609d24ec, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1e98b53d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7a186c92, org.springframework.security.web.session.SessionManagementFilter@1dcc255d, org.springframework.security.web.access.ExceptionTranslationFilter@352a7434, org.springframework.security.web.access.intercept.AuthorizationFilter@143a37a5]]
2024-09-05 07:34:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 07:34:00 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 07:34:00 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 07:34:00 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 07:34:00 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.658 seconds (process running for 3.147)
2024-09-05 07:34:04 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 07:34:04 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 07:34:04 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 07:34:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [null]
2024-09-05 07:34:04 ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
com.hayan.dividend.exception.CustomException: 인증에 실패했습니다.
	at com.hayan.dividend.jwt.JwtTokenProvider.validateToken(JwtTokenProvider.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.jwt.JwtTokenProvider$$SpringCGLIB$$0.validateToken(<generated>)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:24)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 07:34:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [null]
2024-09-05 07:34:07 ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
com.hayan.dividend.exception.CustomException: 인증에 실패했습니다.
	at com.hayan.dividend.jwt.JwtTokenProvider.validateToken(JwtTokenProvider.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.jwt.JwtTokenProvider$$SpringCGLIB$$0.validateToken(<generated>)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:24)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 07:42:57 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 07:42:57 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 07:42:57 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 07:42:57 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 07:42:59 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 07:42:59 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 32129 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 07:42:59 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 07:42:59 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 07:42:59 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 07:42:59 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 07:43:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 07:43:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 07:43:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 75 ms. Found 3 JPA repository interfaces.
2024-09-05 07:43:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 07:43:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 07:43:00 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:43:00 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:43:00 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:43:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 07:43:00 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 07:43:00 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 07:43:00 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 07:43:00 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 07:43:00 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 07:43:00 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 833 ms
2024-09-05 07:43:00 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 07:43:00 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 07:43:00 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 07:43:00 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 07:43:00 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 07:43:00 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 07:43:00 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 07:43:01 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 07:43:01 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 07:43:01 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 07:43:01 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 07:43:01 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 07:43:01 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 07:43:01 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 07:43:01 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 07:43:01 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 07:43:01 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 07:43:01 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 07:43:01 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@4022bd02
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@4022bd02]
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@193b43a4
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@6ccbab06
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@124852ee]
2024-09-05 07:43:01 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@3048381a
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 9 ms
2024-09-05 07:43:01 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 07:43:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@1289a839]
2024-09-05 07:43:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@143a37a5, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3e8ecf44, org.springframework.security.web.context.SecurityContextHolderFilter@1dcc255d, org.springframework.security.web.header.HeaderWriterFilter@7771ded6, org.springframework.security.web.authentication.logout.LogoutFilter@7b4e5011, com.hayan.dividend.jwt.JwtAuthenticationFilter@1593c4b3, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5dfe89b5, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@192fea9f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7c5b03f0, org.springframework.security.web.session.SessionManagementFilter@3fd8498e, org.springframework.security.web.access.ExceptionTranslationFilter@365a1176, org.springframework.security.web.access.intercept.AuthorizationFilter@593e7402]]
2024-09-05 07:43:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 15 ms
2024-09-05 07:43:02 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 07:43:02 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 07:43:02 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 07:43:02 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.502 seconds (process running for 2.798)
2024-09-05 07:43:06 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 07:43:06 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 07:43:06 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 07:43:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [null]
2024-09-05 07:43:06 ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
com.hayan.dividend.exception.CustomException: 인증에 실패했습니다.
	at com.hayan.dividend.jwt.JwtTokenProvider.validateToken(JwtTokenProvider.java:56)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.jwt.JwtTokenProvider$$SpringCGLIB$$0.validateToken(<generated>)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:30)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 07:46:07 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 07:46:07 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 07:46:07 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 07:46:07 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 07:46:09 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 07:46:09 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 32378 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 07:46:09 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 07:46:09 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 07:46:09 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 07:46:09 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 07:46:09 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 07:46:09 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 07:46:09 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 69 ms. Found 3 JPA repository interfaces.
2024-09-05 07:46:09 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 07:46:09 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 07:46:09 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:46:09 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:46:09 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:46:09 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 07:46:09 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 07:46:09 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 07:46:09 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 07:46:09 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 07:46:10 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 07:46:10 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 784 ms
2024-09-05 07:46:10 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 07:46:10 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 07:46:10 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 07:46:10 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 07:46:10 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 07:46:10 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 07:46:10 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 07:46:10 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 07:46:10 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 07:46:10 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 07:46:10 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 07:46:10 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 07:46:10 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 07:46:10 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 07:46:10 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 07:46:10 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 07:46:10 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 07:46:10 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 07:46:10 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@220d98c6
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@220d98c6]
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@6660c824
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 10 ms
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3d95f0cb
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@2459e970]
2024-09-05 07:46:11 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@812055a
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-05 07:46:11 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@6acaac60]
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@7155a8eb, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@24b6b16d, org.springframework.security.web.context.SecurityContextHolderFilter@391656d6, org.springframework.security.web.header.HeaderWriterFilter@1cf7ff85, org.springframework.security.web.authentication.logout.LogoutFilter@7885cf63, com.hayan.dividend.jwt.JwtAuthenticationFilter@447792e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4730b531, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7b44f5e6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@36d2718a, org.springframework.security.web.session.SessionManagementFilter@163752c9, org.springframework.security.web.access.ExceptionTranslationFilter@3cd986b5, org.springframework.security.web.access.intercept.AuthorizationFilter@277e591d]]
2024-09-05 07:46:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 19 ms
2024-09-05 07:46:11 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 07:46:11 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 07:46:11 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 07:46:11 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.443 seconds (process running for 2.728)
2024-09-05 07:46:14 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 07:46:14 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 07:46:14 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 07:46:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 07:46:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 07:46:14 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 07:46:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 07:46:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 100 ms
2024-09-05 07:46:14 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 07:46:14 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 07:46:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@1ea381ef
2024-09-05 07:46:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 107 ms
2024-09-05 07:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 07:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 07:46:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 07:46:17 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 07:46:17 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 195 ms
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDg5OTc3LCJleHAiOjE3MjU1NzYzNzd9._sb0SaXcimfmv4zgCrP5vazf8lHOx4VbGwDVx19U29dCoXtDHRMpXs825r40c4rHvSk3NRQZu9-qZEP7j59kLQ
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 24 ms
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDg5OTc3LCJleHAiOjE3MjU1NzYzNzd9._sb0SaXcimfmv4zgCrP5vazf8lHOx4VbGwDVx19U29dCoXtDHRMpXs825r40c4rHvSk3NRQZu9-qZEP7j59kLQ
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 219 ms
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDg5OTc3LCJleHAiOjE3MjU1NzYzNzd9._sb0SaXcimfmv4zgCrP5vazf8lHOx4VbGwDVx19U29dCoXtDHRMpXs825r40c4rHvSk3NRQZu9-qZEP7j59kLQ"]>
2024-09-05 07:46:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 222 ms
2024-09-05 07:46:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDg5OTc3LCJleHAiOjE3MjU1NzYzNzd9._sb0SaXcimfmv4zgCrP5vazf8lHOx4VbGwDVx19U29dCoXtDHRMpXs825r40c4rHvSk3NRQZu9-qZEP7j59kLQ]
2024-09-05 07:46:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 07:46:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 26 ms
2024-09-05 07:46:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDg5OTc3LCJleHAiOjE3MjU1NzYzNzd9._sb0SaXcimfmv4zgCrP5vazf8lHOx4VbGwDVx19U29dCoXtDHRMpXs825r40c4rHvSk3NRQZu9-qZEP7j59kLQ]
2024-09-05 07:46:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 07:46:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 07:46:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getRolesFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDg5OTc3LCJleHAiOjE3MjU1NzYzNzd9._sb0SaXcimfmv4zgCrP5vazf8lHOx4VbGwDVx19U29dCoXtDHRMpXs825r40c4rHvSk3NRQZu9-qZEP7j59kLQ]
2024-09-05 07:46:24 ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
io.jsonwebtoken.RequiredTypeException: Cannot convert existing claim value of type 'class java.util.ArrayList' to desired type 'interface java.util.Set'. JJWT only converts simple String, Date, Long, Integer, Short and Byte types automatically. Anything more complex is expected to be already converted to your desired type by the JSON Deserializer implementation. You may specify a custom Deserializer for a JwtParser with the desired conversion configuration via the JwtParserBuilder.deserializeJsonWith() method. See https://github.com/jwtk/jjwt#custom-json-processor for more information. If using Jackson, you can specify custom claim POJO types as described in https://github.com/jwtk/jjwt#json-jackson-custom-types
	at io.jsonwebtoken.impl.DefaultClaims.castClaimValue(DefaultClaims.java:169)
	at io.jsonwebtoken.impl.DefaultClaims.get(DefaultClaims.java:152)
	at com.hayan.dividend.jwt.JwtTokenProvider.getRolesFromJWT(JwtTokenProvider.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.jwt.JwtTokenProvider$$SpringCGLIB$$0.getRolesFromJWT(<generated>)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:34)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 07:46:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDg5OTc3LCJleHAiOjE3MjU1NzYzNzd9._sb0SaXcimfmv4zgCrP5vazf8lHOx4VbGwDVx19U29dCoXtDHRMpXs825r40c4rHvSk3NRQZu9-qZEP7j59kLQ]
2024-09-05 07:46:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 07:46:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 07:46:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDg5OTc3LCJleHAiOjE3MjU1NzYzNzd9._sb0SaXcimfmv4zgCrP5vazf8lHOx4VbGwDVx19U29dCoXtDHRMpXs825r40c4rHvSk3NRQZu9-qZEP7j59kLQ]
2024-09-05 07:46:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 07:46:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 07:46:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getRolesFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDg5OTc3LCJleHAiOjE3MjU1NzYzNzd9._sb0SaXcimfmv4zgCrP5vazf8lHOx4VbGwDVx19U29dCoXtDHRMpXs825r40c4rHvSk3NRQZu9-qZEP7j59kLQ]
2024-09-05 07:46:29 ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
io.jsonwebtoken.RequiredTypeException: Cannot convert existing claim value of type 'class java.util.ArrayList' to desired type 'interface java.util.Set'. JJWT only converts simple String, Date, Long, Integer, Short and Byte types automatically. Anything more complex is expected to be already converted to your desired type by the JSON Deserializer implementation. You may specify a custom Deserializer for a JwtParser with the desired conversion configuration via the JwtParserBuilder.deserializeJsonWith() method. See https://github.com/jwtk/jjwt#custom-json-processor for more information. If using Jackson, you can specify custom claim POJO types as described in https://github.com/jwtk/jjwt#json-jackson-custom-types
	at io.jsonwebtoken.impl.DefaultClaims.castClaimValue(DefaultClaims.java:169)
	at io.jsonwebtoken.impl.DefaultClaims.get(DefaultClaims.java:152)
	at com.hayan.dividend.jwt.JwtTokenProvider.getRolesFromJWT(JwtTokenProvider.java:49)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.jwt.JwtTokenProvider$$SpringCGLIB$$0.getRolesFromJWT(<generated>)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:34)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 07:48:38 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 07:48:38 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 07:48:38 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 07:48:38 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 07:48:40 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 07:48:40 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 32576 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 07:48:40 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 07:48:40 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 07:48:40 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 07:48:40 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 07:48:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 07:48:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 07:48:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 73 ms. Found 3 JPA repository interfaces.
2024-09-05 07:48:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 07:48:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 07:48:40 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:48:40 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:48:40 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 07:48:40 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2024-09-05 07:48:41 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 07:48:41 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 07:48:41 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 07:48:41 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 07:48:41 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 07:48:41 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 932 ms
2024-09-05 07:48:41 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 07:48:41 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 07:48:41 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 07:48:41 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 07:48:41 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 07:48:41 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 07:48:41 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 07:48:41 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 07:48:41 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 07:48:41 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 07:48:41 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 07:48:41 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 07:48:41 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 07:48:41 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 07:48:41 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 07:48:41 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 07:48:41 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 07:48:41 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 07:48:42 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@70f89976
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@70f89976]
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@26a30107
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@4415db19
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@1d8ec10c]
2024-09-05 07:48:42 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@40f46945
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 9 ms
2024-09-05 07:48:42 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@2cf084d6]
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@67c1dc05, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@143a37a5, org.springframework.security.web.context.SecurityContextHolderFilter@530bd99c, org.springframework.security.web.header.HeaderWriterFilter@3d71418d, org.springframework.security.web.authentication.logout.LogoutFilter@11caa417, com.hayan.dividend.jwt.JwtAuthenticationFilter@3e8ecf44, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@60a59b53, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6d8f51b7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1593c4b3, org.springframework.security.web.session.SessionManagementFilter@763717cf, org.springframework.security.web.access.ExceptionTranslationFilter@4730b531, org.springframework.security.web.access.intercept.AuthorizationFilter@5d35c7a7]]
2024-09-05 07:48:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 07:48:42 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 07:48:42 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 07:48:42 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 07:48:42 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.602 seconds (process running for 2.889)
2024-09-05 07:48:47 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 07:48:47 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 07:48:47 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 07:48:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 07:48:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 07:48:47 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 07:48:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 07:48:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 102 ms
2024-09-05 07:48:47 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 07:48:47 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 07:48:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@36ba66cf
2024-09-05 07:48:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 108 ms
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 07:48:50 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 07:48:50 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 17 ms
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 213 ms
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkwMTMwLCJleHAiOjE3MjU1NzY1MzB9.bZNBKPAVw5dFen8ZKDthPSOXbZdDQAmUgZZ_nBv5TTMG0gDDKqogBVXb_jdW9tZg84rmoDbPWCtgo1ZeLpieDw
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 21 ms
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkwMTMwLCJleHAiOjE3MjU1NzY1MzB9.bZNBKPAVw5dFen8ZKDthPSOXbZdDQAmUgZZ_nBv5TTMG0gDDKqogBVXb_jdW9tZg84rmoDbPWCtgo1ZeLpieDw
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 235 ms
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkwMTMwLCJleHAiOjE3MjU1NzY1MzB9.bZNBKPAVw5dFen8ZKDthPSOXbZdDQAmUgZZ_nBv5TTMG0gDDKqogBVXb_jdW9tZg84rmoDbPWCtgo1ZeLpieDw"]>
2024-09-05 07:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 237 ms
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkwMTMwLCJleHAiOjE3MjU1NzY1MzB9.bZNBKPAVw5dFen8ZKDthPSOXbZdDQAmUgZZ_nBv5TTMG0gDDKqogBVXb_jdW9tZg84rmoDbPWCtgo1ZeLpieDw]
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 24 ms
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkwMTMwLCJleHAiOjE3MjU1NzY1MzB9.bZNBKPAVw5dFen8ZKDthPSOXbZdDQAmUgZZ_nBv5TTMG0gDDKqogBVXb_jdW9tZg84rmoDbPWCtgo1ZeLpieDw]
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getRolesFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkwMTMwLCJleHAiOjE3MjU1NzY1MzB9.bZNBKPAVw5dFen8ZKDthPSOXbZdDQAmUgZZ_nBv5TTMG0gDDKqogBVXb_jdW9tZg84rmoDbPWCtgo1ZeLpieDw]
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getRolesFromJWT with result: [ROLE_READ, ROLE_WRITE]
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getRolesFromJWT in 1 ms
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 07:48:56 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 07:48:56 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 07:48:56 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 08:26:11 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 08:26:11 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 08:26:11 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 08:26:11 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 08:26:13 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 08:26:13 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 35188 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 08:26:13 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 08:26:13 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 08:26:13 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 08:26:13 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 08:26:13 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 08:26:13 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 08:26:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 113 ms. Found 3 JPA repository interfaces.
2024-09-05 08:26:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 08:26:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 08:26:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:26:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:26:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:26:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2024-09-05 08:26:14 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 08:26:14 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 08:26:14 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 08:26:14 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 08:26:14 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 08:26:14 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 882 ms
2024-09-05 08:26:14 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 08:26:14 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 08:26:14 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 08:26:14 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 08:26:14 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 08:26:14 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 08:26:14 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 08:26:14 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 08:26:15 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 08:26:15 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 08:26:15 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 08:26:15 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 08:26:15 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 08:26:15 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 08:26:15 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 08:26:15 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 08:26:15 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 08:26:15 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 08:26:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@6c2b883b
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 9 ms
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@6c2b883b]
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@452f4106
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3cc29693
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@2305898a]
2024-09-05 08:26:15 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@65e2a5c4
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 08:26:15 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@51b0e677]
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@39625a9c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@67c1dc05, org.springframework.security.web.context.SecurityContextHolderFilter@8a6a80a, org.springframework.security.web.header.HeaderWriterFilter@365a1176, org.springframework.security.web.authentication.logout.LogoutFilter@6953d4de, com.hayan.dividend.jwt.JwtAuthenticationFilter@143a37a5, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1dcc255d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@643cb398, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3e8ecf44, org.springframework.security.web.session.SessionManagementFilter@6a463614, org.springframework.security.web.access.ExceptionTranslationFilter@151bea27, org.springframework.security.web.access.intercept.AuthorizationFilter@3dba4d9]]
2024-09-05 08:26:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 08:26:15 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 08:26:15 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 08:26:15 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 08:26:15 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.535 seconds (process running for 2.821)
2024-09-05 08:26:21 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 08:26:21 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 08:26:21 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 08:26:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 08:26:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 08:26:21 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 08:26:21 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 08:26:21 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 101 ms
2024-09-05 08:26:21 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:26:21 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:26:21 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@1a65fef6
2024-09-05 08:26:21 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 107 ms
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:26:23 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:26:23 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 201 ms
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 24 ms
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 226 ms
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w"]>
2024-09-05 08:26:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 228 ms
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 30 ms
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:26:29 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:26:29 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 23 ms
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [c]
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [c]
2024-09-05 08:26:29 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 08:26:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [c]
2024-09-05 08:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@433a6f8b
2024-09-05 08:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 2068 ms
2024-09-05 08:26:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@433a6f8b]
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@47920cb, com.hayan.dividend.domain.Dividend@5970891e, com.hayan.dividend.domain.Dividend@5cf8ad78, com.hayan.dividend.domain.Dividend@59dc49a4, com.hayan.dividend.domain.Dividend@146e552c, com.hayan.dividend.domain.Dividend@498b16c6, com.hayan.dividend.domain.Dividend@5081f1e2, com.hayan.dividend.domain.Dividend@6b2b033f, com.hayan.dividend.domain.Dividend@d8afc43, com.hayan.dividend.domain.Dividend@1c26e612, com.hayan.dividend.domain.Dividend@43771a95, com.hayan.dividend.domain.Dividend@7076cb3f, com.hayan.dividend.domain.Dividend@2a445996, com.hayan.dividend.domain.Dividend@1f92cba, com.hayan.dividend.domain.Dividend@7a213da2, com.hayan.dividend.domain.Dividend@3c482eea, com.hayan.dividend.domain.Dividend@3448481c, com.hayan.dividend.domain.Dividend@7c1c3ed3, com.hayan.dividend.domain.Dividend@fa3d0df, com.hayan.dividend.domain.Dividend@72e190bf, com.hayan.dividend.domain.Dividend@41f3e57, com.hayan.dividend.domain.Dividend@196862a1, com.hayan.dividend.domain.Dividend@85c6c7b, com.hayan.dividend.domain.Dividend@764661a7, com.hayan.dividend.domain.Dividend@bd604be, com.hayan.dividend.domain.Dividend@51f1120f, com.hayan.dividend.domain.Dividend@3a2593fe, com.hayan.dividend.domain.Dividend@7f2b9644, com.hayan.dividend.domain.Dividend@44638eeb, com.hayan.dividend.domain.Dividend@1ddb8d02, com.hayan.dividend.domain.Dividend@bf74724, com.hayan.dividend.domain.Dividend@28cd69a8, com.hayan.dividend.domain.Dividend@7081be8c, com.hayan.dividend.domain.Dividend@31738e03, com.hayan.dividend.domain.Dividend@c316e, com.hayan.dividend.domain.Dividend@434f98ee, com.hayan.dividend.domain.Dividend@3ec72bd5, com.hayan.dividend.domain.Dividend@13e9b998, com.hayan.dividend.domain.Dividend@720f7dca, com.hayan.dividend.domain.Dividend@4d38138d, com.hayan.dividend.domain.Dividend@4aa6107c, com.hayan.dividend.domain.Dividend@14dd55c9, com.hayan.dividend.domain.Dividend@1d358bb5, com.hayan.dividend.domain.Dividend@109c47e5, com.hayan.dividend.domain.Dividend@6a43807a, com.hayan.dividend.domain.Dividend@144ee3e6, com.hayan.dividend.domain.Dividend@2517aaf9, com.hayan.dividend.domain.Dividend@57c662d1, com.hayan.dividend.domain.Dividend@21f07803, com.hayan.dividend.domain.Dividend@42c2fe08, com.hayan.dividend.domain.Dividend@5a1ad4cb, com.hayan.dividend.domain.Dividend@3eaef5b3, com.hayan.dividend.domain.Dividend@1c3cb205, com.hayan.dividend.domain.Dividend@495b3d34, com.hayan.dividend.domain.Dividend@45eb0458, com.hayan.dividend.domain.Dividend@c21623b, com.hayan.dividend.domain.Dividend@75744520, com.hayan.dividend.domain.Dividend@65566427, com.hayan.dividend.domain.Dividend@78827511, com.hayan.dividend.domain.Dividend@7f35e080, com.hayan.dividend.domain.Dividend@28bff703, com.hayan.dividend.domain.Dividend@7e9ec96f, com.hayan.dividend.domain.Dividend@155f0150, com.hayan.dividend.domain.Dividend@45bed29b, com.hayan.dividend.domain.Dividend@12ee22c0, com.hayan.dividend.domain.Dividend@1a335443, com.hayan.dividend.domain.Dividend@778b93d4, com.hayan.dividend.domain.Dividend@4492bdb4, com.hayan.dividend.domain.Dividend@27896fc4, com.hayan.dividend.domain.Dividend@2718a63a, com.hayan.dividend.domain.Dividend@c26943e, com.hayan.dividend.domain.Dividend@5d88e713, com.hayan.dividend.domain.Dividend@31935429, com.hayan.dividend.domain.Dividend@53d81d57, com.hayan.dividend.domain.Dividend@6be7e476, com.hayan.dividend.domain.Dividend@714d2666, com.hayan.dividend.domain.Dividend@5a54067a, com.hayan.dividend.domain.Dividend@49759ac2, com.hayan.dividend.domain.Dividend@1de503ce, com.hayan.dividend.domain.Dividend@5836802, com.hayan.dividend.domain.Dividend@7f1ed91e, com.hayan.dividend.domain.Dividend@1a58efb5, com.hayan.dividend.domain.Dividend@2f966443, com.hayan.dividend.domain.Dividend@314bdacb, com.hayan.dividend.domain.Dividend@389423d5, com.hayan.dividend.domain.Dividend@656c4635, com.hayan.dividend.domain.Dividend@794492a7, com.hayan.dividend.domain.Dividend@16b682c6, com.hayan.dividend.domain.Dividend@fa5814e, com.hayan.dividend.domain.Dividend@87f2361, com.hayan.dividend.domain.Dividend@55f35963, com.hayan.dividend.domain.Dividend@77f141a9, com.hayan.dividend.domain.Dividend@54fd01e8, com.hayan.dividend.domain.Dividend@2568443d, com.hayan.dividend.domain.Dividend@6a9f29b2, com.hayan.dividend.domain.Dividend@171ed141, com.hayan.dividend.domain.Dividend@2b50600b, com.hayan.dividend.domain.Dividend@4cfe90f0, com.hayan.dividend.domain.Dividend@5fbff264, com.hayan.dividend.domain.Dividend@3ecaa40b, com.hayan.dividend.domain.Dividend@16b2cbe1, com.hayan.dividend.domain.Dividend@2e73a0d7, com.hayan.dividend.domain.Dividend@e7f4baf, com.hayan.dividend.domain.Dividend@65fe4c97, com.hayan.dividend.domain.Dividend@65937e0a, com.hayan.dividend.domain.Dividend@56d51f77, com.hayan.dividend.domain.Dividend@22830431, com.hayan.dividend.domain.Dividend@350e6e02, com.hayan.dividend.domain.Dividend@4b932587, com.hayan.dividend.domain.Dividend@3543b525, com.hayan.dividend.domain.Dividend@fdb9d30, com.hayan.dividend.domain.Dividend@49e39cb7, com.hayan.dividend.domain.Dividend@1b0e3711, com.hayan.dividend.domain.Dividend@33cc43c8, com.hayan.dividend.domain.Dividend@602d6a9c, com.hayan.dividend.domain.Dividend@357e540a, com.hayan.dividend.domain.Dividend@5fa24b0b, com.hayan.dividend.domain.Dividend@e218134, com.hayan.dividend.domain.Dividend@5d363e6, com.hayan.dividend.domain.Dividend@424ab952, com.hayan.dividend.domain.Dividend@f7d5803, com.hayan.dividend.domain.Dividend@dd740f9, com.hayan.dividend.domain.Dividend@1385def6, com.hayan.dividend.domain.Dividend@41265fd, com.hayan.dividend.domain.Dividend@61ca883c, com.hayan.dividend.domain.Dividend@56adcc74, com.hayan.dividend.domain.Dividend@6b62da39, com.hayan.dividend.domain.Dividend@7c487725, com.hayan.dividend.domain.Dividend@49768bf8, com.hayan.dividend.domain.Dividend@718020ce, com.hayan.dividend.domain.Dividend@cce8fd5, com.hayan.dividend.domain.Dividend@33803036, com.hayan.dividend.domain.Dividend@4e5454f5, com.hayan.dividend.domain.Dividend@3ea29ba1, com.hayan.dividend.domain.Dividend@46ea1b87, com.hayan.dividend.domain.Dividend@74d992ec, com.hayan.dividend.domain.Dividend@1846937e, com.hayan.dividend.domain.Dividend@32937c44, com.hayan.dividend.domain.Dividend@24b37fb2, com.hayan.dividend.domain.Dividend@1c45d73a, com.hayan.dividend.domain.Dividend@30b46aaf, com.hayan.dividend.domain.Dividend@19ec41a1, com.hayan.dividend.domain.Dividend@269de3c1]
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1192 ms
2024-09-05 08:26:32 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@47920cb, com.hayan.dividend.domain.Dividend@5970891e, com.hayan.dividend.domain.Dividend@5cf8ad78, com.hayan.dividend.domain.Dividend@59dc49a4, com.hayan.dividend.domain.Dividend@146e552c, com.hayan.dividend.domain.Dividend@498b16c6, com.hayan.dividend.domain.Dividend@5081f1e2, com.hayan.dividend.domain.Dividend@6b2b033f, com.hayan.dividend.domain.Dividend@d8afc43, com.hayan.dividend.domain.Dividend@1c26e612, com.hayan.dividend.domain.Dividend@43771a95, com.hayan.dividend.domain.Dividend@7076cb3f, com.hayan.dividend.domain.Dividend@2a445996, com.hayan.dividend.domain.Dividend@1f92cba, com.hayan.dividend.domain.Dividend@7a213da2, com.hayan.dividend.domain.Dividend@3c482eea, com.hayan.dividend.domain.Dividend@3448481c, com.hayan.dividend.domain.Dividend@7c1c3ed3, com.hayan.dividend.domain.Dividend@fa3d0df, com.hayan.dividend.domain.Dividend@72e190bf, com.hayan.dividend.domain.Dividend@41f3e57, com.hayan.dividend.domain.Dividend@196862a1, com.hayan.dividend.domain.Dividend@85c6c7b, com.hayan.dividend.domain.Dividend@764661a7, com.hayan.dividend.domain.Dividend@bd604be, com.hayan.dividend.domain.Dividend@51f1120f, com.hayan.dividend.domain.Dividend@3a2593fe, com.hayan.dividend.domain.Dividend@7f2b9644, com.hayan.dividend.domain.Dividend@44638eeb, com.hayan.dividend.domain.Dividend@1ddb8d02, com.hayan.dividend.domain.Dividend@bf74724, com.hayan.dividend.domain.Dividend@28cd69a8, com.hayan.dividend.domain.Dividend@7081be8c, com.hayan.dividend.domain.Dividend@31738e03, com.hayan.dividend.domain.Dividend@c316e, com.hayan.dividend.domain.Dividend@434f98ee, com.hayan.dividend.domain.Dividend@3ec72bd5, com.hayan.dividend.domain.Dividend@13e9b998, com.hayan.dividend.domain.Dividend@720f7dca, com.hayan.dividend.domain.Dividend@4d38138d, com.hayan.dividend.domain.Dividend@4aa6107c, com.hayan.dividend.domain.Dividend@14dd55c9, com.hayan.dividend.domain.Dividend@1d358bb5, com.hayan.dividend.domain.Dividend@109c47e5, com.hayan.dividend.domain.Dividend@6a43807a, com.hayan.dividend.domain.Dividend@144ee3e6, com.hayan.dividend.domain.Dividend@2517aaf9, com.hayan.dividend.domain.Dividend@57c662d1, com.hayan.dividend.domain.Dividend@21f07803, com.hayan.dividend.domain.Dividend@42c2fe08, com.hayan.dividend.domain.Dividend@5a1ad4cb, com.hayan.dividend.domain.Dividend@3eaef5b3, com.hayan.dividend.domain.Dividend@1c3cb205, com.hayan.dividend.domain.Dividend@495b3d34, com.hayan.dividend.domain.Dividend@45eb0458, com.hayan.dividend.domain.Dividend@c21623b, com.hayan.dividend.domain.Dividend@75744520, com.hayan.dividend.domain.Dividend@65566427, com.hayan.dividend.domain.Dividend@78827511, com.hayan.dividend.domain.Dividend@7f35e080, com.hayan.dividend.domain.Dividend@28bff703, com.hayan.dividend.domain.Dividend@7e9ec96f, com.hayan.dividend.domain.Dividend@155f0150, com.hayan.dividend.domain.Dividend@45bed29b, com.hayan.dividend.domain.Dividend@12ee22c0, com.hayan.dividend.domain.Dividend@1a335443, com.hayan.dividend.domain.Dividend@778b93d4, com.hayan.dividend.domain.Dividend@4492bdb4, com.hayan.dividend.domain.Dividend@27896fc4, com.hayan.dividend.domain.Dividend@2718a63a, com.hayan.dividend.domain.Dividend@c26943e, com.hayan.dividend.domain.Dividend@5d88e713, com.hayan.dividend.domain.Dividend@31935429, com.hayan.dividend.domain.Dividend@53d81d57, com.hayan.dividend.domain.Dividend@6be7e476, com.hayan.dividend.domain.Dividend@714d2666, com.hayan.dividend.domain.Dividend@5a54067a, com.hayan.dividend.domain.Dividend@49759ac2, com.hayan.dividend.domain.Dividend@1de503ce, com.hayan.dividend.domain.Dividend@5836802, com.hayan.dividend.domain.Dividend@7f1ed91e, com.hayan.dividend.domain.Dividend@1a58efb5, com.hayan.dividend.domain.Dividend@2f966443, com.hayan.dividend.domain.Dividend@314bdacb, com.hayan.dividend.domain.Dividend@389423d5, com.hayan.dividend.domain.Dividend@656c4635, com.hayan.dividend.domain.Dividend@794492a7, com.hayan.dividend.domain.Dividend@16b682c6, com.hayan.dividend.domain.Dividend@fa5814e, com.hayan.dividend.domain.Dividend@87f2361, com.hayan.dividend.domain.Dividend@55f35963, com.hayan.dividend.domain.Dividend@77f141a9, com.hayan.dividend.domain.Dividend@54fd01e8, com.hayan.dividend.domain.Dividend@2568443d, com.hayan.dividend.domain.Dividend@6a9f29b2, com.hayan.dividend.domain.Dividend@171ed141, com.hayan.dividend.domain.Dividend@2b50600b, com.hayan.dividend.domain.Dividend@4cfe90f0, com.hayan.dividend.domain.Dividend@5fbff264, com.hayan.dividend.domain.Dividend@3ecaa40b, com.hayan.dividend.domain.Dividend@16b2cbe1, com.hayan.dividend.domain.Dividend@2e73a0d7, com.hayan.dividend.domain.Dividend@e7f4baf, com.hayan.dividend.domain.Dividend@65fe4c97, com.hayan.dividend.domain.Dividend@65937e0a, com.hayan.dividend.domain.Dividend@56d51f77, com.hayan.dividend.domain.Dividend@22830431, com.hayan.dividend.domain.Dividend@350e6e02, com.hayan.dividend.domain.Dividend@4b932587, com.hayan.dividend.domain.Dividend@3543b525, com.hayan.dividend.domain.Dividend@fdb9d30, com.hayan.dividend.domain.Dividend@49e39cb7, com.hayan.dividend.domain.Dividend@1b0e3711, com.hayan.dividend.domain.Dividend@33cc43c8, com.hayan.dividend.domain.Dividend@602d6a9c, com.hayan.dividend.domain.Dividend@357e540a, com.hayan.dividend.domain.Dividend@5fa24b0b, com.hayan.dividend.domain.Dividend@e218134, com.hayan.dividend.domain.Dividend@5d363e6, com.hayan.dividend.domain.Dividend@424ab952, com.hayan.dividend.domain.Dividend@f7d5803, com.hayan.dividend.domain.Dividend@dd740f9, com.hayan.dividend.domain.Dividend@1385def6, com.hayan.dividend.domain.Dividend@41265fd, com.hayan.dividend.domain.Dividend@61ca883c, com.hayan.dividend.domain.Dividend@56adcc74, com.hayan.dividend.domain.Dividend@6b62da39, com.hayan.dividend.domain.Dividend@7c487725, com.hayan.dividend.domain.Dividend@49768bf8, com.hayan.dividend.domain.Dividend@718020ce, com.hayan.dividend.domain.Dividend@cce8fd5, com.hayan.dividend.domain.Dividend@33803036, com.hayan.dividend.domain.Dividend@4e5454f5, com.hayan.dividend.domain.Dividend@3ea29ba1, com.hayan.dividend.domain.Dividend@46ea1b87, com.hayan.dividend.domain.Dividend@74d992ec, com.hayan.dividend.domain.Dividend@1846937e, com.hayan.dividend.domain.Dividend@32937c44, com.hayan.dividend.domain.Dividend@24b37fb2, com.hayan.dividend.domain.Dividend@1c45d73a, com.hayan.dividend.domain.Dividend@30b46aaf, com.hayan.dividend.domain.Dividend@19ec41a1, com.hayan.dividend.domain.Dividend@269de3c1]]
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 18 ms
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Citigroup Inc.]]
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3301 ms
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@75e9c89
2024-09-05 08:26:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3304 ms
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:26:47 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:26:47 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.getAllCompanies with arguments: [0, 10]
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.loadAllCompanies with arguments: [0, 10]
2024-09-05 08:26:47 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.loadAllCompanies with result: Page 1 of 1 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.loadAllCompanies in 14 ms
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@a3d3e66
2024-09-05 08:26:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.getAllCompanies in 14 ms
2024-09-05 08:26:47 WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:26:55 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:26:55 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.getAllCompanies with arguments: [0, 10]
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.loadAllCompanies with arguments: [0, 10]
2024-09-05 08:26:55 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.loadAllCompanies with result: Page 1 of 1 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.loadAllCompanies in 4 ms
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@70b1f50
2024-09-05 08:26:55 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.getAllCompanies in 4 ms
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 16 ms
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 13 ms
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:27:42 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:27:42 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 7 ms
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [C]
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [C]
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: [Citigroup Inc.]
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@1d4ccf52
2024-09-05 08:27:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-05 08:28:04 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 08:28:04 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 08:28:04 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 08:28:04 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 08:28:05 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 08:28:05 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 35325 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 08:28:05 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 08:28:05 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 08:28:05 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 08:28:05 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 08:28:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 08:28:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 08:28:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 68 ms. Found 3 JPA repository interfaces.
2024-09-05 08:28:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 08:28:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 08:28:06 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:28:06 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:28:06 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:28:06 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 08:28:06 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 08:28:06 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 08:28:06 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 08:28:06 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 08:28:06 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 08:28:06 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 771 ms
2024-09-05 08:28:06 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 08:28:06 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 08:28:06 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 08:28:06 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 08:28:06 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 08:28:06 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 08:28:06 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 08:28:06 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 08:28:07 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 08:28:07 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 08:28:07 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 08:28:07 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 08:28:07 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 08:28:07 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 08:28:07 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 08:28:07 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 08:28:07 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 08:28:07 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 08:28:07 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@17252e8
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 7 ms
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@17252e8]
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@3997a1d7
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@5977670
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@20f0652f]
2024-09-05 08:28:07 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@717f74b4
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 08:28:07 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@dc24d08]
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@4ed6512, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@daa7346, org.springframework.security.web.context.SecurityContextHolderFilter@273cf13b, org.springframework.security.web.header.HeaderWriterFilter@66e4579, org.springframework.security.web.authentication.logout.LogoutFilter@6a9c854b, com.hayan.dividend.jwt.JwtAuthenticationFilter@30369734, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@42516ee1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@60a59b53, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6c7189b0, org.springframework.security.web.session.SessionManagementFilter@4e29ee60, org.springframework.security.web.access.ExceptionTranslationFilter@4639e3c5, org.springframework.security.web.access.intercept.AuthorizationFilter@7b4e5011]]
2024-09-05 08:28:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 08:28:07 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 08:28:07 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 08:28:07 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 08:28:07 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.438 seconds (process running for 2.724)
2024-09-05 08:28:12 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 08:28:12 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 08:28:12 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 08:28:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:28:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:28:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 48 ms
2024-09-05 08:28:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyMzgzLCJleHAiOjE3MjU1Nzg3ODN9.JNFYZFnD_nATi7yghpKEkbRBVjB_tSoVFpcbUwB_y_uq6oHMwU1_2RQr8HEHjkYbxAxqegYvj6w9fTEjZZOI3w]
2024-09-05 08:28:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:28:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:28:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:28:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:28:15 ERROR o.a.c.c.C.[.[.[.[dispatcherServlet] - Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception
com.hayan.dividend.exception.CustomException: 존재하지 않는 회원입니다.
	at com.hayan.dividend.service.CustomUserDetailsService.lambda$loadUserByUsername$0(CustomUserDetailsService.java:25)
	at java.base/java.util.Optional.orElseThrow(Optional.java:403)
	at com.hayan.dividend.service.CustomUserDetailsService.loadUserByUsername(CustomUserDetailsService.java:25)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.service.CustomUserDetailsService$$SpringCGLIB$$0.loadUserByUsername(<generated>)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:29)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 08:28:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 08:28:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 08:28:22 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 08:28:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 08:28:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 109 ms
2024-09-05 08:28:22 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:28:22 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:28:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@6d40c2d6
2024-09-05 08:28:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 116 ms
2024-09-05 08:28:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:28:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:28:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:28:25 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:28:25 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 9 ms
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 196 ms
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyNTA1LCJleHAiOjE3MjU1Nzg5MDV9.gfW1ByaQFkyTd0QlFvdsIjmUg7xS4gs-2vwP1J9hw3_t1jRhhVMqU_pcM9FZvFdN1GQT7LipDMMBRLmyfdIR9A
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 7 ms
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyNTA1LCJleHAiOjE3MjU1Nzg5MDV9.gfW1ByaQFkyTd0QlFvdsIjmUg7xS4gs-2vwP1J9hw3_t1jRhhVMqU_pcM9FZvFdN1GQT7LipDMMBRLmyfdIR9A
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 203 ms
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyNTA1LCJleHAiOjE3MjU1Nzg5MDV9.gfW1ByaQFkyTd0QlFvdsIjmUg7xS4gs-2vwP1J9hw3_t1jRhhVMqU_pcM9FZvFdN1GQT7LipDMMBRLmyfdIR9A"]>
2024-09-05 08:28:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 206 ms
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyNTA1LCJleHAiOjE3MjU1Nzg5MDV9.gfW1ByaQFkyTd0QlFvdsIjmUg7xS4gs-2vwP1J9hw3_t1jRhhVMqU_pcM9FZvFdN1GQT7LipDMMBRLmyfdIR9A]
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 2 ms
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyNTA1LCJleHAiOjE3MjU1Nzg5MDV9.gfW1ByaQFkyTd0QlFvdsIjmUg7xS4gs-2vwP1J9hw3_t1jRhhVMqU_pcM9FZvFdN1GQT7LipDMMBRLmyfdIR9A]
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:28:30 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:28:30 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [C]
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [C]
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: []
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@13d7b7f3
2024-09-05 08:28:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyNTA1LCJleHAiOjE3MjU1Nzg5MDV9.gfW1ByaQFkyTd0QlFvdsIjmUg7xS4gs-2vwP1J9hw3_t1jRhhVMqU_pcM9FZvFdN1GQT7LipDMMBRLmyfdIR9A]
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 2 ms
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkyNTA1LCJleHAiOjE3MjU1Nzg5MDV9.gfW1ByaQFkyTd0QlFvdsIjmUg7xS4gs-2vwP1J9hw3_t1jRhhVMqU_pcM9FZvFdN1GQT7LipDMMBRLmyfdIR9A]
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:28:41 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:28:41 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [c]
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [c]
2024-09-05 08:28:41 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 08:28:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [c]
2024-09-05 08:28:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@3d006651
2024-09-05 08:28:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1862 ms
2024-09-05 08:28:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@3d006651]
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@588b32ea, com.hayan.dividend.domain.Dividend@124a60fd, com.hayan.dividend.domain.Dividend@79229aae, com.hayan.dividend.domain.Dividend@43c60d93, com.hayan.dividend.domain.Dividend@42db7b63, com.hayan.dividend.domain.Dividend@357b64d, com.hayan.dividend.domain.Dividend@6ecdbb63, com.hayan.dividend.domain.Dividend@1d1499bc, com.hayan.dividend.domain.Dividend@48de91e, com.hayan.dividend.domain.Dividend@3a56d21c, com.hayan.dividend.domain.Dividend@39c36096, com.hayan.dividend.domain.Dividend@23d76b, com.hayan.dividend.domain.Dividend@6b8d1b68, com.hayan.dividend.domain.Dividend@67c7f237, com.hayan.dividend.domain.Dividend@45a2e989, com.hayan.dividend.domain.Dividend@5ba4e6d9, com.hayan.dividend.domain.Dividend@5871e09e, com.hayan.dividend.domain.Dividend@7fe7ed, com.hayan.dividend.domain.Dividend@5243b8ca, com.hayan.dividend.domain.Dividend@2ead0e75, com.hayan.dividend.domain.Dividend@798f6e2e, com.hayan.dividend.domain.Dividend@6b0ae7d, com.hayan.dividend.domain.Dividend@497ac389, com.hayan.dividend.domain.Dividend@fe2b275, com.hayan.dividend.domain.Dividend@d1e53b9, com.hayan.dividend.domain.Dividend@e5ed721, com.hayan.dividend.domain.Dividend@11a72be8, com.hayan.dividend.domain.Dividend@bcc42b3, com.hayan.dividend.domain.Dividend@74b05be8, com.hayan.dividend.domain.Dividend@c2f7d80, com.hayan.dividend.domain.Dividend@24ffff86, com.hayan.dividend.domain.Dividend@4d4fe870, com.hayan.dividend.domain.Dividend@3b56852a, com.hayan.dividend.domain.Dividend@4c622cbd, com.hayan.dividend.domain.Dividend@173ae978, com.hayan.dividend.domain.Dividend@25848f87, com.hayan.dividend.domain.Dividend@2af431c8, com.hayan.dividend.domain.Dividend@77aee7ef, com.hayan.dividend.domain.Dividend@371fa14b, com.hayan.dividend.domain.Dividend@3666e898, com.hayan.dividend.domain.Dividend@3d17f5ed, com.hayan.dividend.domain.Dividend@3d06ec3f, com.hayan.dividend.domain.Dividend@77d9072d, com.hayan.dividend.domain.Dividend@767a1366, com.hayan.dividend.domain.Dividend@74c038d9, com.hayan.dividend.domain.Dividend@7ead456a, com.hayan.dividend.domain.Dividend@4172c5fd, com.hayan.dividend.domain.Dividend@67350f96, com.hayan.dividend.domain.Dividend@1246e559, com.hayan.dividend.domain.Dividend@6d4646e, com.hayan.dividend.domain.Dividend@515e0464, com.hayan.dividend.domain.Dividend@1e58f866, com.hayan.dividend.domain.Dividend@3b91bad9, com.hayan.dividend.domain.Dividend@1e434ed1, com.hayan.dividend.domain.Dividend@3f9f0459, com.hayan.dividend.domain.Dividend@66dd5004, com.hayan.dividend.domain.Dividend@50ac7974, com.hayan.dividend.domain.Dividend@541d9076, com.hayan.dividend.domain.Dividend@1367eb60, com.hayan.dividend.domain.Dividend@1f36d478, com.hayan.dividend.domain.Dividend@2ce27933, com.hayan.dividend.domain.Dividend@14c4c2f9, com.hayan.dividend.domain.Dividend@385407ea, com.hayan.dividend.domain.Dividend@11e8818c, com.hayan.dividend.domain.Dividend@2efc4963, com.hayan.dividend.domain.Dividend@1c9d954f, com.hayan.dividend.domain.Dividend@46eba61, com.hayan.dividend.domain.Dividend@51dfbf81, com.hayan.dividend.domain.Dividend@1da45388, com.hayan.dividend.domain.Dividend@6de39a9e, com.hayan.dividend.domain.Dividend@1c2f88f1, com.hayan.dividend.domain.Dividend@30a00f42, com.hayan.dividend.domain.Dividend@f2722cd, com.hayan.dividend.domain.Dividend@7ee16edd, com.hayan.dividend.domain.Dividend@1e6909f0, com.hayan.dividend.domain.Dividend@2e83df60, com.hayan.dividend.domain.Dividend@1804b137, com.hayan.dividend.domain.Dividend@6de6a36c, com.hayan.dividend.domain.Dividend@3b1601a9, com.hayan.dividend.domain.Dividend@bdeb174, com.hayan.dividend.domain.Dividend@366e3431, com.hayan.dividend.domain.Dividend@6ecb0c53, com.hayan.dividend.domain.Dividend@65db536a, com.hayan.dividend.domain.Dividend@1b701bb4, com.hayan.dividend.domain.Dividend@5cf87b57, com.hayan.dividend.domain.Dividend@6a675d0f, com.hayan.dividend.domain.Dividend@5598032a, com.hayan.dividend.domain.Dividend@4e2e1f96, com.hayan.dividend.domain.Dividend@5113f7c7, com.hayan.dividend.domain.Dividend@14c57cf, com.hayan.dividend.domain.Dividend@1458959f, com.hayan.dividend.domain.Dividend@2ab4ea2d, com.hayan.dividend.domain.Dividend@64d78d73, com.hayan.dividend.domain.Dividend@7c64c09, com.hayan.dividend.domain.Dividend@57e2d503, com.hayan.dividend.domain.Dividend@5a8aa850, com.hayan.dividend.domain.Dividend@26e0a67, com.hayan.dividend.domain.Dividend@37fda827, com.hayan.dividend.domain.Dividend@76762916, com.hayan.dividend.domain.Dividend@79b1d7a0, com.hayan.dividend.domain.Dividend@bfec7c3, com.hayan.dividend.domain.Dividend@5198fa0b, com.hayan.dividend.domain.Dividend@16e157b7, com.hayan.dividend.domain.Dividend@619a8e1c, com.hayan.dividend.domain.Dividend@1c279d33, com.hayan.dividend.domain.Dividend@af9741e, com.hayan.dividend.domain.Dividend@16b9d619, com.hayan.dividend.domain.Dividend@23e640bc, com.hayan.dividend.domain.Dividend@3088ff6, com.hayan.dividend.domain.Dividend@4210520d, com.hayan.dividend.domain.Dividend@1a414d48, com.hayan.dividend.domain.Dividend@bb30d1c, com.hayan.dividend.domain.Dividend@4c8344a3, com.hayan.dividend.domain.Dividend@cc3f704, com.hayan.dividend.domain.Dividend@1cf8c0d9, com.hayan.dividend.domain.Dividend@fb0e5b7, com.hayan.dividend.domain.Dividend@59401ebe, com.hayan.dividend.domain.Dividend@4aa8b945, com.hayan.dividend.domain.Dividend@100c56c1, com.hayan.dividend.domain.Dividend@1819842a, com.hayan.dividend.domain.Dividend@41f5dc79, com.hayan.dividend.domain.Dividend@4e182793, com.hayan.dividend.domain.Dividend@3c50dacf, com.hayan.dividend.domain.Dividend@68bc31bb, com.hayan.dividend.domain.Dividend@7452ec1, com.hayan.dividend.domain.Dividend@86eb505, com.hayan.dividend.domain.Dividend@32529065, com.hayan.dividend.domain.Dividend@3b6a5e7d, com.hayan.dividend.domain.Dividend@15775cf7, com.hayan.dividend.domain.Dividend@68cc15c1, com.hayan.dividend.domain.Dividend@4e3b6105, com.hayan.dividend.domain.Dividend@274b5709, com.hayan.dividend.domain.Dividend@8f427f3, com.hayan.dividend.domain.Dividend@1e5931, com.hayan.dividend.domain.Dividend@1538337e, com.hayan.dividend.domain.Dividend@68b6cdcf, com.hayan.dividend.domain.Dividend@41d4a495, com.hayan.dividend.domain.Dividend@3371aa4f, com.hayan.dividend.domain.Dividend@6786cc9c, com.hayan.dividend.domain.Dividend@3900ad16, com.hayan.dividend.domain.Dividend@5d1456af, com.hayan.dividend.domain.Dividend@6389bc90, com.hayan.dividend.domain.Dividend@323a7e51]
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 974 ms
2024-09-05 08:28:44 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@588b32ea, com.hayan.dividend.domain.Dividend@124a60fd, com.hayan.dividend.domain.Dividend@79229aae, com.hayan.dividend.domain.Dividend@43c60d93, com.hayan.dividend.domain.Dividend@42db7b63, com.hayan.dividend.domain.Dividend@357b64d, com.hayan.dividend.domain.Dividend@6ecdbb63, com.hayan.dividend.domain.Dividend@1d1499bc, com.hayan.dividend.domain.Dividend@48de91e, com.hayan.dividend.domain.Dividend@3a56d21c, com.hayan.dividend.domain.Dividend@39c36096, com.hayan.dividend.domain.Dividend@23d76b, com.hayan.dividend.domain.Dividend@6b8d1b68, com.hayan.dividend.domain.Dividend@67c7f237, com.hayan.dividend.domain.Dividend@45a2e989, com.hayan.dividend.domain.Dividend@5ba4e6d9, com.hayan.dividend.domain.Dividend@5871e09e, com.hayan.dividend.domain.Dividend@7fe7ed, com.hayan.dividend.domain.Dividend@5243b8ca, com.hayan.dividend.domain.Dividend@2ead0e75, com.hayan.dividend.domain.Dividend@798f6e2e, com.hayan.dividend.domain.Dividend@6b0ae7d, com.hayan.dividend.domain.Dividend@497ac389, com.hayan.dividend.domain.Dividend@fe2b275, com.hayan.dividend.domain.Dividend@d1e53b9, com.hayan.dividend.domain.Dividend@e5ed721, com.hayan.dividend.domain.Dividend@11a72be8, com.hayan.dividend.domain.Dividend@bcc42b3, com.hayan.dividend.domain.Dividend@74b05be8, com.hayan.dividend.domain.Dividend@c2f7d80, com.hayan.dividend.domain.Dividend@24ffff86, com.hayan.dividend.domain.Dividend@4d4fe870, com.hayan.dividend.domain.Dividend@3b56852a, com.hayan.dividend.domain.Dividend@4c622cbd, com.hayan.dividend.domain.Dividend@173ae978, com.hayan.dividend.domain.Dividend@25848f87, com.hayan.dividend.domain.Dividend@2af431c8, com.hayan.dividend.domain.Dividend@77aee7ef, com.hayan.dividend.domain.Dividend@371fa14b, com.hayan.dividend.domain.Dividend@3666e898, com.hayan.dividend.domain.Dividend@3d17f5ed, com.hayan.dividend.domain.Dividend@3d06ec3f, com.hayan.dividend.domain.Dividend@77d9072d, com.hayan.dividend.domain.Dividend@767a1366, com.hayan.dividend.domain.Dividend@74c038d9, com.hayan.dividend.domain.Dividend@7ead456a, com.hayan.dividend.domain.Dividend@4172c5fd, com.hayan.dividend.domain.Dividend@67350f96, com.hayan.dividend.domain.Dividend@1246e559, com.hayan.dividend.domain.Dividend@6d4646e, com.hayan.dividend.domain.Dividend@515e0464, com.hayan.dividend.domain.Dividend@1e58f866, com.hayan.dividend.domain.Dividend@3b91bad9, com.hayan.dividend.domain.Dividend@1e434ed1, com.hayan.dividend.domain.Dividend@3f9f0459, com.hayan.dividend.domain.Dividend@66dd5004, com.hayan.dividend.domain.Dividend@50ac7974, com.hayan.dividend.domain.Dividend@541d9076, com.hayan.dividend.domain.Dividend@1367eb60, com.hayan.dividend.domain.Dividend@1f36d478, com.hayan.dividend.domain.Dividend@2ce27933, com.hayan.dividend.domain.Dividend@14c4c2f9, com.hayan.dividend.domain.Dividend@385407ea, com.hayan.dividend.domain.Dividend@11e8818c, com.hayan.dividend.domain.Dividend@2efc4963, com.hayan.dividend.domain.Dividend@1c9d954f, com.hayan.dividend.domain.Dividend@46eba61, com.hayan.dividend.domain.Dividend@51dfbf81, com.hayan.dividend.domain.Dividend@1da45388, com.hayan.dividend.domain.Dividend@6de39a9e, com.hayan.dividend.domain.Dividend@1c2f88f1, com.hayan.dividend.domain.Dividend@30a00f42, com.hayan.dividend.domain.Dividend@f2722cd, com.hayan.dividend.domain.Dividend@7ee16edd, com.hayan.dividend.domain.Dividend@1e6909f0, com.hayan.dividend.domain.Dividend@2e83df60, com.hayan.dividend.domain.Dividend@1804b137, com.hayan.dividend.domain.Dividend@6de6a36c, com.hayan.dividend.domain.Dividend@3b1601a9, com.hayan.dividend.domain.Dividend@bdeb174, com.hayan.dividend.domain.Dividend@366e3431, com.hayan.dividend.domain.Dividend@6ecb0c53, com.hayan.dividend.domain.Dividend@65db536a, com.hayan.dividend.domain.Dividend@1b701bb4, com.hayan.dividend.domain.Dividend@5cf87b57, com.hayan.dividend.domain.Dividend@6a675d0f, com.hayan.dividend.domain.Dividend@5598032a, com.hayan.dividend.domain.Dividend@4e2e1f96, com.hayan.dividend.domain.Dividend@5113f7c7, com.hayan.dividend.domain.Dividend@14c57cf, com.hayan.dividend.domain.Dividend@1458959f, com.hayan.dividend.domain.Dividend@2ab4ea2d, com.hayan.dividend.domain.Dividend@64d78d73, com.hayan.dividend.domain.Dividend@7c64c09, com.hayan.dividend.domain.Dividend@57e2d503, com.hayan.dividend.domain.Dividend@5a8aa850, com.hayan.dividend.domain.Dividend@26e0a67, com.hayan.dividend.domain.Dividend@37fda827, com.hayan.dividend.domain.Dividend@76762916, com.hayan.dividend.domain.Dividend@79b1d7a0, com.hayan.dividend.domain.Dividend@bfec7c3, com.hayan.dividend.domain.Dividend@5198fa0b, com.hayan.dividend.domain.Dividend@16e157b7, com.hayan.dividend.domain.Dividend@619a8e1c, com.hayan.dividend.domain.Dividend@1c279d33, com.hayan.dividend.domain.Dividend@af9741e, com.hayan.dividend.domain.Dividend@16b9d619, com.hayan.dividend.domain.Dividend@23e640bc, com.hayan.dividend.domain.Dividend@3088ff6, com.hayan.dividend.domain.Dividend@4210520d, com.hayan.dividend.domain.Dividend@1a414d48, com.hayan.dividend.domain.Dividend@bb30d1c, com.hayan.dividend.domain.Dividend@4c8344a3, com.hayan.dividend.domain.Dividend@cc3f704, com.hayan.dividend.domain.Dividend@1cf8c0d9, com.hayan.dividend.domain.Dividend@fb0e5b7, com.hayan.dividend.domain.Dividend@59401ebe, com.hayan.dividend.domain.Dividend@4aa8b945, com.hayan.dividend.domain.Dividend@100c56c1, com.hayan.dividend.domain.Dividend@1819842a, com.hayan.dividend.domain.Dividend@41f5dc79, com.hayan.dividend.domain.Dividend@4e182793, com.hayan.dividend.domain.Dividend@3c50dacf, com.hayan.dividend.domain.Dividend@68bc31bb, com.hayan.dividend.domain.Dividend@7452ec1, com.hayan.dividend.domain.Dividend@86eb505, com.hayan.dividend.domain.Dividend@32529065, com.hayan.dividend.domain.Dividend@3b6a5e7d, com.hayan.dividend.domain.Dividend@15775cf7, com.hayan.dividend.domain.Dividend@68cc15c1, com.hayan.dividend.domain.Dividend@4e3b6105, com.hayan.dividend.domain.Dividend@274b5709, com.hayan.dividend.domain.Dividend@8f427f3, com.hayan.dividend.domain.Dividend@1e5931, com.hayan.dividend.domain.Dividend@1538337e, com.hayan.dividend.domain.Dividend@68b6cdcf, com.hayan.dividend.domain.Dividend@41d4a495, com.hayan.dividend.domain.Dividend@3371aa4f, com.hayan.dividend.domain.Dividend@6786cc9c, com.hayan.dividend.domain.Dividend@3900ad16, com.hayan.dividend.domain.Dividend@5d1456af, com.hayan.dividend.domain.Dividend@6389bc90, com.hayan.dividend.domain.Dividend@323a7e51]]
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 19 ms
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Citigroup Inc.]]
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2878 ms
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@346755a
2024-09-05 08:28:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2879 ms
2024-09-05 08:29:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan2, password=test, roles=[READ]]]
2024-09-05 08:29:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan2, password=test, roles=[READ]]]
2024-09-05 08:29:00 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 08:29:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 08:29:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 100 ms
2024-09-05 08:29:01 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:29:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@57ac92c0
2024-09-05 08:29:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 101 ms
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan2, password=test, roles=null]]
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan2, password=test, roles=null]]
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan2, password=test, roles=null]]
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan2]
2024-09-05 08:29:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:29:05 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan2, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ]]
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan2, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ]]
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 106 ms
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan2, [ROLE_READ]]
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbjIiLCJyb2xlcyI6WyJST0xFX1JFQUQiXSwiaWF0IjoxNzI1NDkyNTQ1LCJleHAiOjE3MjU1Nzg5NDV9.D0sC4NzuqwWzFWx9mJByBkwjEo-WIr4kamt7Aakz74ZhThqlLvyO0LsGq7dBLv3-InMTmsTHs4ramHFMLK4bxQ
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 1 ms
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbjIiLCJyb2xlcyI6WyJST0xFX1JFQUQiXSwiaWF0IjoxNzI1NDkyNTQ1LCJleHAiOjE3MjU1Nzg5NDV9.D0sC4NzuqwWzFWx9mJByBkwjEo-WIr4kamt7Aakz74ZhThqlLvyO0LsGq7dBLv3-InMTmsTHs4ramHFMLK4bxQ
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 108 ms
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbjIiLCJyb2xlcyI6WyJST0xFX1JFQUQiXSwiaWF0IjoxNzI1NDkyNTQ1LCJleHAiOjE3MjU1Nzg5NDV9.D0sC4NzuqwWzFWx9mJByBkwjEo-WIr4kamt7Aakz74ZhThqlLvyO0LsGq7dBLv3-InMTmsTHs4ramHFMLK4bxQ"]>
2024-09-05 08:29:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 108 ms
2024-09-05 08:29:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbjIiLCJyb2xlcyI6WyJST0xFX1JFQUQiXSwiaWF0IjoxNzI1NDkyNTQ1LCJleHAiOjE3MjU1Nzg5NDV9.D0sC4NzuqwWzFWx9mJByBkwjEo-WIr4kamt7Aakz74ZhThqlLvyO0LsGq7dBLv3-InMTmsTHs4ramHFMLK4bxQ]
2024-09-05 08:29:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:29:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 3 ms
2024-09-05 08:29:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbjIiLCJyb2xlcyI6WyJST0xFX1JFQUQiXSwiaWF0IjoxNzI1NDkyNTQ1LCJleHAiOjE3MjU1Nzg5NDV9.D0sC4NzuqwWzFWx9mJByBkwjEo-WIr4kamt7Aakz74ZhThqlLvyO0LsGq7dBLv3-InMTmsTHs4ramHFMLK4bxQ]
2024-09-05 08:29:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan2
2024-09-05 08:29:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:29:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan2]
2024-09-05 08:29:11 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:29:11 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:29:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan2, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ]]
2024-09-05 08:29:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbjIiLCJyb2xlcyI6WyJST0xFX1JFQUQiXSwiaWF0IjoxNzI1NDkyNTQ1LCJleHAiOjE3MjU1Nzg5NDV9.D0sC4NzuqwWzFWx9mJByBkwjEo-WIr4kamt7Aakz74ZhThqlLvyO0LsGq7dBLv3-InMTmsTHs4ramHFMLK4bxQ]
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 2 ms
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbjIiLCJyb2xlcyI6WyJST0xFX1JFQUQiXSwiaWF0IjoxNzI1NDkyNTQ1LCJleHAiOjE3MjU1Nzg5NDV9.D0sC4NzuqwWzFWx9mJByBkwjEo-WIr4kamt7Aakz74ZhThqlLvyO0LsGq7dBLv3-InMTmsTHs4ramHFMLK4bxQ]
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan2
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan2]
2024-09-05 08:29:16 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:29:16 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan2, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ]]
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 6 ms
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.getAllCompanies with arguments: [0, 10]
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.loadAllCompanies with arguments: [0, 10]
2024-09-05 08:29:16 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.loadAllCompanies with result: Page 1 of 1 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.loadAllCompanies in 14 ms
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@6f0629d3
2024-09-05 08:29:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.getAllCompanies in 15 ms
2024-09-05 08:29:16 WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2024-09-05 08:38:48 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 08:38:48 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 08:38:48 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 08:38:48 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 08:39:35 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 08:39:35 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 36234 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 08:39:35 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 08:39:35 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 08:39:35 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 08:39:35 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 08:39:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 08:39:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 08:39:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 70 ms. Found 3 JPA repository interfaces.
2024-09-05 08:39:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 08:39:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 08:39:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:39:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:39:35 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:39:35 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-05 08:39:36 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 08:39:36 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 08:39:36 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 08:39:36 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 08:39:36 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 08:39:36 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 795 ms
2024-09-05 08:39:36 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 08:39:36 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 08:39:36 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 08:39:36 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 08:39:36 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 08:39:36 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 08:39:36 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 08:39:36 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 08:39:37 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 08:39:37 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 08:39:37 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 08:39:37 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 08:39:37 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 08:39:37 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 08:39:37 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 08:39:37 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 08:39:37 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 08:39:37 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 08:39:37 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2d620d80
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2d620d80]
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@3ada91a1
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 11 ms
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@56472b37
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@6bf7d1c]
2024-09-05 08:39:37 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@1c081fbf
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 08:39:37 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@e8cab67]
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@341448d5, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@50cc841a, org.springframework.security.web.context.SecurityContextHolderFilter@120072d2, org.springframework.security.web.header.HeaderWriterFilter@7ca60921, org.springframework.security.web.authentication.logout.LogoutFilter@2780f370, com.hayan.dividend.jwt.JwtAuthenticationFilter@2e6c513d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@255df8b7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6fc1fb8d, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@24e4338e, org.springframework.security.web.session.SessionManagementFilter@2c0c4adb, org.springframework.security.web.access.ExceptionTranslationFilter@37fcec42, org.springframework.security.web.access.intercept.AuthorizationFilter@d4d3e2b]]
2024-09-05 08:39:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-05 08:39:37 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 08:39:37 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 08:39:37 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 08:39:37 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.581 seconds (process running for 3.016)
2024-09-05 08:39:41 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 08:39:41 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 08:39:41 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 18 ms
2024-09-05 08:39:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan2, password=test, roles=[READ]]]
2024-09-05 08:39:41 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan2, password=test, roles=[READ]]]
2024-09-05 08:39:41 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 08:39:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 08:39:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 107 ms
2024-09-05 08:39:41 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:39:41 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@183aef95
2024-09-05 08:39:41 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 114 ms
2024-09-05 08:39:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 08:39:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 08:39:59 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 08:39:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 08:39:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 100 ms
2024-09-05 08:39:59 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:39:59 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:39:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@2145a02b
2024-09-05 08:39:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 110 ms
2024-09-05 08:40:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:40:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:40:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:40:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:40:04 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:40:04 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:40:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:40:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 23 ms
2024-09-05 08:40:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:40:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 201 ms
2024-09-05 08:40:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 08:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzMjA0LCJleHAiOjE3MjU1Nzk2MDR9.ErPHmewchskrj8l53yStxvxaht3oamHbSHjbIyWq7BxqyYNsw_QLc4sH2L4-Fzn__9NV5CcO4ZlGlYLZ1ceUFg
2024-09-05 08:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 32 ms
2024-09-05 08:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzMjA0LCJleHAiOjE3MjU1Nzk2MDR9.ErPHmewchskrj8l53yStxvxaht3oamHbSHjbIyWq7BxqyYNsw_QLc4sH2L4-Fzn__9NV5CcO4ZlGlYLZ1ceUFg
2024-09-05 08:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 233 ms
2024-09-05 08:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzMjA0LCJleHAiOjE3MjU1Nzk2MDR9.ErPHmewchskrj8l53yStxvxaht3oamHbSHjbIyWq7BxqyYNsw_QLc4sH2L4-Fzn__9NV5CcO4ZlGlYLZ1ceUFg"]>
2024-09-05 08:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 236 ms
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzMjA0LCJleHAiOjE3MjU1Nzk2MDR9.ErPHmewchskrj8l53yStxvxaht3oamHbSHjbIyWq7BxqyYNsw_QLc4sH2L4-Fzn__9NV5CcO4ZlGlYLZ1ceUFg]
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 36 ms
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzMjA0LCJleHAiOjE3MjU1Nzk2MDR9.ErPHmewchskrj8l53yStxvxaht3oamHbSHjbIyWq7BxqyYNsw_QLc4sH2L4-Fzn__9NV5CcO4ZlGlYLZ1ceUFg]
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:41:00 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:41:00 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 28 ms
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [c]
2024-09-05 08:41:00 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [c]
2024-09-05 08:41:01 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 08:41:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [c]
2024-09-05 08:41:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@6aa39408
2024-09-05 08:41:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 2406 ms
2024-09-05 08:41:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@6aa39408]
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@1568b116, com.hayan.dividend.domain.Dividend@5c72e9e0, com.hayan.dividend.domain.Dividend@4f7e6bc7, com.hayan.dividend.domain.Dividend@1d8b1f96, com.hayan.dividend.domain.Dividend@4d3bed30, com.hayan.dividend.domain.Dividend@6cd209e, com.hayan.dividend.domain.Dividend@3a5153d3, com.hayan.dividend.domain.Dividend@7fe39ca0, com.hayan.dividend.domain.Dividend@6da3ac01, com.hayan.dividend.domain.Dividend@205b8fb, com.hayan.dividend.domain.Dividend@32fabca3, com.hayan.dividend.domain.Dividend@519f20c0, com.hayan.dividend.domain.Dividend@212c4d56, com.hayan.dividend.domain.Dividend@ec1ebe8, com.hayan.dividend.domain.Dividend@69395137, com.hayan.dividend.domain.Dividend@4108f5f0, com.hayan.dividend.domain.Dividend@20d467a, com.hayan.dividend.domain.Dividend@3927378, com.hayan.dividend.domain.Dividend@20012ad4, com.hayan.dividend.domain.Dividend@26a0fc51, com.hayan.dividend.domain.Dividend@4ef65069, com.hayan.dividend.domain.Dividend@5e6fe37c, com.hayan.dividend.domain.Dividend@771125ef, com.hayan.dividend.domain.Dividend@56720d28, com.hayan.dividend.domain.Dividend@2afb7a97, com.hayan.dividend.domain.Dividend@b2e08b7, com.hayan.dividend.domain.Dividend@756e7a60, com.hayan.dividend.domain.Dividend@333332a8, com.hayan.dividend.domain.Dividend@42edc99b, com.hayan.dividend.domain.Dividend@397d1ac1, com.hayan.dividend.domain.Dividend@3f46caf4, com.hayan.dividend.domain.Dividend@15ca19c6, com.hayan.dividend.domain.Dividend@3947abf5, com.hayan.dividend.domain.Dividend@68bd150e, com.hayan.dividend.domain.Dividend@61a56387, com.hayan.dividend.domain.Dividend@24e4425c, com.hayan.dividend.domain.Dividend@20f85d36, com.hayan.dividend.domain.Dividend@206d2942, com.hayan.dividend.domain.Dividend@6a9edf93, com.hayan.dividend.domain.Dividend@6c6e963e, com.hayan.dividend.domain.Dividend@e9d7768, com.hayan.dividend.domain.Dividend@477368c0, com.hayan.dividend.domain.Dividend@5b0d55fa, com.hayan.dividend.domain.Dividend@434af7c3, com.hayan.dividend.domain.Dividend@2689eef5, com.hayan.dividend.domain.Dividend@7ae0a78c, com.hayan.dividend.domain.Dividend@4bf39faf, com.hayan.dividend.domain.Dividend@5f138dfd, com.hayan.dividend.domain.Dividend@36043eac, com.hayan.dividend.domain.Dividend@49273327, com.hayan.dividend.domain.Dividend@1efed34b, com.hayan.dividend.domain.Dividend@5d41d90c, com.hayan.dividend.domain.Dividend@4a277d56, com.hayan.dividend.domain.Dividend@3ae9d13e, com.hayan.dividend.domain.Dividend@52e529a3, com.hayan.dividend.domain.Dividend@13f034a, com.hayan.dividend.domain.Dividend@700313f6, com.hayan.dividend.domain.Dividend@4975ce9, com.hayan.dividend.domain.Dividend@7fc4d5e9, com.hayan.dividend.domain.Dividend@698ac08, com.hayan.dividend.domain.Dividend@6e6c938e, com.hayan.dividend.domain.Dividend@5022fabe, com.hayan.dividend.domain.Dividend@91006ce, com.hayan.dividend.domain.Dividend@4a2b1308, com.hayan.dividend.domain.Dividend@40d11920, com.hayan.dividend.domain.Dividend@761fc8e, com.hayan.dividend.domain.Dividend@ecebcda, com.hayan.dividend.domain.Dividend@1cef5d58, com.hayan.dividend.domain.Dividend@54bf4ffc, com.hayan.dividend.domain.Dividend@5cb25c69, com.hayan.dividend.domain.Dividend@27e11349, com.hayan.dividend.domain.Dividend@41028f70, com.hayan.dividend.domain.Dividend@6fecf803, com.hayan.dividend.domain.Dividend@2173a083, com.hayan.dividend.domain.Dividend@e2784bf, com.hayan.dividend.domain.Dividend@5b8bf304, com.hayan.dividend.domain.Dividend@532f2496, com.hayan.dividend.domain.Dividend@6fe4e1c8, com.hayan.dividend.domain.Dividend@5dd482f7, com.hayan.dividend.domain.Dividend@5943599a, com.hayan.dividend.domain.Dividend@7362cdb0, com.hayan.dividend.domain.Dividend@3b4088b5, com.hayan.dividend.domain.Dividend@42fa6610, com.hayan.dividend.domain.Dividend@136785c, com.hayan.dividend.domain.Dividend@645c2a87, com.hayan.dividend.domain.Dividend@5be61399, com.hayan.dividend.domain.Dividend@4a3d3413, com.hayan.dividend.domain.Dividend@78fb5190, com.hayan.dividend.domain.Dividend@7df6441a, com.hayan.dividend.domain.Dividend@16e7eae6, com.hayan.dividend.domain.Dividend@35d9d985, com.hayan.dividend.domain.Dividend@170c697f, com.hayan.dividend.domain.Dividend@58152910, com.hayan.dividend.domain.Dividend@718c582e, com.hayan.dividend.domain.Dividend@ae2a26b, com.hayan.dividend.domain.Dividend@7ed165d9, com.hayan.dividend.domain.Dividend@ffd8eba, com.hayan.dividend.domain.Dividend@1c23fa43, com.hayan.dividend.domain.Dividend@34df256, com.hayan.dividend.domain.Dividend@76c7b04b, com.hayan.dividend.domain.Dividend@152c7877, com.hayan.dividend.domain.Dividend@16de7973, com.hayan.dividend.domain.Dividend@7aedf6bc, com.hayan.dividend.domain.Dividend@31635442, com.hayan.dividend.domain.Dividend@477a6dd9, com.hayan.dividend.domain.Dividend@220a91a4, com.hayan.dividend.domain.Dividend@3747db4f, com.hayan.dividend.domain.Dividend@1c2d58a1, com.hayan.dividend.domain.Dividend@8adfa58, com.hayan.dividend.domain.Dividend@7e5ccd58, com.hayan.dividend.domain.Dividend@77c8fc7f, com.hayan.dividend.domain.Dividend@1d64a77, com.hayan.dividend.domain.Dividend@66ce1f2f, com.hayan.dividend.domain.Dividend@7e6038a3, com.hayan.dividend.domain.Dividend@4e7b1814, com.hayan.dividend.domain.Dividend@7dcd665e, com.hayan.dividend.domain.Dividend@6b6c39af, com.hayan.dividend.domain.Dividend@14b6a141, com.hayan.dividend.domain.Dividend@29bb07b, com.hayan.dividend.domain.Dividend@1472d9e0, com.hayan.dividend.domain.Dividend@1e593b80, com.hayan.dividend.domain.Dividend@3fc43da3, com.hayan.dividend.domain.Dividend@60035a48, com.hayan.dividend.domain.Dividend@623c3271, com.hayan.dividend.domain.Dividend@35ee908d, com.hayan.dividend.domain.Dividend@2b598ab6, com.hayan.dividend.domain.Dividend@51f2448f, com.hayan.dividend.domain.Dividend@525e5b7a, com.hayan.dividend.domain.Dividend@13f5c344, com.hayan.dividend.domain.Dividend@741ee7b6, com.hayan.dividend.domain.Dividend@370b0386, com.hayan.dividend.domain.Dividend@172e1b96, com.hayan.dividend.domain.Dividend@2afc15d4, com.hayan.dividend.domain.Dividend@295c646a, com.hayan.dividend.domain.Dividend@46a455f4, com.hayan.dividend.domain.Dividend@2131041d, com.hayan.dividend.domain.Dividend@6ba9e75a, com.hayan.dividend.domain.Dividend@219cb171, com.hayan.dividend.domain.Dividend@45f35b43, com.hayan.dividend.domain.Dividend@6c4bbe0c, com.hayan.dividend.domain.Dividend@487c17e8, com.hayan.dividend.domain.Dividend@c2f20af, com.hayan.dividend.domain.Dividend@53595b2a]
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1015 ms
2024-09-05 08:41:04 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@1568b116, com.hayan.dividend.domain.Dividend@5c72e9e0, com.hayan.dividend.domain.Dividend@4f7e6bc7, com.hayan.dividend.domain.Dividend@1d8b1f96, com.hayan.dividend.domain.Dividend@4d3bed30, com.hayan.dividend.domain.Dividend@6cd209e, com.hayan.dividend.domain.Dividend@3a5153d3, com.hayan.dividend.domain.Dividend@7fe39ca0, com.hayan.dividend.domain.Dividend@6da3ac01, com.hayan.dividend.domain.Dividend@205b8fb, com.hayan.dividend.domain.Dividend@32fabca3, com.hayan.dividend.domain.Dividend@519f20c0, com.hayan.dividend.domain.Dividend@212c4d56, com.hayan.dividend.domain.Dividend@ec1ebe8, com.hayan.dividend.domain.Dividend@69395137, com.hayan.dividend.domain.Dividend@4108f5f0, com.hayan.dividend.domain.Dividend@20d467a, com.hayan.dividend.domain.Dividend@3927378, com.hayan.dividend.domain.Dividend@20012ad4, com.hayan.dividend.domain.Dividend@26a0fc51, com.hayan.dividend.domain.Dividend@4ef65069, com.hayan.dividend.domain.Dividend@5e6fe37c, com.hayan.dividend.domain.Dividend@771125ef, com.hayan.dividend.domain.Dividend@56720d28, com.hayan.dividend.domain.Dividend@2afb7a97, com.hayan.dividend.domain.Dividend@b2e08b7, com.hayan.dividend.domain.Dividend@756e7a60, com.hayan.dividend.domain.Dividend@333332a8, com.hayan.dividend.domain.Dividend@42edc99b, com.hayan.dividend.domain.Dividend@397d1ac1, com.hayan.dividend.domain.Dividend@3f46caf4, com.hayan.dividend.domain.Dividend@15ca19c6, com.hayan.dividend.domain.Dividend@3947abf5, com.hayan.dividend.domain.Dividend@68bd150e, com.hayan.dividend.domain.Dividend@61a56387, com.hayan.dividend.domain.Dividend@24e4425c, com.hayan.dividend.domain.Dividend@20f85d36, com.hayan.dividend.domain.Dividend@206d2942, com.hayan.dividend.domain.Dividend@6a9edf93, com.hayan.dividend.domain.Dividend@6c6e963e, com.hayan.dividend.domain.Dividend@e9d7768, com.hayan.dividend.domain.Dividend@477368c0, com.hayan.dividend.domain.Dividend@5b0d55fa, com.hayan.dividend.domain.Dividend@434af7c3, com.hayan.dividend.domain.Dividend@2689eef5, com.hayan.dividend.domain.Dividend@7ae0a78c, com.hayan.dividend.domain.Dividend@4bf39faf, com.hayan.dividend.domain.Dividend@5f138dfd, com.hayan.dividend.domain.Dividend@36043eac, com.hayan.dividend.domain.Dividend@49273327, com.hayan.dividend.domain.Dividend@1efed34b, com.hayan.dividend.domain.Dividend@5d41d90c, com.hayan.dividend.domain.Dividend@4a277d56, com.hayan.dividend.domain.Dividend@3ae9d13e, com.hayan.dividend.domain.Dividend@52e529a3, com.hayan.dividend.domain.Dividend@13f034a, com.hayan.dividend.domain.Dividend@700313f6, com.hayan.dividend.domain.Dividend@4975ce9, com.hayan.dividend.domain.Dividend@7fc4d5e9, com.hayan.dividend.domain.Dividend@698ac08, com.hayan.dividend.domain.Dividend@6e6c938e, com.hayan.dividend.domain.Dividend@5022fabe, com.hayan.dividend.domain.Dividend@91006ce, com.hayan.dividend.domain.Dividend@4a2b1308, com.hayan.dividend.domain.Dividend@40d11920, com.hayan.dividend.domain.Dividend@761fc8e, com.hayan.dividend.domain.Dividend@ecebcda, com.hayan.dividend.domain.Dividend@1cef5d58, com.hayan.dividend.domain.Dividend@54bf4ffc, com.hayan.dividend.domain.Dividend@5cb25c69, com.hayan.dividend.domain.Dividend@27e11349, com.hayan.dividend.domain.Dividend@41028f70, com.hayan.dividend.domain.Dividend@6fecf803, com.hayan.dividend.domain.Dividend@2173a083, com.hayan.dividend.domain.Dividend@e2784bf, com.hayan.dividend.domain.Dividend@5b8bf304, com.hayan.dividend.domain.Dividend@532f2496, com.hayan.dividend.domain.Dividend@6fe4e1c8, com.hayan.dividend.domain.Dividend@5dd482f7, com.hayan.dividend.domain.Dividend@5943599a, com.hayan.dividend.domain.Dividend@7362cdb0, com.hayan.dividend.domain.Dividend@3b4088b5, com.hayan.dividend.domain.Dividend@42fa6610, com.hayan.dividend.domain.Dividend@136785c, com.hayan.dividend.domain.Dividend@645c2a87, com.hayan.dividend.domain.Dividend@5be61399, com.hayan.dividend.domain.Dividend@4a3d3413, com.hayan.dividend.domain.Dividend@78fb5190, com.hayan.dividend.domain.Dividend@7df6441a, com.hayan.dividend.domain.Dividend@16e7eae6, com.hayan.dividend.domain.Dividend@35d9d985, com.hayan.dividend.domain.Dividend@170c697f, com.hayan.dividend.domain.Dividend@58152910, com.hayan.dividend.domain.Dividend@718c582e, com.hayan.dividend.domain.Dividend@ae2a26b, com.hayan.dividend.domain.Dividend@7ed165d9, com.hayan.dividend.domain.Dividend@ffd8eba, com.hayan.dividend.domain.Dividend@1c23fa43, com.hayan.dividend.domain.Dividend@34df256, com.hayan.dividend.domain.Dividend@76c7b04b, com.hayan.dividend.domain.Dividend@152c7877, com.hayan.dividend.domain.Dividend@16de7973, com.hayan.dividend.domain.Dividend@7aedf6bc, com.hayan.dividend.domain.Dividend@31635442, com.hayan.dividend.domain.Dividend@477a6dd9, com.hayan.dividend.domain.Dividend@220a91a4, com.hayan.dividend.domain.Dividend@3747db4f, com.hayan.dividend.domain.Dividend@1c2d58a1, com.hayan.dividend.domain.Dividend@8adfa58, com.hayan.dividend.domain.Dividend@7e5ccd58, com.hayan.dividend.domain.Dividend@77c8fc7f, com.hayan.dividend.domain.Dividend@1d64a77, com.hayan.dividend.domain.Dividend@66ce1f2f, com.hayan.dividend.domain.Dividend@7e6038a3, com.hayan.dividend.domain.Dividend@4e7b1814, com.hayan.dividend.domain.Dividend@7dcd665e, com.hayan.dividend.domain.Dividend@6b6c39af, com.hayan.dividend.domain.Dividend@14b6a141, com.hayan.dividend.domain.Dividend@29bb07b, com.hayan.dividend.domain.Dividend@1472d9e0, com.hayan.dividend.domain.Dividend@1e593b80, com.hayan.dividend.domain.Dividend@3fc43da3, com.hayan.dividend.domain.Dividend@60035a48, com.hayan.dividend.domain.Dividend@623c3271, com.hayan.dividend.domain.Dividend@35ee908d, com.hayan.dividend.domain.Dividend@2b598ab6, com.hayan.dividend.domain.Dividend@51f2448f, com.hayan.dividend.domain.Dividend@525e5b7a, com.hayan.dividend.domain.Dividend@13f5c344, com.hayan.dividend.domain.Dividend@741ee7b6, com.hayan.dividend.domain.Dividend@370b0386, com.hayan.dividend.domain.Dividend@172e1b96, com.hayan.dividend.domain.Dividend@2afc15d4, com.hayan.dividend.domain.Dividend@295c646a, com.hayan.dividend.domain.Dividend@46a455f4, com.hayan.dividend.domain.Dividend@2131041d, com.hayan.dividend.domain.Dividend@6ba9e75a, com.hayan.dividend.domain.Dividend@219cb171, com.hayan.dividend.domain.Dividend@45f35b43, com.hayan.dividend.domain.Dividend@6c4bbe0c, com.hayan.dividend.domain.Dividend@487c17e8, com.hayan.dividend.domain.Dividend@c2f20af, com.hayan.dividend.domain.Dividend@53595b2a]]
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 18 ms
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Citigroup Inc.]]
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3460 ms
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@541c26e8
2024-09-05 08:41:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3462 ms
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzMjA0LCJleHAiOjE3MjU1Nzk2MDR9.ErPHmewchskrj8l53yStxvxaht3oamHbSHjbIyWq7BxqyYNsw_QLc4sH2L4-Fzn__9NV5CcO4ZlGlYLZ1ceUFg]
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 16 ms
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzMjA0LCJleHAiOjE3MjU1Nzk2MDR9.ErPHmewchskrj8l53yStxvxaht3oamHbSHjbIyWq7BxqyYNsw_QLc4sH2L4-Fzn__9NV5CcO4ZlGlYLZ1ceUFg]
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:42:17 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:42:17 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 9 ms
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.autocomplete with arguments: [C]
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.autocomplete with arguments: [C]
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.autocomplete with result: [Citigroup Inc.]
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.autocomplete in 0 ms
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.autocomplete with result: com.hayan.dividend.global.ApplicationResponse@6780d667
2024-09-05 08:42:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.autocomplete in 0 ms
2024-09-05 08:46:54 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 08:46:54 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 08:46:54 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 08:46:54 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 08:46:55 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 08:46:55 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 36985 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 08:46:55 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 08:46:55 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 08:46:55 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 08:46:55 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 08:46:56 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 08:46:56 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 08:46:56 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 68 ms. Found 3 JPA repository interfaces.
2024-09-05 08:46:56 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 08:46:56 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 08:46:56 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:46:56 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:46:56 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 08:46:56 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-05 08:46:56 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 08:46:56 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 08:46:56 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 08:46:56 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 08:46:56 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 08:46:56 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 833 ms
2024-09-05 08:46:56 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 08:46:56 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 08:46:56 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 08:46:56 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 08:46:56 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 08:46:56 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 08:46:57 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 08:46:57 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 08:46:57 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 08:46:57 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 08:46:57 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 08:46:57 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 08:46:57 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 08:46:57 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 08:46:57 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 08:46:57 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 08:46:57 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 08:46:57 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 08:46:57 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@1eedb52b
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@1eedb52b]
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@644f7bdb
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@541672dd
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@38a49d9e]
2024-09-05 08:46:57 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@64ad02f3
2024-09-05 08:46:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 08:46:58 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 08:46:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@6602d68a]
2024-09-05 08:46:58 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@77bcd62a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2cd6a4bd, org.springframework.security.web.context.SecurityContextHolderFilter@2262d273, org.springframework.security.web.header.HeaderWriterFilter@50db2df, org.springframework.security.web.authentication.logout.LogoutFilter@2cae4d29, com.hayan.dividend.jwt.JwtAuthenticationFilter@7afe9893, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@248343db, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@391656d6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2de43602, org.springframework.security.web.session.SessionManagementFilter@67b56f2f, org.springframework.security.web.access.ExceptionTranslationFilter@4e345feb, org.springframework.security.web.access.intercept.AuthorizationFilter@1e98b53d]]
2024-09-05 08:46:58 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 08:46:58 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 08:46:58 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 08:46:58 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 08:46:58 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.562 seconds (process running for 2.97)
2024-09-05 08:47:03 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 08:47:03 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 08:47:03 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 08:47:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 08:47:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 08:47:03 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 08:47:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 08:47:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 103 ms
2024-09-05 08:47:03 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:47:03 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 08:47:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@7e5d29c9
2024-09-05 08:47:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 109 ms
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:47:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:47:05 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 192 ms
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzNjI1LCJleHAiOjE3MjU1ODAwMjV9.2E2jnmUd72uyjIZQDUHDOZBptDPwFc3TKf34Z56-sPS_MY1nxpexhZJ2pe3BA_ynDzEOvr4FgNTO9HaN3vq5jA
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 20 ms
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzNjI1LCJleHAiOjE3MjU1ODAwMjV9.2E2jnmUd72uyjIZQDUHDOZBptDPwFc3TKf34Z56-sPS_MY1nxpexhZJ2pe3BA_ynDzEOvr4FgNTO9HaN3vq5jA
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 213 ms
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzNjI1LCJleHAiOjE3MjU1ODAwMjV9.2E2jnmUd72uyjIZQDUHDOZBptDPwFc3TKf34Z56-sPS_MY1nxpexhZJ2pe3BA_ynDzEOvr4FgNTO9HaN3vq5jA"]>
2024-09-05 08:47:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 215 ms
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzNjI1LCJleHAiOjE3MjU1ODAwMjV9.2E2jnmUd72uyjIZQDUHDOZBptDPwFc3TKf34Z56-sPS_MY1nxpexhZJ2pe3BA_ynDzEOvr4FgNTO9HaN3vq5jA]
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 25 ms
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NDkzNjI1LCJleHAiOjE3MjU1ODAwMjV9.2E2jnmUd72uyjIZQDUHDOZBptDPwFc3TKf34Z56-sPS_MY1nxpexhZJ2pe3BA_ynDzEOvr4FgNTO9HaN3vq5jA]
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 08:47:11 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 08:47:11 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [c]
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [c]
2024-09-05 08:47:11 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 08:47:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [c]
2024-09-05 08:47:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@15468f89
2024-09-05 08:47:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1920 ms
2024-09-05 08:47:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@15468f89]
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1223 ms
2024-09-05 08:47:14 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 4 ms
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Citigroup Inc.]]
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3172 ms
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@399ae852
2024-09-05 08:47:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3174 ms
2024-09-05 10:54:41 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=15m12s942ms).
2024-09-05 12:40:50 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h46m9s619ms).
2024-09-05 15:41:04 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3h13s446ms).
2024-09-05 16:43:27 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h2m23s601ms).
2024-09-05 18:06:14 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1h22m46s85ms).
2024-09-05 18:28:01 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=21m47s890ms).
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:32:03 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:32:03 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 12 ms
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 103 ms
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI4NzIzLCJleHAiOjE3MjU2MTUxMjN9.2hKNK99e5x2A594rVD97zGR9-xW7BFzF2o4omyJON5KqMwmcqCH44tbJt2OBGtiUll1SlR6pT9E3jpNt27TxsQ
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 4 ms
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI4NzIzLCJleHAiOjE3MjU2MTUxMjN9.2hKNK99e5x2A594rVD97zGR9-xW7BFzF2o4omyJON5KqMwmcqCH44tbJt2OBGtiUll1SlR6pT9E3jpNt27TxsQ
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 109 ms
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI4NzIzLCJleHAiOjE3MjU2MTUxMjN9.2hKNK99e5x2A594rVD97zGR9-xW7BFzF2o4omyJON5KqMwmcqCH44tbJt2OBGtiUll1SlR6pT9E3jpNt27TxsQ"]>
2024-09-05 18:32:03 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 112 ms
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI4NzIzLCJleHAiOjE3MjU2MTUxMjN9.2hKNK99e5x2A594rVD97zGR9-xW7BFzF2o4omyJON5KqMwmcqCH44tbJt2OBGtiUll1SlR6pT9E3jpNt27TxsQ]
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI4NzIzLCJleHAiOjE3MjU2MTUxMjN9.2hKNK99e5x2A594rVD97zGR9-xW7BFzF2o4omyJON5KqMwmcqCH44tbJt2OBGtiUll1SlR6pT9E3jpNt27TxsQ]
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:32:13 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:32:13 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [aaa]
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [aaa]
2024-09-05 18:32:13 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:32:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [aaa]
2024-09-05 18:32:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@5dda73a8
2024-09-05 18:32:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1488 ms
2024-09-05 18:32:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@5dda73a8]
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1386 ms
2024-09-05 18:32:16 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 1 ms
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Alternative Access First Priority CLO Bond ETF]]
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2884 ms
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@4856e344
2024-09-05 18:32:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2885 ms
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI4NzIzLCJleHAiOjE3MjU2MTUxMjN9.2hKNK99e5x2A594rVD97zGR9-xW7BFzF2o4omyJON5KqMwmcqCH44tbJt2OBGtiUll1SlR6pT9E3jpNt27TxsQ]
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI4NzIzLCJleHAiOjE3MjU2MTUxMjN9.2hKNK99e5x2A594rVD97zGR9-xW7BFzF2o4omyJON5KqMwmcqCH44tbJt2OBGtiUll1SlR6pT9E3jpNt27TxsQ]
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:32:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:32:22 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.getAllCompanies with arguments: [0, 10]
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.loadAllCompanies with arguments: [0, 10]
2024-09-05 18:32:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.loadAllCompanies with result: Page 1 of 1 containing com.hayan.dividend.domain.dto.CompanyResponse instances
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.loadAllCompanies in 15 ms
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.getAllCompanies with result: com.hayan.dividend.global.ApplicationResponse@473b071f
2024-09-05 18:32:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.getAllCompanies in 17 ms
2024-09-05 18:32:22 WARN  o.s.d.w.c.SpringDataJacksonConfiguration$PageModule$WarningLoggingModifier - Serializing PageImpl instances as-is is not supported, meaning that there is no guarantee about the stability of the resulting JSON structure!
	For a stable JSON structure, please use Spring Data's PagedModel (globally via @EnableSpringDataWebSupport(pageSerializationMode = VIA_DTO))
	or Spring HATEOAS and Spring Data's PagedResourcesAssembler as documented in https://docs.spring.io/spring-data/commons/reference/repositories/core-extensions.html#core.web.pageables.

2024-09-05 18:40:01 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:40:01 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:40:01 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:40:01 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:40:03 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:40:03 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 47612 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:40:03 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:40:03 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:40:03 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:40:03 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:40:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:40:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:40:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 72 ms. Found 3 JPA repository interfaces.
2024-09-05 18:40:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:40:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:40:03 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:40:03 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:40:03 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:40:03 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 18:40:04 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:40:04 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 18:40:04 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 18:40:04 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 18:40:04 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 18:40:04 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 829 ms
2024-09-05 18:40:04 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:40:04 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:40:04 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:40:04 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:40:04 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:40:04 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:40:04 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:40:04 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:40:04 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:40:04 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:40:05 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:40:05 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:40:05 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:40:05 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:40:05 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:40:05 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:40:05 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:40:05 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:40:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@17ca0546
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 9 ms
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@17ca0546]
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@3636bac7
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 10 ms
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@597caac8
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@2fee0a1e]
2024-09-05 18:40:05 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@73ae5dff
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-05 18:40:05 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@76492e54]
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@686714c6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@13155afa, org.springframework.security.web.context.SecurityContextHolderFilter@7f1367d1, org.springframework.security.web.header.HeaderWriterFilter@677e7d32, org.springframework.security.web.authentication.logout.LogoutFilter@5b8736bd, com.hayan.dividend.jwt.JwtAuthenticationFilter@21043df7, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@12576f6e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18da4018, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1338254c, org.springframework.security.web.session.SessionManagementFilter@4e4a6ccd, org.springframework.security.web.access.ExceptionTranslationFilter@39ee6a88, org.springframework.security.web.access.intercept.AuthorizationFilter@b5e1afa]]
2024-09-05 18:40:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-05 18:40:05 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:40:05 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 18:40:05 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:40:05 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.635 seconds (process running for 3.142)
2024-09-05 18:40:09 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 18:40:09 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 18:40:09 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2024-09-05 18:40:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:40:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:40:09 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 18:40:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 18:40:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 104 ms
2024-09-05 18:40:09 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:40:09 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:40:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@72c386ba
2024-09-05 18:40:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 112 ms
2024-09-05 18:40:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:40:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:40:10 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:40:11 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:40:11 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 194 ms
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5MjExLCJleHAiOjE3MjU2MTU2MTF9.QFIzB8gyv0IRm5V8Wlm9Lp7YOpDyRznr0Dm0ztQ80pOh3T0kcHvwjfxpDaGEoKV2DutAiNHaZGC-QGFgur05_Q
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 26 ms
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5MjExLCJleHAiOjE3MjU2MTU2MTF9.QFIzB8gyv0IRm5V8Wlm9Lp7YOpDyRznr0Dm0ztQ80pOh3T0kcHvwjfxpDaGEoKV2DutAiNHaZGC-QGFgur05_Q
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 222 ms
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5MjExLCJleHAiOjE3MjU2MTU2MTF9.QFIzB8gyv0IRm5V8Wlm9Lp7YOpDyRznr0Dm0ztQ80pOh3T0kcHvwjfxpDaGEoKV2DutAiNHaZGC-QGFgur05_Q"]>
2024-09-05 18:40:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 225 ms
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5MjExLCJleHAiOjE3MjU2MTU2MTF9.QFIzB8gyv0IRm5V8Wlm9Lp7YOpDyRznr0Dm0ztQ80pOh3T0kcHvwjfxpDaGEoKV2DutAiNHaZGC-QGFgur05_Q]
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 25 ms
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5MjExLCJleHAiOjE3MjU2MTU2MTF9.QFIzB8gyv0IRm5V8Wlm9Lp7YOpDyRznr0Dm0ztQ80pOh3T0kcHvwjfxpDaGEoKV2DutAiNHaZGC-QGFgur05_Q]
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:40:17 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:40:17 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 26 ms
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [aaa]
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [aaa]
2024-09-05 18:40:17 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:40:17 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [aaa]
2024-09-05 18:40:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@636508e1
2024-09-05 18:40:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1630 ms
2024-09-05 18:40:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@636508e1]
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@2d822468, com.hayan.dividend.domain.Dividend@17d0234c, com.hayan.dividend.domain.Dividend@3805140b, com.hayan.dividend.domain.Dividend@d418839, com.hayan.dividend.domain.Dividend@315c5c9d, com.hayan.dividend.domain.Dividend@2700d3b9, com.hayan.dividend.domain.Dividend@37352e1e, com.hayan.dividend.domain.Dividend@36b46881, com.hayan.dividend.domain.Dividend@65df727e, com.hayan.dividend.domain.Dividend@44e3f867, com.hayan.dividend.domain.Dividend@5a387b3b, com.hayan.dividend.domain.Dividend@4fdde09d, com.hayan.dividend.domain.Dividend@510f279a, com.hayan.dividend.domain.Dividend@af4dd1c, com.hayan.dividend.domain.Dividend@138c9eda, com.hayan.dividend.domain.Dividend@33f55d3e, com.hayan.dividend.domain.Dividend@1b6e9f2d, com.hayan.dividend.domain.Dividend@37dead61, com.hayan.dividend.domain.Dividend@40539f0e, com.hayan.dividend.domain.Dividend@59d63697, com.hayan.dividend.domain.Dividend@36ae5d77, com.hayan.dividend.domain.Dividend@74d95b66, com.hayan.dividend.domain.Dividend@282e111c, com.hayan.dividend.domain.Dividend@40a4f800, com.hayan.dividend.domain.Dividend@4254086, com.hayan.dividend.domain.Dividend@3a99290f, com.hayan.dividend.domain.Dividend@626769b1, com.hayan.dividend.domain.Dividend@5e4e905, com.hayan.dividend.domain.Dividend@2bebb84f, com.hayan.dividend.domain.Dividend@58493d6c, com.hayan.dividend.domain.Dividend@1bafd35, com.hayan.dividend.domain.Dividend@233480c6, com.hayan.dividend.domain.Dividend@556b7d2f, com.hayan.dividend.domain.Dividend@44d898b3, com.hayan.dividend.domain.Dividend@12dd8648, com.hayan.dividend.domain.Dividend@15e81665, com.hayan.dividend.domain.Dividend@1be483f2, com.hayan.dividend.domain.Dividend@1bf99d3d, com.hayan.dividend.domain.Dividend@6568b7cc, com.hayan.dividend.domain.Dividend@30e6de3a, com.hayan.dividend.domain.Dividend@f2220c7, com.hayan.dividend.domain.Dividend@58e5546b, com.hayan.dividend.domain.Dividend@78135e6c, com.hayan.dividend.domain.Dividend@7e82485a, com.hayan.dividend.domain.Dividend@60386b55, com.hayan.dividend.domain.Dividend@120c2d35, com.hayan.dividend.domain.Dividend@700ef126]
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 49774 ms
2024-09-05 18:41:08 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@2d822468, com.hayan.dividend.domain.Dividend@17d0234c, com.hayan.dividend.domain.Dividend@3805140b, com.hayan.dividend.domain.Dividend@d418839, com.hayan.dividend.domain.Dividend@315c5c9d, com.hayan.dividend.domain.Dividend@2700d3b9, com.hayan.dividend.domain.Dividend@37352e1e, com.hayan.dividend.domain.Dividend@36b46881, com.hayan.dividend.domain.Dividend@65df727e, com.hayan.dividend.domain.Dividend@44e3f867, com.hayan.dividend.domain.Dividend@5a387b3b, com.hayan.dividend.domain.Dividend@4fdde09d, com.hayan.dividend.domain.Dividend@510f279a, com.hayan.dividend.domain.Dividend@af4dd1c, com.hayan.dividend.domain.Dividend@138c9eda, com.hayan.dividend.domain.Dividend@33f55d3e, com.hayan.dividend.domain.Dividend@1b6e9f2d, com.hayan.dividend.domain.Dividend@37dead61, com.hayan.dividend.domain.Dividend@40539f0e, com.hayan.dividend.domain.Dividend@59d63697, com.hayan.dividend.domain.Dividend@36ae5d77, com.hayan.dividend.domain.Dividend@74d95b66, com.hayan.dividend.domain.Dividend@282e111c, com.hayan.dividend.domain.Dividend@40a4f800, com.hayan.dividend.domain.Dividend@4254086, com.hayan.dividend.domain.Dividend@3a99290f, com.hayan.dividend.domain.Dividend@626769b1, com.hayan.dividend.domain.Dividend@5e4e905, com.hayan.dividend.domain.Dividend@2bebb84f, com.hayan.dividend.domain.Dividend@58493d6c, com.hayan.dividend.domain.Dividend@1bafd35, com.hayan.dividend.domain.Dividend@233480c6, com.hayan.dividend.domain.Dividend@556b7d2f, com.hayan.dividend.domain.Dividend@44d898b3, com.hayan.dividend.domain.Dividend@12dd8648, com.hayan.dividend.domain.Dividend@15e81665, com.hayan.dividend.domain.Dividend@1be483f2, com.hayan.dividend.domain.Dividend@1bf99d3d, com.hayan.dividend.domain.Dividend@6568b7cc, com.hayan.dividend.domain.Dividend@30e6de3a, com.hayan.dividend.domain.Dividend@f2220c7, com.hayan.dividend.domain.Dividend@58e5546b, com.hayan.dividend.domain.Dividend@78135e6c, com.hayan.dividend.domain.Dividend@7e82485a, com.hayan.dividend.domain.Dividend@60386b55, com.hayan.dividend.domain.Dividend@120c2d35, com.hayan.dividend.domain.Dividend@700ef126]]
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 6 ms
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Alternative Access First Priority CLO Bond ETF]]
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 51426 ms
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@597470b7
2024-09-05 18:41:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 51428 ms
2024-09-05 18:41:08 WARN  o.s.w.s.m.s.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.context.request.async.AsyncRequestNotUsableException: ServletOutputStream failed to flush: java.nio.channels.ClosedChannelException]
2024-09-05 18:41:08 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:41:08 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:41:08 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:41:08 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:43:14 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:43:14 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 48023 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:43:14 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:43:14 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:43:14 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:43:14 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:43:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:43:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:43:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 68 ms. Found 3 JPA repository interfaces.
2024-09-05 18:43:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:43:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:43:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:43:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:43:14 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:43:14 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-05 18:43:15 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:43:15 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 18:43:15 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 18:43:15 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 18:43:15 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 18:43:15 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 748 ms
2024-09-05 18:43:15 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:43:15 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:43:15 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:43:15 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:43:15 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:43:15 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:43:15 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:43:15 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:43:16 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:43:16 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:43:16 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:43:16 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:43:16 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:43:16 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:43:16 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:43:16 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:43:16 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:43:16 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:43:16 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@8754bc8
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 7 ms
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@8754bc8]
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@60ae26b5
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@67d3a0cc
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@2c97048e]
2024-09-05 18:43:16 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@247c9bc0
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 18:43:16 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@5a936651]
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@daa7346, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@30369734, org.springframework.security.web.context.SecurityContextHolderFilter@26675152, org.springframework.security.web.header.HeaderWriterFilter@163752c9, org.springframework.security.web.authentication.logout.LogoutFilter@7bb07cac, com.hayan.dividend.jwt.JwtAuthenticationFilter@6c7189b0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2ab3af50, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5dfe89b5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3dba4d9, org.springframework.security.web.session.SessionManagementFilter@129ec986, org.springframework.security.web.access.ExceptionTranslationFilter@38cd5420, org.springframework.security.web.access.intercept.AuthorizationFilter@37414c13]]
2024-09-05 18:43:16 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 18:43:16 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:43:16 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 18:43:16 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:43:16 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.433 seconds (process running for 2.756)
2024-09-05 18:43:20 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 18:43:20 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 18:43:20 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 18:43:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 18:43:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 18:43:20 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 18:43:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 18:43:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 101 ms
2024-09-05 18:43:20 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:43:20 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:43:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@1166361b
2024-09-05 18:43:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 107 ms
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:43:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:43:22 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 203 ms
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NDAyLCJleHAiOjE3MjU2MTU4MDJ9.MN94SuNEtCnKSLvIldai65YwHsYAKwf_2eJuq_BstROHzla5spF3PwHmvK0IwJ-TeC6yWeYTMu9nim_32jSsrA
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 22 ms
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NDAyLCJleHAiOjE3MjU2MTU4MDJ9.MN94SuNEtCnKSLvIldai65YwHsYAKwf_2eJuq_BstROHzla5spF3PwHmvK0IwJ-TeC6yWeYTMu9nim_32jSsrA
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 226 ms
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NDAyLCJleHAiOjE3MjU2MTU4MDJ9.MN94SuNEtCnKSLvIldai65YwHsYAKwf_2eJuq_BstROHzla5spF3PwHmvK0IwJ-TeC6yWeYTMu9nim_32jSsrA"]>
2024-09-05 18:43:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 228 ms
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NDAyLCJleHAiOjE3MjU2MTU4MDJ9.MN94SuNEtCnKSLvIldai65YwHsYAKwf_2eJuq_BstROHzla5spF3PwHmvK0IwJ-TeC6yWeYTMu9nim_32jSsrA]
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 32 ms
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NDAyLCJleHAiOjE3MjU2MTU4MDJ9.MN94SuNEtCnKSLvIldai65YwHsYAKwf_2eJuq_BstROHzla5spF3PwHmvK0IwJ-TeC6yWeYTMu9nim_32jSsrA]
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:43:30 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:43:30 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 22 ms
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [bb]
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [bb]
2024-09-05 18:43:30 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:43:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [bb]
2024-09-05 18:43:32 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@79f9b3bc
2024-09-05 18:43:32 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1852 ms
2024-09-05 18:43:32 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@79f9b3bc]
2024-09-05 18:43:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:43:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 18:43:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 2 ms
2024-09-05 18:43:33 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:45:40 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:45:40 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:45:40 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:45:40 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:45:42 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:45:42 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 48193 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:45:42 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:45:42 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:45:42 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:45:42 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:45:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:45:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:45:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 62 ms. Found 3 JPA repository interfaces.
2024-09-05 18:45:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:45:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:45:42 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:45:42 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:45:42 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:45:42 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-05 18:45:43 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:45:43 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 18:45:43 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 18:45:43 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 18:45:43 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 18:45:43 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 716 ms
2024-09-05 18:45:43 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:45:43 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:45:43 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:45:43 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:45:43 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:45:43 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:45:43 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:45:43 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:45:43 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:45:43 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:45:43 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:45:43 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:45:43 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:45:43 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:45:43 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:45:43 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:45:43 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:45:43 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:45:44 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@60938b8b
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@60938b8b]
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@bb8c7a6
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@60b1133e
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@3876878]
2024-09-05 18:45:44 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@1d89e0d6
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 18:45:44 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@50b3786b]
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@71a59849, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7a186c92, org.springframework.security.web.context.SecurityContextHolderFilter@609d24ec, org.springframework.security.web.header.HeaderWriterFilter@7b44f5e6, org.springframework.security.web.authentication.logout.LogoutFilter@30369734, com.hayan.dividend.jwt.JwtAuthenticationFilter@5ef8b4a2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3a2576f0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@14287ca2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2b329c20, org.springframework.security.web.session.SessionManagementFilter@5dfe89b5, org.springframework.security.web.access.ExceptionTranslationFilter@64575c91, org.springframework.security.web.access.intercept.AuthorizationFilter@1593c4b3]]
2024-09-05 18:45:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 18:45:44 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:45:44 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 18:45:44 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:45:44 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.341 seconds (process running for 2.63)
2024-09-05 18:45:49 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 18:45:49 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 18:45:49 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 7 ms
2024-09-05 18:45:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:45:49 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:45:49 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 18:45:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 18:45:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 101 ms
2024-09-05 18:45:49 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:45:49 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:45:49 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@25c09272
2024-09-05 18:45:49 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 107 ms
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:45:51 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:45:51 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 199 ms
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTUxLCJleHAiOjE3MjU2MTU5NTF9.bfHy_a-ZuA2XoHqPYfLCT75wcIU8L7jHoXuBjIjWFWQak4XGMsMw5YV_H8AgWUgi4__2iOLjUL06sjG3sW0kHQ
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 21 ms
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTUxLCJleHAiOjE3MjU2MTU5NTF9.bfHy_a-ZuA2XoHqPYfLCT75wcIU8L7jHoXuBjIjWFWQak4XGMsMw5YV_H8AgWUgi4__2iOLjUL06sjG3sW0kHQ
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 221 ms
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTUxLCJleHAiOjE3MjU2MTU5NTF9.bfHy_a-ZuA2XoHqPYfLCT75wcIU8L7jHoXuBjIjWFWQak4XGMsMw5YV_H8AgWUgi4__2iOLjUL06sjG3sW0kHQ"]>
2024-09-05 18:45:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 224 ms
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTUxLCJleHAiOjE3MjU2MTU5NTF9.bfHy_a-ZuA2XoHqPYfLCT75wcIU8L7jHoXuBjIjWFWQak4XGMsMw5YV_H8AgWUgi4__2iOLjUL06sjG3sW0kHQ]
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 23 ms
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTUxLCJleHAiOjE3MjU2MTU5NTF9.bfHy_a-ZuA2XoHqPYfLCT75wcIU8L7jHoXuBjIjWFWQak4XGMsMw5YV_H8AgWUgi4__2iOLjUL06sjG3sW0kHQ]
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:45:59 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:45:59 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [bb]
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [bb]
2024-09-05 18:45:59 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:45:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [bb]
2024-09-05 18:46:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@14a5cf05
2024-09-05 18:46:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1588 ms
2024-09-05 18:46:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@14a5cf05]
2024-09-05 18:46:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:46:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 18:46:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 2 ms
2024-09-05 18:46:02 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:46:26 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:46:27 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:46:27 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:46:27 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:46:28 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:46:28 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 48262 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:46:28 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:46:28 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:46:28 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:46:28 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:46:28 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:46:28 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:46:28 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 69 ms. Found 3 JPA repository interfaces.
2024-09-05 18:46:28 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:46:28 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:46:28 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:46:28 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:46:28 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:46:28 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 18:46:29 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:46:29 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 18:46:29 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 18:46:29 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 18:46:29 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 18:46:29 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 784 ms
2024-09-05 18:46:29 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:46:29 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:46:29 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:46:29 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:46:29 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:46:29 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:46:29 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:46:29 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:46:29 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:46:30 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:46:30 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:46:30 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:46:30 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:46:30 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:46:30 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:46:30 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:46:30 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:46:30 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:46:30 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@77efa50b
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@77efa50b]
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@43b03edb
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 10 ms
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@370b05a0
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@2d516d22]
2024-09-05 18:46:30 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@525d38d
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-05 18:46:30 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@1c5a210f]
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@4b14dce5, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2c01e66c, org.springframework.security.web.context.SecurityContextHolderFilter@3053a7a9, org.springframework.security.web.header.HeaderWriterFilter@18da4018, org.springframework.security.web.authentication.logout.LogoutFilter@a89da85, com.hayan.dividend.jwt.JwtAuthenticationFilter@6b5999c8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6091cb88, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@30c2fa13, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@99f0db1, org.springframework.security.web.session.SessionManagementFilter@2d700ced, org.springframework.security.web.access.ExceptionTranslationFilter@18df59ca, org.springframework.security.web.access.intercept.AuthorizationFilter@1b7f81ba]]
2024-09-05 18:46:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-05 18:46:30 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:46:30 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 18:46:30 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:46:30 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.532 seconds (process running for 2.878)
2024-09-05 18:46:34 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 18:46:34 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 18:46:34 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 18:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:46:34 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 18:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 18:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 113 ms
2024-09-05 18:46:34 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:46:34 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@e1b8a6
2024-09-05 18:46:34 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 121 ms
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:46:37 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:46:37 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 200 ms
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTk3LCJleHAiOjE3MjU2MTU5OTd9.kKBciNVXQVSYlUQiYhTxWAahQ3qqjQA7b-oqe8S0FRMswsW7mc5KdzrtcQP0UM6riKZsch9i0F5ZOLH_OFWdfA
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 23 ms
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTk3LCJleHAiOjE3MjU2MTU5OTd9.kKBciNVXQVSYlUQiYhTxWAahQ3qqjQA7b-oqe8S0FRMswsW7mc5KdzrtcQP0UM6riKZsch9i0F5ZOLH_OFWdfA
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 224 ms
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTk3LCJleHAiOjE3MjU2MTU5OTd9.kKBciNVXQVSYlUQiYhTxWAahQ3qqjQA7b-oqe8S0FRMswsW7mc5KdzrtcQP0UM6riKZsch9i0F5ZOLH_OFWdfA"]>
2024-09-05 18:46:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 226 ms
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTk3LCJleHAiOjE3MjU2MTU5OTd9.kKBciNVXQVSYlUQiYhTxWAahQ3qqjQA7b-oqe8S0FRMswsW7mc5KdzrtcQP0UM6riKZsch9i0F5ZOLH_OFWdfA]
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 26 ms
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NTk3LCJleHAiOjE3MjU2MTU5OTd9.kKBciNVXQVSYlUQiYhTxWAahQ3qqjQA7b-oqe8S0FRMswsW7mc5KdzrtcQP0UM6riKZsch9i0F5ZOLH_OFWdfA]
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:46:42 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:46:42 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [bb]
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [bb]
2024-09-05 18:46:42 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:46:42 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [bb]
2024-09-05 18:46:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@3fd224e7
2024-09-05 18:46:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1609 ms
2024-09-05 18:46:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@3fd224e7]
2024-09-05 18:48:46 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=2m17s613ms).
2024-09-05 18:48:47 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:48:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 18:48:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 2 ms
2024-09-05 18:48:47 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:48:47 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:48:47 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:48:47 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:48:47 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:48:48 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:48:48 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 48458 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:48:48 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:48:48 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:48:48 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:48:48 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:48:49 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:48:49 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:48:49 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63 ms. Found 3 JPA repository interfaces.
2024-09-05 18:48:49 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:48:49 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:48:49 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:48:49 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:48:49 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:48:49 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 18:48:49 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:48:49 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 762 ms
2024-09-05 18:48:49 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:48:49 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:48:49 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:48:49 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:48:49 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:48:49 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:48:49 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:48:49 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:48:50 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:48:50 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:48:50 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:48:50 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:48:50 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:48:50 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:48:50 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:48:50 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:48:50 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:48:50 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:48:50 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@31ccb24b
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@31ccb24b]
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@2b590d97
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3a7c503e
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@c9dd1b9]
2024-09-05 18:48:50 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@3a4ee1c5
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 18:48:50 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@12a257c2]
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@1845ccf7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@217f0517, org.springframework.security.web.context.SecurityContextHolderFilter@747d9876, org.springframework.security.web.header.HeaderWriterFilter@663eed4, org.springframework.security.web.authentication.logout.LogoutFilter@5696f95c, com.hayan.dividend.jwt.JwtAuthenticationFilter@25559795, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@713f4b25, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1aab37f1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@61369b37, org.springframework.security.web.session.SessionManagementFilter@34a7e795, org.springframework.security.web.access.ExceptionTranslationFilter@ad9d6a6, org.springframework.security.web.access.intercept.AuthorizationFilter@6b8a5131]]
2024-09-05 18:48:50 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 18:48:51 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:48:51 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:48:51 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.454 seconds (process running for 2.811)
2024-09-05 18:48:51 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:48:51 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:48:51 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:48:51 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:48:52 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:48:52 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 48466 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:48:52 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:48:52 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:48:52 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:48:52 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:48:52 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:48:52 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:48:52 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63 ms. Found 3 JPA repository interfaces.
2024-09-05 18:48:52 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:48:52 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:48:52 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:48:52 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:48:52 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:48:52 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 18:48:52 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:48:52 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 18:48:52 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 18:48:52 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 18:48:52 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 18:48:52 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 681 ms
2024-09-05 18:48:53 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:48:53 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:48:53 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:48:53 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:48:53 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:48:53 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:48:53 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:48:53 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:48:53 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:48:53 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:48:53 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:48:53 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:48:53 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:48:53 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:48:53 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:48:53 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:48:53 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:48:53 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:48:53 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:48:53 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:48:53 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@30e7e473
2024-09-05 18:48:53 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 6 ms
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@30e7e473]
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@5aca5d86
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@48a85fdc
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@4d1936e]
2024-09-05 18:48:54 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@3985a733
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 18:48:54 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@738f8864]
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@698c8da3, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@49983509, org.springframework.security.web.context.SecurityContextHolderFilter@2aba4a94, org.springframework.security.web.header.HeaderWriterFilter@54194605, org.springframework.security.web.authentication.logout.LogoutFilter@3fa2fc8f, com.hayan.dividend.jwt.JwtAuthenticationFilter@6fadb3c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2a64e208, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@34252455, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@38754390, org.springframework.security.web.session.SessionManagementFilter@48f419e7, org.springframework.security.web.access.ExceptionTranslationFilter@6ec74253, org.springframework.security.web.access.intercept.AuthorizationFilter@42bc511a]]
2024-09-05 18:48:54 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 16 ms
2024-09-05 18:48:54 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:48:54 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 18:48:54 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:48:54 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.286 seconds (process running for 2.562)
2024-09-05 18:48:57 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 18:48:57 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 18:48:57 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 18:48:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:48:57 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:48:57 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 18:48:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 18:48:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 103 ms
2024-09-05 18:48:57 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:48:57 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:48:57 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@701095ec
2024-09-05 18:48:57 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 110 ms
2024-09-05 18:48:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:48:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:48:58 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:48:59 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:48:59 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 17 ms
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 204 ms
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzM5LCJleHAiOjE3MjU2MTYxMzl9.7472B9wPtwsDTdx7F0mUX384UjdZznTDNeRNDL_PRMHQVzhP6VjvGzfcIdZiW6Bkdt-H8Uk9AYbv3gYN5XcxIA
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 21 ms
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzM5LCJleHAiOjE3MjU2MTYxMzl9.7472B9wPtwsDTdx7F0mUX384UjdZznTDNeRNDL_PRMHQVzhP6VjvGzfcIdZiW6Bkdt-H8Uk9AYbv3gYN5XcxIA
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 225 ms
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzM5LCJleHAiOjE3MjU2MTYxMzl9.7472B9wPtwsDTdx7F0mUX384UjdZznTDNeRNDL_PRMHQVzhP6VjvGzfcIdZiW6Bkdt-H8Uk9AYbv3gYN5XcxIA"]>
2024-09-05 18:48:59 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 227 ms
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzM5LCJleHAiOjE3MjU2MTYxMzl9.7472B9wPtwsDTdx7F0mUX384UjdZznTDNeRNDL_PRMHQVzhP6VjvGzfcIdZiW6Bkdt-H8Uk9AYbv3gYN5XcxIA]
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 28 ms
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzM5LCJleHAiOjE3MjU2MTYxMzl9.7472B9wPtwsDTdx7F0mUX384UjdZznTDNeRNDL_PRMHQVzhP6VjvGzfcIdZiW6Bkdt-H8Uk9AYbv3gYN5XcxIA]
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:49:04 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:49:04 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [bb]
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [bb]
2024-09-05 18:49:04 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:49:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [bb]
2024-09-05 18:49:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 18:49:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 18:49:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 3 ms
2024-09-05 18:49:06 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 18:49:20 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:49:20 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:49:20 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:49:20 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:49:21 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:49:21 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 48512 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:49:21 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:49:21 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:49:21 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:49:21 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:49:21 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:49:21 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:49:21 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63 ms. Found 3 JPA repository interfaces.
2024-09-05 18:49:21 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:49:21 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:49:21 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:49:21 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:49:21 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:49:21 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 18:49:22 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:49:22 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 18:49:22 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 18:49:22 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 18:49:22 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 18:49:22 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 762 ms
2024-09-05 18:49:22 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:49:22 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:49:22 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:49:22 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:49:22 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:49:22 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:49:22 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:49:22 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:49:23 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:49:23 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:49:23 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:49:23 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:49:23 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:49:23 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:49:23 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:49:23 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:49:23 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:49:23 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:49:23 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@5957c211
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@5957c211]
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@1d867bc7
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 10 ms
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@1aa41992
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@7ed2e4d6]
2024-09-05 18:49:23 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@6134649d
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-05 18:49:23 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@3a674d95]
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@25cb9be6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4b612971, org.springframework.security.web.context.SecurityContextHolderFilter@18df59ca, org.springframework.security.web.header.HeaderWriterFilter@6a2cbf89, org.springframework.security.web.authentication.logout.LogoutFilter@6fccff33, com.hayan.dividend.jwt.JwtAuthenticationFilter@7e72c5aa, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@18da4018, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3bfc8634, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1bb39525, org.springframework.security.web.session.SessionManagementFilter@1ba7bf34, org.springframework.security.web.access.ExceptionTranslationFilter@65c9946a, org.springframework.security.web.access.intercept.AuthorizationFilter@7a5282cc]]
2024-09-05 18:49:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 19 ms
2024-09-05 18:49:23 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:49:23 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 18:49:23 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:49:23 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.5 seconds (process running for 2.84)
2024-09-05 18:49:28 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 18:49:28 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 18:49:28 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 18:49:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 18:49:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 18:49:28 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 18:49:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 18:49:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 103 ms
2024-09-05 18:49:28 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:49:28 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:49:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@4fc91e0
2024-09-05 18:49:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 110 ms
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:49:30 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:49:30 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 201 ms
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzcwLCJleHAiOjE3MjU2MTYxNzB9.VZ_USQ7OKh1gx9-XJncP6H4vNsKf7QjcewqyqVPwVORqr8JE5GOxXCss2LWFhjWEFwlJva69AYszbz-Pa8xB9Q
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 23 ms
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzcwLCJleHAiOjE3MjU2MTYxNzB9.VZ_USQ7OKh1gx9-XJncP6H4vNsKf7QjcewqyqVPwVORqr8JE5GOxXCss2LWFhjWEFwlJva69AYszbz-Pa8xB9Q
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 226 ms
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzcwLCJleHAiOjE3MjU2MTYxNzB9.VZ_USQ7OKh1gx9-XJncP6H4vNsKf7QjcewqyqVPwVORqr8JE5GOxXCss2LWFhjWEFwlJva69AYszbz-Pa8xB9Q"]>
2024-09-05 18:49:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 227 ms
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzcwLCJleHAiOjE3MjU2MTYxNzB9.VZ_USQ7OKh1gx9-XJncP6H4vNsKf7QjcewqyqVPwVORqr8JE5GOxXCss2LWFhjWEFwlJva69AYszbz-Pa8xB9Q]
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 22 ms
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5NzcwLCJleHAiOjE3MjU2MTYxNzB9.VZ_USQ7OKh1gx9-XJncP6H4vNsKf7QjcewqyqVPwVORqr8JE5GOxXCss2LWFhjWEFwlJva69AYszbz-Pa8xB9Q]
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:49:35 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:49:35 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [bb]
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [bb]
2024-09-05 18:49:35 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:49:35 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [bb]
2024-09-05 18:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@559626a8
2024-09-05 18:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1678 ms
2024-09-05 18:49:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@559626a8]
2024-09-05 18:51:01 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m39s372ms).
2024-09-05 18:51:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:51:01 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 18:51:01 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 4 ms
2024-09-05 18:51:01 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:51:01 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:51:02 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:51:02 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:51:02 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:51:03 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:51:03 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 48668 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:51:03 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:51:03 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:51:03 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:51:03 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:51:04 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:51:04 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:51:04 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 69 ms. Found 3 JPA repository interfaces.
2024-09-05 18:51:04 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:51:04 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:51:04 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:51:04 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:51:04 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:51:04 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 18:51:04 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:51:04 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 18:51:04 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 18:51:04 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 18:51:04 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 18:51:04 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 774 ms
2024-09-05 18:51:04 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:51:04 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:51:04 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:51:04 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:51:04 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:51:04 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:51:04 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:51:05 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:51:05 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:51:05 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:51:05 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:51:05 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:51:05 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:51:05 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:51:05 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:51:05 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:51:05 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:51:05 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:51:05 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@298e9cbf
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 7 ms
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@298e9cbf]
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@1cedfd0e
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 8 ms
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@2d365ee7
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@4efd098a]
2024-09-05 18:51:05 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@7adfefd2
2024-09-05 18:51:05 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 13 ms
2024-09-05 18:51:05 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:51:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@51319d81]
2024-09-05 18:51:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@1338254c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@43a9c2c9, org.springframework.security.web.context.SecurityContextHolderFilter@fbb54f9, org.springframework.security.web.header.HeaderWriterFilter@3f43fdec, org.springframework.security.web.authentication.logout.LogoutFilter@3a66eee6, com.hayan.dividend.jwt.JwtAuthenticationFilter@7a5282cc, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1ba7bf34, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@43cbcea6, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7ab9e3f4, org.springframework.security.web.session.SessionManagementFilter@7f1367d1, org.springframework.security.web.access.ExceptionTranslationFilter@32db5090, org.springframework.security.web.access.intercept.AuthorizationFilter@686714c6]]
2024-09-05 18:51:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-05 18:51:06 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:51:06 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 18:51:06 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:51:06 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.531 seconds (process running for 3.046)
2024-09-05 18:51:11 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 18:51:11 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 18:51:11 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 18:51:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 18:51:11 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 18:51:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 18:51:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 18:51:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 104 ms
2024-09-05 18:51:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:51:11 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:51:11 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@58ef1444
2024-09-05 18:51:11 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 111 ms
2024-09-05 18:51:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:51:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:51:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:51:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:51:13 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:51:13 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 196 ms
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODczLCJleHAiOjE3MjU2MTYyNzN9.wLvI-vgjptVHMOVEyR_7QsDdXl5YyV4n30PVHdqBen-xSysG6WfCDBAmbmVdhn3n6iiGWte1j40zTk61ugCGLw
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 23 ms
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODczLCJleHAiOjE3MjU2MTYyNzN9.wLvI-vgjptVHMOVEyR_7QsDdXl5YyV4n30PVHdqBen-xSysG6WfCDBAmbmVdhn3n6iiGWte1j40zTk61ugCGLw
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 220 ms
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODczLCJleHAiOjE3MjU2MTYyNzN9.wLvI-vgjptVHMOVEyR_7QsDdXl5YyV4n30PVHdqBen-xSysG6WfCDBAmbmVdhn3n6iiGWte1j40zTk61ugCGLw"]>
2024-09-05 18:51:13 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 222 ms
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODczLCJleHAiOjE3MjU2MTYyNzN9.wLvI-vgjptVHMOVEyR_7QsDdXl5YyV4n30PVHdqBen-xSysG6WfCDBAmbmVdhn3n6iiGWte1j40zTk61ugCGLw]
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 27 ms
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODczLCJleHAiOjE3MjU2MTYyNzN9.wLvI-vgjptVHMOVEyR_7QsDdXl5YyV4n30PVHdqBen-xSysG6WfCDBAmbmVdhn3n6iiGWte1j40zTk61ugCGLw]
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:51:18 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:51:18 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [bb]
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [bb]
2024-09-05 18:51:18 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:51:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [bb]
2024-09-05 18:51:20 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@7702e8d5
2024-09-05 18:51:20 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1742 ms
2024-09-05 18:51:20 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@7702e8d5]
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 9203 ms
2024-09-05 18:51:29 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 4 ms
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=BlackBerry Limited]]
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 10976 ms
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@13407bb6
2024-09-05 18:51:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 10976 ms
2024-09-05 18:51:29 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:51:29 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:51:29 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:51:29 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:51:31 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:51:31 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 48713 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:51:31 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:51:31 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:51:31 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:51:31 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:51:31 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:51:31 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:51:31 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 59 ms. Found 3 JPA repository interfaces.
2024-09-05 18:51:31 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:51:31 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:51:31 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:51:31 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:51:31 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:51:31 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-05 18:51:32 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:51:32 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 18:51:32 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 18:51:32 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 18:51:32 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 18:51:32 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 702 ms
2024-09-05 18:51:32 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:51:32 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:51:32 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:51:32 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:51:32 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:51:32 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:51:32 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:51:32 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:51:32 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:51:32 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:51:32 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:51:32 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:51:32 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:51:32 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:51:32 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:51:32 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:51:32 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:51:32 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:51:33 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@1b0d8ce3
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 8 ms
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@1b0d8ce3]
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@19d762e8
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@32b91ce1
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@6dff310d]
2024-09-05 18:51:33 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@5ef54f42
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 18:51:33 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@1eb75897]
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@593e7402, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@39625a9c, org.springframework.security.web.context.SecurityContextHolderFilter@3fd8498e, org.springframework.security.web.header.HeaderWriterFilter@4730b531, org.springframework.security.web.authentication.logout.LogoutFilter@5c82182b, com.hayan.dividend.jwt.JwtAuthenticationFilter@67c1dc05, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@530bd99c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3a2576f0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@143a37a5, org.springframework.security.web.session.SessionManagementFilter@2ab3af50, org.springframework.security.web.access.ExceptionTranslationFilter@391656d6, org.springframework.security.web.access.intercept.AuthorizationFilter@6c7189b0]]
2024-09-05 18:51:33 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 18:51:33 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:51:33 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 18:51:33 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:51:33 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.316 seconds (process running for 2.608)
2024-09-05 18:51:37 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 18:51:37 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 18:51:37 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 18:51:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:51:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 18:51:37 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 18:51:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 18:51:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 99 ms
2024-09-05 18:51:37 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:51:37 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:51:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@23ec91d9
2024-09-05 18:51:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 105 ms
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:51:39 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:51:39 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 16 ms
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 196 ms
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODk5LCJleHAiOjE3MjU2MTYyOTl9.RXjNtRDj8XhCtLLvXoJb_frWzLkGxAfODwJlAgrNI3QDJzNDiOckQl8PI63NixqvrlrDV-N71XpM9vg6WGVdgg
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 20 ms
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODk5LCJleHAiOjE3MjU2MTYyOTl9.RXjNtRDj8XhCtLLvXoJb_frWzLkGxAfODwJlAgrNI3QDJzNDiOckQl8PI63NixqvrlrDV-N71XpM9vg6WGVdgg
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 216 ms
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODk5LCJleHAiOjE3MjU2MTYyOTl9.RXjNtRDj8XhCtLLvXoJb_frWzLkGxAfODwJlAgrNI3QDJzNDiOckQl8PI63NixqvrlrDV-N71XpM9vg6WGVdgg"]>
2024-09-05 18:51:39 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 219 ms
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODk5LCJleHAiOjE3MjU2MTYyOTl9.RXjNtRDj8XhCtLLvXoJb_frWzLkGxAfODwJlAgrNI3QDJzNDiOckQl8PI63NixqvrlrDV-N71XpM9vg6WGVdgg]
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 19 ms
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODk5LCJleHAiOjE3MjU2MTYyOTl9.RXjNtRDj8XhCtLLvXoJb_frWzLkGxAfODwJlAgrNI3QDJzNDiOckQl8PI63NixqvrlrDV-N71XpM9vg6WGVdgg]
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 0 ms
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:51:44 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:51:44 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 19 ms
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [bb]
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [bb]
2024-09-05 18:51:44 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:51:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [bb]
2024-09-05 18:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@14a5cf05
2024-09-05 18:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 2005 ms
2024-09-05 18:51:46 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@14a5cf05]
2024-09-05 18:51:47 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-05 18:51:47 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1050 ms
2024-09-05 18:51:48 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 4 ms
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=BlackBerry Limited]]
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 1 ms
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 3080 ms
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@7360f0d2
2024-09-05 18:51:48 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 3080 ms
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODk5LCJleHAiOjE3MjU2MTYyOTl9.RXjNtRDj8XhCtLLvXoJb_frWzLkGxAfODwJlAgrNI3QDJzNDiOckQl8PI63NixqvrlrDV-N71XpM9vg6WGVdgg]
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5ODk5LCJleHAiOjE3MjU2MTYyOTl9.RXjNtRDj8XhCtLLvXoJb_frWzLkGxAfODwJlAgrNI3QDJzNDiOckQl8PI63NixqvrlrDV-N71XpM9vg6WGVdgg]
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 3 ms
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:52:06 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:52:06 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 4 ms
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-05 18:52:06 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:52:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-05 18:52:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@14807830
2024-09-05 18:52:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1551 ms
2024-09-05 18:52:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@14807830]
2024-09-05 18:52:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:52:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 18:52:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 3 ms
2024-09-05 18:52:09 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException: Cannot invoke "org.jsoup.nodes.Element.text()" because the return value of "org.jsoup.select.Elements.first()" is null]
2024-09-05 18:52:58 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:52:58 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 18:52:58 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 18:52:58 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 18:53:00 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 18:53:00 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 48817 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 18:53:00 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 18:53:00 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 18:53:00 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 18:53:00 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 18:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 18:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 61 ms. Found 3 JPA repository interfaces.
2024-09-05 18:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 18:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 18:53:00 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:53:00 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:53:00 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 18:53:00 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 18:53:00 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 18:53:00 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 18:53:00 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 18:53:00 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 18:53:00 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 18:53:00 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 708 ms
2024-09-05 18:53:01 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 18:53:01 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 18:53:01 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 18:53:01 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 18:53:01 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 18:53:01 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 18:53:01 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 18:53:01 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 18:53:01 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 18:53:01 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:53:01 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 18:53:01 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 18:53:01 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 18:53:01 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 18:53:01 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 18:53:01 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 18:53:01 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 18:53:01 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 18:53:01 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 18:53:01 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2a725f9b
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 7 ms
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2a725f9b]
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@c40e53c
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@760cc42e
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@5a223051]
2024-09-05 18:53:02 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@14c77065
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 18:53:02 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@414f3670]
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@30369734, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6c7189b0, org.springframework.security.web.context.SecurityContextHolderFilter@42516ee1, org.springframework.security.web.header.HeaderWriterFilter@1f19bc01, org.springframework.security.web.authentication.logout.LogoutFilter@4481e4fd, com.hayan.dividend.jwt.JwtAuthenticationFilter@3dba4d9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6a463614, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@50b46caf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5d35c7a7, org.springframework.security.web.session.SessionManagementFilter@549783b8, org.springframework.security.web.access.ExceptionTranslationFilter@66e4579, org.springframework.security.web.access.intercept.AuthorizationFilter@40c38b01]]
2024-09-05 18:53:02 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 16 ms
2024-09-05 18:53:02 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 18:53:02 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 18:53:02 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 18:53:02 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.317 seconds (process running for 2.611)
2024-09-05 18:53:06 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 18:53:06 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 18:53:06 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 18:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 18:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 18:53:06 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 18:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 18:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 100 ms
2024-09-05 18:53:06 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:53:06 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 18:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@58ff7307
2024-09-05 18:53:06 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 106 ms
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:53:09 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:53:09 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 18 ms
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 203 ms
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5OTg5LCJleHAiOjE3MjU2MTYzODl9.PG7vjkhkw22Frq-3YDFx_iBemPrudeMlhmk_JY7EadOz4S-3JnDYCV2D0mNDy4vn3P6Px5KMPI5EOxL7yTv-WA
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 21 ms
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5OTg5LCJleHAiOjE3MjU2MTYzODl9.PG7vjkhkw22Frq-3YDFx_iBemPrudeMlhmk_JY7EadOz4S-3JnDYCV2D0mNDy4vn3P6Px5KMPI5EOxL7yTv-WA
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 224 ms
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5OTg5LCJleHAiOjE3MjU2MTYzODl9.PG7vjkhkw22Frq-3YDFx_iBemPrudeMlhmk_JY7EadOz4S-3JnDYCV2D0mNDy4vn3P6Px5KMPI5EOxL7yTv-WA"]>
2024-09-05 18:53:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 226 ms
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5OTg5LCJleHAiOjE3MjU2MTYzODl9.PG7vjkhkw22Frq-3YDFx_iBemPrudeMlhmk_JY7EadOz4S-3JnDYCV2D0mNDy4vn3P6Px5KMPI5EOxL7yTv-WA]
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 24 ms
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5OTg5LCJleHAiOjE3MjU2MTYzODl9.PG7vjkhkw22Frq-3YDFx_iBemPrudeMlhmk_JY7EadOz4S-3JnDYCV2D0mNDy4vn3P6Px5KMPI5EOxL7yTv-WA]
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:53:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:53:15 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 24 ms
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-05 18:53:15 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:53:15 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-05 18:53:18 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@6c549960
2024-09-05 18:53:18 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 3089 ms
2024-09-05 18:53:18 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@6c549960]
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@30d3e9a, com.hayan.dividend.domain.Dividend@4bdde3ca, com.hayan.dividend.domain.Dividend@4ed349ad, com.hayan.dividend.domain.Dividend@3d21dd0a, com.hayan.dividend.domain.Dividend@57b2cdda, com.hayan.dividend.domain.Dividend@7355b755, com.hayan.dividend.domain.Dividend@271f06b3, com.hayan.dividend.domain.Dividend@14e556d7, com.hayan.dividend.domain.Dividend@55f8858c, com.hayan.dividend.domain.Dividend@bc97f79, com.hayan.dividend.domain.Dividend@54bcda2d, com.hayan.dividend.domain.Dividend@6a517d83, com.hayan.dividend.domain.Dividend@7b1441a0, com.hayan.dividend.domain.Dividend@3be6db0c, com.hayan.dividend.domain.Dividend@9b903ef, com.hayan.dividend.domain.Dividend@68e5da3e, com.hayan.dividend.domain.Dividend@31a59fc3, com.hayan.dividend.domain.Dividend@3c960c40, com.hayan.dividend.domain.Dividend@7df1c646, com.hayan.dividend.domain.Dividend@3b03d7ec, com.hayan.dividend.domain.Dividend@26c51cc8, com.hayan.dividend.domain.Dividend@2a3de05c, com.hayan.dividend.domain.Dividend@590dd0ab, com.hayan.dividend.domain.Dividend@7c14c0d1, com.hayan.dividend.domain.Dividend@7239b0c7, com.hayan.dividend.domain.Dividend@37c381dc, com.hayan.dividend.domain.Dividend@fc9707, com.hayan.dividend.domain.Dividend@5a34cd81, com.hayan.dividend.domain.Dividend@6534e188, com.hayan.dividend.domain.Dividend@4e524193, com.hayan.dividend.domain.Dividend@2af2b3f1, com.hayan.dividend.domain.Dividend@56d62beb, com.hayan.dividend.domain.Dividend@142cb818, com.hayan.dividend.domain.Dividend@482e2dd7, com.hayan.dividend.domain.Dividend@77fc6218, com.hayan.dividend.domain.Dividend@1092967f, com.hayan.dividend.domain.Dividend@618f100d, com.hayan.dividend.domain.Dividend@5876c97e, com.hayan.dividend.domain.Dividend@4c0e9cca, com.hayan.dividend.domain.Dividend@482bda5a, com.hayan.dividend.domain.Dividend@513da42a, com.hayan.dividend.domain.Dividend@3f6eaa4a, com.hayan.dividend.domain.Dividend@7be89a1, com.hayan.dividend.domain.Dividend@11517a06, com.hayan.dividend.domain.Dividend@2df190f2, com.hayan.dividend.domain.Dividend@678743fc, com.hayan.dividend.domain.Dividend@14872d2c, com.hayan.dividend.domain.Dividend@e9ce4f0, com.hayan.dividend.domain.Dividend@2fcb83d1, com.hayan.dividend.domain.Dividend@728ead77, com.hayan.dividend.domain.Dividend@5f4d0047]
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1335 ms
2024-09-05 18:53:19 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@30d3e9a, com.hayan.dividend.domain.Dividend@4bdde3ca, com.hayan.dividend.domain.Dividend@4ed349ad, com.hayan.dividend.domain.Dividend@3d21dd0a, com.hayan.dividend.domain.Dividend@57b2cdda, com.hayan.dividend.domain.Dividend@7355b755, com.hayan.dividend.domain.Dividend@271f06b3, com.hayan.dividend.domain.Dividend@14e556d7, com.hayan.dividend.domain.Dividend@55f8858c, com.hayan.dividend.domain.Dividend@bc97f79, com.hayan.dividend.domain.Dividend@54bcda2d, com.hayan.dividend.domain.Dividend@6a517d83, com.hayan.dividend.domain.Dividend@7b1441a0, com.hayan.dividend.domain.Dividend@3be6db0c, com.hayan.dividend.domain.Dividend@9b903ef, com.hayan.dividend.domain.Dividend@68e5da3e, com.hayan.dividend.domain.Dividend@31a59fc3, com.hayan.dividend.domain.Dividend@3c960c40, com.hayan.dividend.domain.Dividend@7df1c646, com.hayan.dividend.domain.Dividend@3b03d7ec, com.hayan.dividend.domain.Dividend@26c51cc8, com.hayan.dividend.domain.Dividend@2a3de05c, com.hayan.dividend.domain.Dividend@590dd0ab, com.hayan.dividend.domain.Dividend@7c14c0d1, com.hayan.dividend.domain.Dividend@7239b0c7, com.hayan.dividend.domain.Dividend@37c381dc, com.hayan.dividend.domain.Dividend@fc9707, com.hayan.dividend.domain.Dividend@5a34cd81, com.hayan.dividend.domain.Dividend@6534e188, com.hayan.dividend.domain.Dividend@4e524193, com.hayan.dividend.domain.Dividend@2af2b3f1, com.hayan.dividend.domain.Dividend@56d62beb, com.hayan.dividend.domain.Dividend@142cb818, com.hayan.dividend.domain.Dividend@482e2dd7, com.hayan.dividend.domain.Dividend@77fc6218, com.hayan.dividend.domain.Dividend@1092967f, com.hayan.dividend.domain.Dividend@618f100d, com.hayan.dividend.domain.Dividend@5876c97e, com.hayan.dividend.domain.Dividend@4c0e9cca, com.hayan.dividend.domain.Dividend@482bda5a, com.hayan.dividend.domain.Dividend@513da42a, com.hayan.dividend.domain.Dividend@3f6eaa4a, com.hayan.dividend.domain.Dividend@7be89a1, com.hayan.dividend.domain.Dividend@11517a06, com.hayan.dividend.domain.Dividend@2df190f2, com.hayan.dividend.domain.Dividend@678743fc, com.hayan.dividend.domain.Dividend@14872d2c, com.hayan.dividend.domain.Dividend@e9ce4f0, com.hayan.dividend.domain.Dividend@2fcb83d1, com.hayan.dividend.domain.Dividend@728ead77, com.hayan.dividend.domain.Dividend@5f4d0047]]
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 10 ms
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Agilent Technologies, Inc.]]
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 4450 ms
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@3fc54a1c
2024-09-05 18:53:19 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 4452 ms
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5OTg5LCJleHAiOjE3MjU2MTYzODl9.PG7vjkhkw22Frq-3YDFx_iBemPrudeMlhmk_JY7EadOz4S-3JnDYCV2D0mNDy4vn3P6Px5KMPI5EOxL7yTv-WA]
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 2 ms
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5OTg5LCJleHAiOjE3MjU2MTYzODl9.PG7vjkhkw22Frq-3YDFx_iBemPrudeMlhmk_JY7EadOz4S-3JnDYCV2D0mNDy4vn3P6Px5KMPI5EOxL7yTv-WA]
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 18:53:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 18:53:22 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 5 ms
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [bb]
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [bb]
2024-09-05 18:53:22 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 18:53:22 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [bb]
2024-09-05 18:53:23 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@53bb5b30
2024-09-05 18:53:23 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1401 ms
2024-09-05 18:53:23 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@53bb5b30]
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: []
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 953 ms
2024-09-05 18:53:24 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[]]
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 1 ms
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=BlackBerry Limited]]
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2361 ms
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@4d883673
2024-09-05 18:53:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2364 ms
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5OTg5LCJleHAiOjE3MjU2MTYzODl9.PG7vjkhkw22Frq-3YDFx_iBemPrudeMlhmk_JY7EadOz4S-3JnDYCV2D0mNDy4vn3P6Px5KMPI5EOxL7yTv-WA]
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 10 ms
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTI5OTg5LCJleHAiOjE3MjU2MTYzODl9.PG7vjkhkw22Frq-3YDFx_iBemPrudeMlhmk_JY7EadOz4S-3JnDYCV2D0mNDy4vn3P6Px5KMPI5EOxL7yTv-WA]
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 0 ms
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 19:32:07 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 19:32:07 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 10 ms
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [clsf]
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [clsf]
2024-09-05 19:32:07 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 19:32:07 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [clsf]
2024-09-05 19:32:09 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 19:32:09 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 19:32:09 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 4 ms
2024-09-05 19:32:09 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 19:32:25 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 19:32:25 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 19:32:25 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 19:32:25 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 19:32:27 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 19:32:27 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 51767 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 19:32:27 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 19:32:27 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 19:32:27 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 19:32:27 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 19:32:27 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 19:32:27 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 19:32:27 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 3 JPA repository interfaces.
2024-09-05 19:32:27 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 19:32:27 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 19:32:27 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 19:32:27 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 19:32:27 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 19:32:27 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 19:32:28 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 19:32:28 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 19:32:28 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 19:32:28 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 19:32:28 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 19:32:28 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 998 ms
2024-09-05 19:32:28 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 19:32:28 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 19:32:28 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 19:32:28 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 19:32:28 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 19:32:28 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 19:32:28 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 19:32:28 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 19:32:28 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 19:32:28 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 19:32:28 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 19:32:28 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 19:32:28 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 19:32:28 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 19:32:28 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 19:32:28 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 19:32:28 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 19:32:28 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 19:32:29 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2a2a11c0
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 9 ms
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@2a2a11c0]
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@31f55f6b
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3a948960
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 1 ms
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@44767290]
2024-09-05 19:32:29 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@4b8bea4a
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-05 19:32:29 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@aaf8fd9]
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@3a66eee6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@583605c9, org.springframework.security.web.context.SecurityContextHolderFilter@50540aa0, org.springframework.security.web.header.HeaderWriterFilter@3292a79a, org.springframework.security.web.authentication.logout.LogoutFilter@3053a7a9, com.hayan.dividend.jwt.JwtAuthenticationFilter@7f837ebe, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7654b2f0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@622250fa, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@a20642c, org.springframework.security.web.session.SessionManagementFilter@6a2cbf89, org.springframework.security.web.access.ExceptionTranslationFilter@f8d1b0a, org.springframework.security.web.access.intercept.AuthorizationFilter@5b8736bd]]
2024-09-05 19:32:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 17 ms
2024-09-05 19:32:29 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 19:32:29 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 19:32:29 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 19:32:29 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.875 seconds (process running for 3.367)
2024-09-05 19:32:34 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 19:32:34 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 19:32:34 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 19:32:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 19:32:43 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 19:32:43 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 19:32:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 19:32:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 110 ms
2024-09-05 19:32:43 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 19:32:43 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 19:32:43 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@5f364f70
2024-09-05 19:32:43 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 118 ms
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 19:32:44 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 19:32:44 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 201 ms
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyMzY0LCJleHAiOjE3MjU2MTg3NjR9.10u4_KDYqu2HKw06Pzdbct0tzJgkwtJGz5Aj29eqbyeqTerHq09ZYafRb2wPj84SaL_lporr9eR7Ovd-JVvsfQ
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 26 ms
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyMzY0LCJleHAiOjE3MjU2MTg3NjR9.10u4_KDYqu2HKw06Pzdbct0tzJgkwtJGz5Aj29eqbyeqTerHq09ZYafRb2wPj84SaL_lporr9eR7Ovd-JVvsfQ
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 231 ms
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyMzY0LCJleHAiOjE3MjU2MTg3NjR9.10u4_KDYqu2HKw06Pzdbct0tzJgkwtJGz5Aj29eqbyeqTerHq09ZYafRb2wPj84SaL_lporr9eR7Ovd-JVvsfQ"]>
2024-09-05 19:32:44 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 234 ms
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyMzY0LCJleHAiOjE3MjU2MTg3NjR9.10u4_KDYqu2HKw06Pzdbct0tzJgkwtJGz5Aj29eqbyeqTerHq09ZYafRb2wPj84SaL_lporr9eR7Ovd-JVvsfQ]
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 27 ms
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyMzY0LCJleHAiOjE3MjU2MTg3NjR9.10u4_KDYqu2HKw06Pzdbct0tzJgkwtJGz5Aj29eqbyeqTerHq09ZYafRb2wPj84SaL_lporr9eR7Ovd-JVvsfQ]
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 19:32:51 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 19:32:51 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [clsf]
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [clsf]
2024-09-05 19:32:51 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 19:32:51 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [clsf]
2024-09-05 19:32:53 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 19:32:53 ERROR c.h.d.e.GlobalExceptionHandler - Unexpected Exception: Index 1 out of bounds for length 1
java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)
	at java.base/java.util.Objects.checkIndex(Objects.java:361)
	at java.base/java.util.ArrayList.get(ArrayList.java:427)
	at com.hayan.dividend.scraper.YahooFinanceScraper.scrapCompany(YahooFinanceScraper.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.scraper.YahooFinanceScraper$$SpringCGLIB$$0.scrapCompany(<generated>)
	at com.hayan.dividend.service.FinanceService.save(FinanceService.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.service.FinanceService$$SpringCGLIB$$0.save(<generated>)
	at com.hayan.dividend.controller.FinanceController.create(FinanceController.java:25)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.controller.FinanceController$$SpringCGLIB$$0.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:39)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 19:32:53 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 19:32:53 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 5 ms
2024-09-05 19:32:53 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 19:33:22 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 19:33:22 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 19:33:22 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 19:33:22 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 19:33:24 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 19:33:24 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 51842 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 19:33:24 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 19:33:24 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 19:33:24 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 19:33:24 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 19:33:24 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 19:33:24 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 19:33:24 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 65 ms. Found 3 JPA repository interfaces.
2024-09-05 19:33:24 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 19:33:24 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 19:33:24 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 19:33:24 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 19:33:24 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 19:33:24 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 2 ms. Found 0 Redis repository interfaces.
2024-09-05 19:33:24 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 19:33:24 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 19:33:24 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 19:33:24 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 19:33:24 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 19:33:24 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 770 ms
2024-09-05 19:33:24 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 19:33:24 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 19:33:24 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 19:33:25 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 19:33:25 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 19:33:25 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 19:33:25 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 19:33:25 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 19:33:25 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 19:33:25 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 19:33:25 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 19:33:25 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 19:33:25 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 19:33:25 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 19:33:25 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 19:33:25 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 19:33:25 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 19:33:25 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 19:33:25 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 19:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 19:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@49a6efe1
2024-09-05 19:33:25 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 7 ms
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@49a6efe1]
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@301fd22b
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@3ae9a526
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@48d8c39f]
2024-09-05 19:33:26 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@f27365a
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 11 ms
2024-09-05 19:33:26 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@359981ce]
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@21464794, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7f9cd3a3, org.springframework.security.web.context.SecurityContextHolderFilter@2692420e, org.springframework.security.web.header.HeaderWriterFilter@74494674, org.springframework.security.web.authentication.logout.LogoutFilter@11d7b616, com.hayan.dividend.jwt.JwtAuthenticationFilter@1ea18915, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@34c36d77, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@747d9876, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@13ee6c08, org.springframework.security.web.session.SessionManagementFilter@60beefbe, org.springframework.security.web.access.ExceptionTranslationFilter@409a4709, org.springframework.security.web.access.intercept.AuthorizationFilter@7864dc1b]]
2024-09-05 19:33:26 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 18 ms
2024-09-05 19:33:26 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 19:33:26 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 19:33:26 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 19:33:26 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.535 seconds (process running for 2.927)
2024-09-05 19:33:29 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 19:33:29 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 19:33:29 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 19:33:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 19:33:29 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[READ, WRITE]]]
2024-09-05 19:33:29 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 19:33:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 19:33:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 105 ms
2024-09-05 19:33:29 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 19:33:29 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 19:33:29 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@1884e00e
2024-09-05 19:33:29 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 111 ms
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 19:33:31 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 19:33:31 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 203 ms
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyNDExLCJleHAiOjE3MjU2MTg4MTF9._mHXHyxEdtVwKT2P30lrO8RT-Rwi3ydV2nmOezUQHk0tkbZw7WqFhl5Hu54RFUX-Nc7qVHrT4ki0JaLCqHZ65g
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 24 ms
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyNDExLCJleHAiOjE3MjU2MTg4MTF9._mHXHyxEdtVwKT2P30lrO8RT-Rwi3ydV2nmOezUQHk0tkbZw7WqFhl5Hu54RFUX-Nc7qVHrT4ki0JaLCqHZ65g
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 229 ms
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyNDExLCJleHAiOjE3MjU2MTg4MTF9._mHXHyxEdtVwKT2P30lrO8RT-Rwi3ydV2nmOezUQHk0tkbZw7WqFhl5Hu54RFUX-Nc7qVHrT4ki0JaLCqHZ65g"]>
2024-09-05 19:33:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 231 ms
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyNDExLCJleHAiOjE3MjU2MTg4MTF9._mHXHyxEdtVwKT2P30lrO8RT-Rwi3ydV2nmOezUQHk0tkbZw7WqFhl5Hu54RFUX-Nc7qVHrT4ki0JaLCqHZ65g]
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 27 ms
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMyNDExLCJleHAiOjE3MjU2MTg4MTF9._mHXHyxEdtVwKT2P30lrO8RT-Rwi3ydV2nmOezUQHk0tkbZw7WqFhl5Hu54RFUX-Nc7qVHrT4ki0JaLCqHZ65g]
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 1 ms
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 19:33:37 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 19:33:37 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 23 ms
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [clsf]
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [clsf]
2024-09-05 19:33:37 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 19:33:37 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [clsf]
2024-09-05 19:44:04 WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=10m39s857ms).
2024-09-05 19:44:04 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleUnexpectedException with arguments: [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 19:44:04 WARN  sun.rmi.transport.tcp - RMI TCP Accept-0: accept loop for ServerSocket[addr=0.0.0.0/0.0.0.0,localport=56061] throws
java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host where the RMI remote objects have been exported.
	at jdk.management.agent/sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:114)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:413)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:377)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 19:44:04 WARN  sun.rmi.transport.tcp - RMI TCP Accept-0: accept loop for ServerSocket[addr=0.0.0.0/0.0.0.0,localport=56061] throws
java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host where the RMI remote objects have been exported.
	at jdk.management.agent/sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:114)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:413)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:377)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 19:44:04 ERROR c.h.d.e.GlobalExceptionHandler - Unexpected Exception: Index 1 out of bounds for length 1
java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1
	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)
	at java.base/java.util.Objects.checkIndex(Objects.java:361)
	at java.base/java.util.ArrayList.get(ArrayList.java:427)
	at com.hayan.dividend.scraper.YahooFinanceScraper.scrapCompany(YahooFinanceScraper.java:34)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.scraper.YahooFinanceScraper$$SpringCGLIB$$0.scrapCompany(<generated>)
	at com.hayan.dividend.service.FinanceService.save(FinanceService.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:379)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.service.FinanceService$$SpringCGLIB$$0.save(<generated>)
	at com.hayan.dividend.controller.FinanceController.create(FinanceController.java:25)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:355)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:57)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:58)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.hayan.dividend.aop.LoggingAspect.logExecutionTime(LoggingAspect.java:38)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:768)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:720)
	at com.hayan.dividend.controller.FinanceController$$SpringCGLIB$$0.create(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:255)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.hayan.dividend.jwt.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:39)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:230)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:384)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:904)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 19:44:04 WARN  sun.rmi.transport.tcp - RMI TCP Accept-0: accept loop for ServerSocket[addr=0.0.0.0/0.0.0.0,localport=56061] throws
java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host where the RMI remote objects have been exported.
	at jdk.management.agent/sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:114)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:413)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:377)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 19:44:04 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleUnexpectedException with result: <500 INTERNAL_SERVER_ERROR Internal Server Error,ErrorResponse[status=500, name=INTERNAL_SERVER_ERROR, message=서버 내부 오류입니다.],[]>
2024-09-05 19:44:04 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleUnexpectedException in 3 ms
2024-09-05 19:44:04 WARN  sun.rmi.transport.tcp - RMI TCP Accept-0: accept loop for ServerSocket[addr=0.0.0.0/0.0.0.0,localport=56061] throws
java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host where the RMI remote objects have been exported.
	at jdk.management.agent/sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:114)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:413)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:377)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 19:44:04 WARN  sun.rmi.transport.tcp - RMI TCP Accept-0: accept loop for ServerSocket[addr=0.0.0.0/0.0.0.0,localport=56061] throws
java.io.IOException: The server sockets created using the LocalRMIServerSocketFactory only accept connections from clients running on the host where the RMI remote objects have been exported.
	at jdk.management.agent/sun.management.jmxremote.LocalRMIServerSocketFactory$1.accept(LocalRMIServerSocketFactory.java:114)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.executeAcceptLoop(TCPTransport.java:413)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$AcceptLoop.run(TCPTransport.java:377)
	at java.base/java.lang.Thread.run(Thread.java:833)
2024-09-05 19:44:04 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1]
2024-09-05 19:44:05 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 19:44:05 WARN  o.s.b.f.s.DisposableBeanAdapter - Invocation of destroy method failed on bean with name 'inMemoryDatabaseShutdownExecutor': org.h2.jdbc.JdbcSQLNonTransientConnectionException: Database is already closed (to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL) [90121-224]
2024-09-05 19:44:05 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2024-09-05 19:44:05 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2024-09-05 19:44:06 INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2024-09-05 19:44:06 INFO  c.hayan.dividend.DividendApplication - Starting DividendApplication using Java 17.0.7 with PID 52728 (/Users/chowhite/coding/zerobase/dividend/build/classes/java/main started by chowhite in /Users/chowhite/coding/zerobase/dividend)
2024-09-05 19:44:06 INFO  c.hayan.dividend.DividendApplication - The following 2 profiles are active: "test", "default"
2024-09-05 19:44:06 INFO  o.s.b.d.restart.ChangeableUrls - The Class-Path manifest attribute in /Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/java-dotenv-5.2.2.jar referenced one or more files that do not exist: file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/kotlin-stdlib-common-1.4.0.jar,file:/Users/chowhite/.gradle/caches/modules-2/files-2.1/io.github.cdimascio/java-dotenv/5.2.2/f77d54ff193ed4b07415ab8d7b3d0550716aa8c/annotations-13.0.jar
2024-09-05 19:44:06 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2024-09-05 19:44:06 INFO  o.s.b.d.e.DevToolsPropertyDefaultsPostProcessor - For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2024-09-05 19:44:07 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 19:44:07 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-05 19:44:07 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 74 ms. Found 3 JPA repository interfaces.
2024-09-05 19:44:07 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-05 19:44:07 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2024-09-05 19:44:07 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.CompanyRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 19:44:07 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.DividendRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 19:44:07 INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.hayan.dividend.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2024-09-05 19:44:07 INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 3 ms. Found 0 Redis repository interfaces.
2024-09-05 19:44:07 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2024-09-05 19:44:07 INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2024-09-05 19:44:07 INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2024-09-05 19:44:07 INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.28]
2024-09-05 19:44:07 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2024-09-05 19:44:07 INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 805 ms
2024-09-05 19:44:07 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2024-09-05 19:44:07 INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:db user=SA
2024-09-05 19:44:07 INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2024-09-05 19:44:07 INFO  o.s.b.a.h.H2ConsoleAutoConfiguration - H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:db'
2024-09-05 19:44:07 INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-05 19:44:07 INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.5.2.Final
2024-09-05 19:44:07 INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2024-09-05 19:44:07 INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-05 19:44:08 INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2024-09-05 19:44:08 DEBUG org.hibernate.SQL - 
    create table companies (
        id bigint generated by default as identity,
        name varchar(255) not null,
        ticker varchar(255) not null,
        primary key (id)
    )
2024-09-05 19:44:08 DEBUG org.hibernate.SQL - 
    create table dividends (
        id bigint generated by default as identity,
        date date,
        dividend varchar(255),
        company_id bigint,
        primary key (id)
    )
2024-09-05 19:44:08 DEBUG org.hibernate.SQL - 
    create table user_roles (
        user_id bigint not null,
        role enum ('READ','WRITE')
    )
2024-09-05 19:44:08 DEBUG org.hibernate.SQL - 
    create table users (
        id bigint generated by default as identity,
        password varchar(255) not null,
        username varchar(255) not null,
        primary key (id)
    )
2024-09-05 19:44:08 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists UKr43af9ap4edm43mmtq01oddj6
2024-09-05 19:44:08 DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username)
2024-09-05 19:44:08 DEBUG org.hibernate.SQL - 
    alter table if exists dividends 
       add constraint FKeg6asiy7s7dns1nsxve1avean 
       foreign key (company_id) 
       references companies
2024-09-05 19:44:08 DEBUG org.hibernate.SQL - 
    alter table if exists user_roles 
       add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
       foreign key (user_id) 
       references users
2024-09-05 19:44:08 INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-05 19:44:08 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id,
        c1_0.name,
        c1_0.ticker 
    from
        companies c1_0
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisConnectionFactory with arguments: []
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisConnectionFactory with result: org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@57bbc6a8
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisConnectionFactory in 7 ms
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CacheConfig.redisCacheManager with arguments: [org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory@57bbc6a8]
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CacheConfig.redisCacheManager with result: org.springframework.data.redis.cache.RedisCacheManager@3dbc9b8c
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CacheConfig.redisCacheManager in 9 ms
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.passwordEncoder with arguments: []
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.passwordEncoder with result: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder@7b432cba
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.passwordEncoder in 0 ms
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.authenticationManager with arguments: [org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration@3b16ffac]
2024-09-05 19:44:08 INFO  o.s.s.c.a.a.c.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.authenticationManager with result: org.springframework.security.authentication.ProviderManager@35bc1d56
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.authenticationManager in 10 ms
2024-09-05 19:44:08 WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: SecurityConfig.securityFilterChain with arguments: [org.springframework.security.config.annotation.web.builders.HttpSecurity@46d61d45]
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: SecurityConfig.securityFilterChain with result: DefaultSecurityFilterChain [RequestMatcher=any request, Filters=[org.springframework.security.web.session.DisableEncodeUrlFilter@11caa417, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7b4e5011, org.springframework.security.web.context.SecurityContextHolderFilter@1e1db8a1, org.springframework.security.web.header.HeaderWriterFilter@248343db, org.springframework.security.web.authentication.logout.LogoutFilter@7155a8eb, com.hayan.dividend.jwt.JwtAuthenticationFilter@37414c13, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@129ec986, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3fd8498e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@40c38b01, org.springframework.security.web.session.SessionManagementFilter@1d29b9a3, org.springframework.security.web.access.ExceptionTranslationFilter@2262d273, org.springframework.security.web.access.intercept.AuthorizationFilter@176fb037]]
2024-09-05 19:44:08 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: SecurityConfig.securityFilterChain in 16 ms
2024-09-05 19:44:09 INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729
2024-09-05 19:44:09 INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2024-09-05 19:44:09 INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2024-09-05 19:44:09 INFO  c.hayan.dividend.DividendApplication - Started DividendApplication in 2.483 seconds (process running for 2.809)
2024-09-05 19:44:12 INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2024-09-05 19:44:12 INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2024-09-05 19:44:12 INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2024-09-05 19:44:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 19:44:12 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.register with arguments: [UserRequest[username=hayan, password=test, roles=[WRITE, READ]]]
2024-09-05 19:44:12 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User */insert 
    into
        users (password, username, id) 
    values
        (?, ?, default)
2024-09-05 19:44:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.register with result: null
2024-09-05 19:44:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.register in 101 ms
2024-09-05 19:44:12 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 19:44:12 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.User.roles */insert 
    into
        user_roles (user_id, role) 
    values
        (?, ?)
2024-09-05 19:44:12 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.register with result: com.hayan.dividend.global.ApplicationResponse@2cde5da2
2024-09-05 19:44:12 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.register in 107 ms
2024-09-05 19:44:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserController.signin with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 19:44:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: AuthenticationService.authenticateAndGenerateToken with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 19:44:13 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: UserService.authenticate with arguments: [UserRequest[username=hayan, password=test, roles=null]]
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 19:44:14 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 19:44:14 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 20 ms
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserService.authenticate with result: UsernamePasswordAuthenticationToken [Principal=org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]], Credentials=[PROTECTED], Authenticated=true, Details=null, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserService.authenticate in 206 ms
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.generateToken with arguments: [hayan, [ROLE_READ, ROLE_WRITE]]
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.generateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMzMDU0LCJleHAiOjE3MjU2MTk0NTR9.dOLKDLYW2fJwY190g9pULwyI9oCfYcQRrUdobKADTx67aT2NTJ8GFstx1UrqthnfC-zpiOThfrlePbzvZZ33dA
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.generateToken in 21 ms
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: AuthenticationService.authenticateAndGenerateToken with result: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMzMDU0LCJleHAiOjE3MjU2MTk0NTR9.dOLKDLYW2fJwY190g9pULwyI9oCfYcQRrUdobKADTx67aT2NTJ8GFstx1UrqthnfC-zpiOThfrlePbzvZZ33dA
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: AuthenticationService.authenticateAndGenerateToken in 228 ms
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: UserController.signin with result: <200 OK OK,success,[Authorization:"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMzMDU0LCJleHAiOjE3MjU2MTk0NTR9.dOLKDLYW2fJwY190g9pULwyI9oCfYcQRrUdobKADTx67aT2NTJ8GFstx1UrqthnfC-zpiOThfrlePbzvZZ33dA"]>
2024-09-05 19:44:14 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: UserController.signin in 230 ms
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMzMDU0LCJleHAiOjE3MjU2MTk0NTR9.dOLKDLYW2fJwY190g9pULwyI9oCfYcQRrUdobKADTx67aT2NTJ8GFstx1UrqthnfC-zpiOThfrlePbzvZZ33dA]
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 27 ms
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMzMDU0LCJleHAiOjE3MjU2MTk0NTR9.dOLKDLYW2fJwY190g9pULwyI9oCfYcQRrUdobKADTx67aT2NTJ8GFstx1UrqthnfC-zpiOThfrlePbzvZZ33dA]
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 0 ms
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 19:44:21 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 19:44:21 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 21 ms
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [clsf]
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [clsf]
2024-09-05 19:44:21 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 19:44:21 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [clsf]
2024-09-05 19:44:24 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: GlobalExceptionHandler.handleCustomException with arguments: [com.hayan.dividend.exception.CustomException: 존재하지 않는 회사입니다.]
2024-09-05 19:44:24 ERROR c.h.d.e.GlobalExceptionHandler - CustomException: 존재하지 않는 회사입니다., HTTP Status: 404 NOT_FOUND
2024-09-05 19:44:24 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: GlobalExceptionHandler.handleCustomException with result: <404 NOT_FOUND Not Found,ErrorResponse[status=404, name=COMPANY_NOT_FOUND, message=존재하지 않는 회사입니다.],[]>
2024-09-05 19:44:24 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: GlobalExceptionHandler.handleCustomException in 2 ms
2024-09-05 19:44:24 WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [com.hayan.dividend.exception.CustomException: 존재하지 않는 회사입니다.]
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.validateToken with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMzMDU0LCJleHAiOjE3MjU2MTk0NTR9.dOLKDLYW2fJwY190g9pULwyI9oCfYcQRrUdobKADTx67aT2NTJ8GFstx1UrqthnfC-zpiOThfrlePbzvZZ33dA]
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.validateToken with result: null
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.validateToken in 4 ms
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: JwtTokenProvider.getUsernameFromJWT with arguments: [eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJoYXlhbiIsInJvbGVzIjpbIlJPTEVfUkVBRCIsIlJPTEVfV1JJVEUiXSwiaWF0IjoxNzI1NTMzMDU0LCJleHAiOjE3MjU2MTk0NTR9.dOLKDLYW2fJwY190g9pULwyI9oCfYcQRrUdobKADTx67aT2NTJ8GFstx1UrqthnfC-zpiOThfrlePbzvZZ33dA]
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: JwtTokenProvider.getUsernameFromJWT with result: hayan
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: JwtTokenProvider.getUsernameFromJWT in 2 ms
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: CustomUserDetailsService.loadUserByUsername with arguments: [hayan]
2024-09-05 19:44:28 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        u1_0.id,
        u1_0.password,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
2024-09-05 19:44:28 DEBUG org.hibernate.SQL - 
    select
        r1_0.user_id,
        r1_0.role 
    from
        user_roles r1_0 
    where
        r1_0.user_id=?
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: CustomUserDetailsService.loadUserByUsername with result: org.springframework.security.core.userdetails.User [Username=hayan, Password=[PROTECTED], Enabled=true, AccountNonExpired=true, CredentialsNonExpired=true, AccountNonLocked=true, Granted Authorities=[ROLE_READ, ROLE_WRITE]]
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: CustomUserDetailsService.loadUserByUsername in 6 ms
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceController.create with arguments: [a]
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: FinanceService.save with arguments: [a]
2024-09-05 19:44:28 DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        c1_0.id 
    from
        companies c1_0 
    where
        c1_0.ticker=? 
    fetch
        first ? rows only
2024-09-05 19:44:28 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapCompany with arguments: [a]
2024-09-05 19:44:30 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapCompany with result: com.hayan.dividend.domain.Company@2136f34a
2024-09-05 19:44:30 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapCompany in 1509 ms
2024-09-05 19:44:30 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: YahooFinanceScraper.scrapDividends with arguments: [com.hayan.dividend.domain.Company@2136f34a]
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: YahooFinanceScraper.scrapDividends with result: [com.hayan.dividend.domain.Dividend@1f442ee6, com.hayan.dividend.domain.Dividend@4b173144, com.hayan.dividend.domain.Dividend@2181487c, com.hayan.dividend.domain.Dividend@372e8b44, com.hayan.dividend.domain.Dividend@923a059, com.hayan.dividend.domain.Dividend@7b4c2d28, com.hayan.dividend.domain.Dividend@50a55895, com.hayan.dividend.domain.Dividend@13929d6e, com.hayan.dividend.domain.Dividend@7a7c62d, com.hayan.dividend.domain.Dividend@1d189e9c, com.hayan.dividend.domain.Dividend@67830c5a, com.hayan.dividend.domain.Dividend@60fd8429, com.hayan.dividend.domain.Dividend@59d2a0b5, com.hayan.dividend.domain.Dividend@e7396d, com.hayan.dividend.domain.Dividend@7ff914f7, com.hayan.dividend.domain.Dividend@73290bed, com.hayan.dividend.domain.Dividend@3f32da35, com.hayan.dividend.domain.Dividend@6a7b0ef, com.hayan.dividend.domain.Dividend@314e4260, com.hayan.dividend.domain.Dividend@a0341c7, com.hayan.dividend.domain.Dividend@23c9c1c0, com.hayan.dividend.domain.Dividend@18d23d9e, com.hayan.dividend.domain.Dividend@5b4c31a6, com.hayan.dividend.domain.Dividend@4bd14e71, com.hayan.dividend.domain.Dividend@26fb510a, com.hayan.dividend.domain.Dividend@2fcca686, com.hayan.dividend.domain.Dividend@153763d8, com.hayan.dividend.domain.Dividend@54d405c9, com.hayan.dividend.domain.Dividend@285b7d58, com.hayan.dividend.domain.Dividend@62e90643, com.hayan.dividend.domain.Dividend@4c6e9065, com.hayan.dividend.domain.Dividend@38602e6c, com.hayan.dividend.domain.Dividend@4ba23585, com.hayan.dividend.domain.Dividend@61d3e9ac, com.hayan.dividend.domain.Dividend@5906b04b, com.hayan.dividend.domain.Dividend@60ace649, com.hayan.dividend.domain.Dividend@3a78e9c4, com.hayan.dividend.domain.Dividend@4418f9ae, com.hayan.dividend.domain.Dividend@28f08d8e, com.hayan.dividend.domain.Dividend@2fe9a877, com.hayan.dividend.domain.Dividend@52225287, com.hayan.dividend.domain.Dividend@51f414e4, com.hayan.dividend.domain.Dividend@7d446fa9, com.hayan.dividend.domain.Dividend@1f8cca66, com.hayan.dividend.domain.Dividend@5ffa057a, com.hayan.dividend.domain.Dividend@2ed86955, com.hayan.dividend.domain.Dividend@703f7200, com.hayan.dividend.domain.Dividend@919499b, com.hayan.dividend.domain.Dividend@6474c17, com.hayan.dividend.domain.Dividend@6b380f4b, com.hayan.dividend.domain.Dividend@609cdf5e]
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: YahooFinanceScraper.scrapDividends in 1138 ms
2024-09-05 19:44:31 DEBUG org.hibernate.SQL - 
    /* insert for
        com.hayan.dividend.domain.Company */insert 
    into
        companies (name, ticker, id) 
    values
        (?, ?, default)
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: DividendBulkRepository.saveAll with arguments: [[com.hayan.dividend.domain.Dividend@1f442ee6, com.hayan.dividend.domain.Dividend@4b173144, com.hayan.dividend.domain.Dividend@2181487c, com.hayan.dividend.domain.Dividend@372e8b44, com.hayan.dividend.domain.Dividend@923a059, com.hayan.dividend.domain.Dividend@7b4c2d28, com.hayan.dividend.domain.Dividend@50a55895, com.hayan.dividend.domain.Dividend@13929d6e, com.hayan.dividend.domain.Dividend@7a7c62d, com.hayan.dividend.domain.Dividend@1d189e9c, com.hayan.dividend.domain.Dividend@67830c5a, com.hayan.dividend.domain.Dividend@60fd8429, com.hayan.dividend.domain.Dividend@59d2a0b5, com.hayan.dividend.domain.Dividend@e7396d, com.hayan.dividend.domain.Dividend@7ff914f7, com.hayan.dividend.domain.Dividend@73290bed, com.hayan.dividend.domain.Dividend@3f32da35, com.hayan.dividend.domain.Dividend@6a7b0ef, com.hayan.dividend.domain.Dividend@314e4260, com.hayan.dividend.domain.Dividend@a0341c7, com.hayan.dividend.domain.Dividend@23c9c1c0, com.hayan.dividend.domain.Dividend@18d23d9e, com.hayan.dividend.domain.Dividend@5b4c31a6, com.hayan.dividend.domain.Dividend@4bd14e71, com.hayan.dividend.domain.Dividend@26fb510a, com.hayan.dividend.domain.Dividend@2fcca686, com.hayan.dividend.domain.Dividend@153763d8, com.hayan.dividend.domain.Dividend@54d405c9, com.hayan.dividend.domain.Dividend@285b7d58, com.hayan.dividend.domain.Dividend@62e90643, com.hayan.dividend.domain.Dividend@4c6e9065, com.hayan.dividend.domain.Dividend@38602e6c, com.hayan.dividend.domain.Dividend@4ba23585, com.hayan.dividend.domain.Dividend@61d3e9ac, com.hayan.dividend.domain.Dividend@5906b04b, com.hayan.dividend.domain.Dividend@60ace649, com.hayan.dividend.domain.Dividend@3a78e9c4, com.hayan.dividend.domain.Dividend@4418f9ae, com.hayan.dividend.domain.Dividend@28f08d8e, com.hayan.dividend.domain.Dividend@2fe9a877, com.hayan.dividend.domain.Dividend@52225287, com.hayan.dividend.domain.Dividend@51f414e4, com.hayan.dividend.domain.Dividend@7d446fa9, com.hayan.dividend.domain.Dividend@1f8cca66, com.hayan.dividend.domain.Dividend@5ffa057a, com.hayan.dividend.domain.Dividend@2ed86955, com.hayan.dividend.domain.Dividend@703f7200, com.hayan.dividend.domain.Dividend@919499b, com.hayan.dividend.domain.Dividend@6474c17, com.hayan.dividend.domain.Dividend@6b380f4b, com.hayan.dividend.domain.Dividend@609cdf5e]]
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: DividendBulkRepository.saveAll with result: null
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: DividendBulkRepository.saveAll in 12 ms
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Entering method: TrieService.handleCompanyAddedEvent with arguments: [CompanyAddedEvent[companyName=Agilent Technologies, Inc.]]
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: TrieService.handleCompanyAddedEvent with result: null
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: TrieService.handleCompanyAddedEvent in 0 ms
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceService.save with result: null
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceService.save in 2678 ms
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Exiting method: FinanceController.create with result: com.hayan.dividend.global.ApplicationResponse@4dc5ecc2
2024-09-05 19:44:31 INFO  c.hayan.dividend.aop.LoggingAspect - Executed method: FinanceController.create in 2680 ms
